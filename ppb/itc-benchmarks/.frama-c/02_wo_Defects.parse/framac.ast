/* Generated by Frama-C */
#include "__fc_builtin.h"
#include "ctype.h"
#include "errno.h"
#include "math.h"
#include "pthread.h"
#include "sched.h"
#include "signal.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdint.h"
#include "stdio.c"
#include "stdio.h"
#include "stdlib.h"
#include "string.c"
#include "string.h"
#include "strings.h"
#include "sys/types.h"
#include "time.h"
#include "unistd.h"
struct __anonstruct_dynamic_buffer_overrun_010_s_001_1 {
   int a ;
   int b ;
   int c ;
};
typedef struct __anonstruct_dynamic_buffer_overrun_010_s_001_1 dynamic_buffer_overrun_010_s_001;
struct __anonstruct_dynamic_buffer_overrun_011_s_001_2 {
   int a ;
   int b ;
   int buf[5] ;
};
typedef struct __anonstruct_dynamic_buffer_overrun_011_s_001_2 dynamic_buffer_overrun_011_s_001;
struct __anonstruct_dynamic_buffer_overrun_s_005_3 {
   char arr[10] ;
   int arri[10] ;
};
typedef struct __anonstruct_dynamic_buffer_overrun_s_005_3 dynamic_buffer_overrun_s_005;
struct __anonstruct_dynamic_buffer_underrun_010_s_001_1 {
   int a ;
   int b ;
   int c ;
};
typedef struct __anonstruct_dynamic_buffer_underrun_010_s_001_1 dynamic_buffer_underrun_010_s_001;
struct __anonstruct_dynamic_buffer_underrun_011_s_001_2 {
   int a ;
   int b ;
   int buf[5] ;
};
typedef struct __anonstruct_dynamic_buffer_underrun_011_s_001_2 dynamic_buffer_underrun_011_s_001;
struct __anonstruct_dynamic_buffer_underrun_s_032_3 {
   char arr[10] ;
   int arri[10] ;
};
typedef struct __anonstruct_dynamic_buffer_underrun_s_032_3 dynamic_buffer_underrun_s_032;
struct __anonstruct_dynamic_buffer_underrun_s_038_4 {
   char arr[10] ;
   int arri[10] ;
};
typedef struct __anonstruct_dynamic_buffer_underrun_s_038_4 dynamic_buffer_underrun_s_038;
struct __anonstruct_dynamic_buffer_underrun_s_008_5 {
   char arr[10] ;
   int arri[10] ;
};
typedef struct __anonstruct_dynamic_buffer_underrun_s_008_5 dynamic_buffer_underrun_s_008;
struct __anonstruct_data_lost_010_s_001_1 {
   int ret : 5 ;
   int a : 7 ;
};
typedef struct __anonstruct_data_lost_010_s_001_1 data_lost_010_s_001;
struct __anonstruct_data_overflow_009_s_001_1 {
   int max : 5 ;
   int ret : 5 ;
};
typedef struct __anonstruct_data_overflow_009_s_001_1 data_overflow_009_s_001;
struct __anonstruct_data_overflow_010_s_001_2 {
   unsigned int max : 5 ;
   unsigned int ret : 5 ;
};
typedef struct __anonstruct_data_overflow_010_s_001_2 data_overflow_010_s_001;
struct node {
   int a ;
   struct node *next ;
};
typedef struct node free_nondynamic_allocated_memory_struct_013;
struct node1 {
   int a ;
   struct node1 *next ;
};
typedef struct node1 free_nondynamic_allocated_memory_struct_014;
union __anonunion_invalid_memory_access_009_s_001_1 {
   int *a ;
   int b ;
};
typedef union __anonunion_invalid_memory_access_009_s_001_1 invalid_memory_access_009_s_001;
union __anonunion_invalid_memory_access_009_s_002_2 {
   int a ;
   int b ;
};
typedef union __anonunion_invalid_memory_access_009_s_002_2 invalid_memory_access_009_s_002;
union __anonunion_invalid_memory_access_009_s_003_3 {
   int a ;
   int b ;
};
typedef union __anonunion_invalid_memory_access_009_s_003_3 invalid_memory_access_009_s_003;
struct __anonstruct_invalid_memory_access_009_uni_001_4 {
   invalid_memory_access_009_s_001 *s1 ;
   invalid_memory_access_009_s_002 s2 ;
   invalid_memory_access_009_s_003 s3 ;
};
typedef struct __anonstruct_invalid_memory_access_009_uni_001_4 invalid_memory_access_009_uni_001;
struct __anonstruct_invalid_memory_access_012_s_001_5 {
   int a ;
   int b ;
   int uninit ;
};
typedef struct __anonstruct_invalid_memory_access_012_s_001_5 invalid_memory_access_012_s_001;
struct __anonstruct_invalid_memory_access_013_s_001_6 {
   int a ;
   int b ;
   int uninit ;
};
typedef struct __anonstruct_invalid_memory_access_013_s_001_6 invalid_memory_access_013_s_001;
struct __anonstruct_littlemem_st_001_s_001_1 {
   int a ;
   int b ;
   int c ;
};
typedef struct __anonstruct_littlemem_st_001_s_001_1 littlemem_st_001_s_001;
struct __anonstruct_littlemem_st_002_s_001_2 {
   int a ;
   int b ;
   int c ;
};
typedef struct __anonstruct_littlemem_st_002_s_001_2 littlemem_st_002_s_001;
union __anonunion_littlemem_st_003_uni_001_3 {
   char a ;
   short b ;
   int c ;
};
typedef union __anonunion_littlemem_st_003_uni_001_3 littlemem_st_003_uni_001;
struct __anonstruct_littlemem_st_004_s_001_4 {
   int a ;
   int b ;
   int c ;
};
typedef struct __anonstruct_littlemem_st_004_s_001_4 littlemem_st_004_s_001;
struct __anonstruct_littlemem_st_005_s_001_5 {
   int a ;
   int b ;
   int c ;
};
typedef struct __anonstruct_littlemem_st_005_s_001_5 littlemem_st_005_s_001;
struct __anonstruct_littlemem_st_006_s_001_6 {
   int a ;
   int b ;
   int c ;
};
typedef struct __anonstruct_littlemem_st_006_s_001_6 littlemem_st_006_s_001;
struct __anonstruct_littlemem_st_007_s_001_7 {
   int a ;
   int b ;
   int c ;
};
typedef struct __anonstruct_littlemem_st_007_s_001_7 littlemem_st_007_s_001;
struct __anonstruct_littlemem_st_008_s_001_8 {
   int a ;
   int b ;
   int c ;
};
typedef struct __anonstruct_littlemem_st_008_s_001_8 littlemem_st_008_s_001;
struct __anonstruct_littlemem_st_009_s_001_9 {
   int a ;
   int b ;
   int c ;
};
typedef struct __anonstruct_littlemem_st_009_s_001_9 littlemem_st_009_s_001;
struct __anonstruct_littlemem_st_010_s_001_10 {
   int a ;
   int b ;
   int c ;
};
typedef struct __anonstruct_littlemem_st_010_s_001_10 littlemem_st_010_s_001;
struct __anonstruct_littlemem_st_011_s_001_11 {
   int a ;
   int b ;
   int c ;
};
typedef struct __anonstruct_littlemem_st_011_s_001_11 littlemem_st_011_s_001;
struct __anonstruct_memory_allocation_failure_010_s_001_1 {
   int csr ;
   int data ;
};
typedef struct __anonstruct_memory_allocation_failure_010_s_001_1 memory_allocation_failure_010_s_001;
enum __anonenum_2 {
    max_buffer = 10 * 2
};
struct __anonstruct_memory_allocation_failure_011_s_001_3 {
   int *a ;
   int b ;
};
typedef struct __anonstruct_memory_allocation_failure_011_s_001_3 memory_allocation_failure_011_s_001;
struct __anonstruct_memory_allocation_failure_011_s_002_4 {
   int a ;
   int b ;
};
typedef struct __anonstruct_memory_allocation_failure_011_s_002_4 memory_allocation_failure_011_s_002;
struct __anonstruct_memory_allocation_failure_011_s_003_5 {
   int a ;
   int b ;
};
typedef struct __anonstruct_memory_allocation_failure_011_s_003_5 memory_allocation_failure_011_s_003;
union __anonunion_memory_allocation_failure_011_uni_001_6 {
   memory_allocation_failure_011_s_001 *s1 ;
   memory_allocation_failure_011_s_002 *s2 ;
   memory_allocation_failure_011_s_003 *s3 ;
};
typedef union __anonunion_memory_allocation_failure_011_uni_001_6 memory_allocation_failure_011_uni_001;
struct __anonstruct_memory_allocation_failure_015_s_001_7 {
   int a ;
   int b ;
};
typedef struct __anonstruct_memory_allocation_failure_015_s_001_7 memory_allocation_failure_015_s_001;
struct __anonstruct_null_pointer_004_s_001_1 {
   int a ;
   int b ;
   int c ;
};
typedef struct __anonstruct_null_pointer_004_s_001_1 null_pointer_004_s_001;
struct __anonstruct_null_pointer_005_s_001_2 {
   int a ;
   int b ;
};
typedef struct __anonstruct_null_pointer_005_s_001_2 null_pointer_005_s_001;
struct __anonstruct_null_pointer_005_s_002_3 {
   int a ;
   int b ;
};
typedef struct __anonstruct_null_pointer_005_s_002_3 null_pointer_005_s_002;
struct __anonstruct_null_pointer_005_s_003_4 {
   int a ;
   int b ;
};
typedef struct __anonstruct_null_pointer_005_s_003_4 null_pointer_005_s_003;
union __anonunion_null_pointer_005_uni_001_5 {
   null_pointer_005_s_001 s1 ;
   null_pointer_005_s_002 s2 ;
   null_pointer_005_s_003 s3 ;
};
typedef union __anonunion_null_pointer_005_uni_001_5 null_pointer_005_uni_001;
struct __anonstruct_overrun_st_011_s_001_1 {
   int a ;
   int b ;
   int c ;
};
typedef struct __anonstruct_overrun_st_011_s_001_1 overrun_st_011_s_001;
struct __anonstruct_overrun_st_012_s_001_2 {
   int a ;
   int b ;
   int buf[5] ;
};
typedef struct __anonstruct_overrun_st_012_s_001_2 overrun_st_012_s_001;
struct __anonstruct_pow_related_errors_007_s_1 {
   double arr[1] ;
};
typedef struct __anonstruct_pow_related_errors_007_s_1 pow_related_errors_007_s;
struct __anonstruct_sign_conv_009_s_001_1 {
   unsigned int a : 5 ;
   int ret : 5 ;
};
typedef struct __anonstruct_sign_conv_009_s_001_1 sign_conv_009_s_001;
struct __anonstruct_sign_conv_010_s_001_2 {
   int a : 5 ;
   unsigned int ret : 5 ;
};
typedef struct __anonstruct_sign_conv_010_s_001_2 sign_conv_010_s_001;
struct __anonstruct_st_underrun_002_s_001_1 {
   char buf[10] ;
   char buf1[10] ;
   char buf2[10] ;
   char buf3[10] ;
   char buf4[10] ;
   char buf5[10] ;
   char buf6[10] ;
};
typedef struct __anonstruct_st_underrun_002_s_001_1 st_underrun_002_s_001;
struct __anonstruct_st_underrun_003_s_001_2 {
   char buf[10] ;
   char buf1[10] ;
   char buf2[10] ;
   char buf3[10] ;
   char buf4[10] ;
};
typedef struct __anonstruct_st_underrun_003_s_001_2 st_underrun_003_s_001;
struct __anonstruct_st_underrun_004_s_001_3 {
   char buf[10] ;
   char buf1[10] ;
   char buf2[10] ;
};
typedef struct __anonstruct_st_underrun_004_s_001_3 st_underrun_004_s_001;
struct __anonstruct_st_underrun_005_s_001_4 {
   char buf[10] ;
};
typedef struct __anonstruct_st_underrun_005_s_001_4 st_underrun_005_s_001;
struct __anonstruct_st_underrun_006_s_001_5 {
   char buf[10] ;
   char buf1[10] ;
   char buf2[10] ;
   char buf3[10] ;
   char buf4[10] ;
   char buf5[10] ;
   char buf6[10] ;
};
typedef struct __anonstruct_st_underrun_006_s_001_5 st_underrun_006_s_001;
struct __anonstruct_st_underrun_007_s_001_6 {
   char buf[10] ;
   char buf1[10] ;
   char buf2[10] ;
   char buf3[10] ;
   char buf4[10] ;
   char buf5[10] ;
};
typedef struct __anonstruct_st_underrun_007_s_001_6 st_underrun_007_s_001;
struct __anonstruct_uninit_memory_access_007_s_001_1 {
   int arr[10] ;
   int a ;
   int b ;
   int c ;
};
typedef struct __anonstruct_uninit_memory_access_007_s_001_1 uninit_memory_access_007_s_001;
struct __anonstruct_uninit_memory_access_008_s_001_2 {
   int a : 7 ;
   int b : 7 ;
};
typedef struct __anonstruct_uninit_memory_access_008_s_001_2 uninit_memory_access_008_s_001;
struct __anonstruct_uninit_memory_access_010_s_001_3 {
   unsigned short csr ;
   unsigned short data ;
};
typedef struct __anonstruct_uninit_memory_access_010_s_001_3 uninit_memory_access_010_s_001;
enum __anonenum_4 {
    max_buffer_0 = 24
};
struct __anonstruct_uninit_memory_access_012_s_001_5 {
   int int_a ;
   short short_b ;
   short pad ;
};
typedef struct __anonstruct_uninit_memory_access_012_s_001_5 uninit_memory_access_012_s_001;
enum __anonenum_bool_6 {
    true = 1,
    false = 0
};
typedef enum __anonenum_bool_6 bool;
struct __anonstruct_uninit_memory_access_013_s_001_7 {
   int int_a ;
   bool bool_b ;
   bool dummy[3] ;
   int int_c ;
};
typedef struct __anonstruct_uninit_memory_access_013_s_001_7 uninit_memory_access_013_s_001;
union __anonunion_uninit_memory_access_014_u_001_8 {
   int a ;
   int b ;
};
typedef union __anonunion_uninit_memory_access_014_u_001_8 uninit_memory_access_014_u_001;
struct __anonstruct_uninit_pointer_008_s_001_1 {
   int a ;
   int b ;
   int uninit ;
};
typedef struct __anonstruct_uninit_pointer_008_s_001_1 uninit_pointer_008_s_001;
struct __anonstruct_uninit_pointer_014_s_001_2 {
   int a ;
   int b ;
   int uninit ;
};
typedef struct __anonstruct_uninit_pointer_014_s_001_2 uninit_pointer_014_s_001;
enum __anonenum_values_3 {
    ZERO = 0,
    ONE = 1,
    TWO = 2
};
typedef enum __anonenum_values_3 values;
struct __anonstruct_uninit_var_007_s_001_1 {
   int a ;
   int b ;
   int uninit ;
};
typedef struct __anonstruct_uninit_var_007_s_001_1 uninit_var_007_s_001;
struct __anonstruct_uninit_var_012_s_001_2 {
   unsigned int a ;
   unsigned int b ;
   unsigned int uninit ;
};
typedef struct __anonstruct_uninit_var_012_s_001_2 uninit_var_012_s_001;
struct __anonstruct_uninit_var_014_s_001_4 {
   int a ;
   int b ;
   int uninit ;
};
typedef struct __anonstruct_uninit_var_014_s_001_4 uninit_var_014_s_001;
struct __anonstruct_zero_division_007_s_001_1 {
   int a ;
   int b ;
   int divisor ;
};
typedef struct __anonstruct_zero_division_007_s_001_1 zero_division_007_s_001;
/*@ requires finite_args: \is_finite(x) ∧ \is_finite(y);
    requires finite_logic_res: \is_finite(pow(x, y));
    requires no_underflow: x ≢ 0.0 ⇒ pow(x, y) ≢ 0.0;
    ensures finite_result: \is_finite(\result);
    assigns \result;
    assigns \result \from x, y;
 */
extern double titcb_pow(double x, double y);

int main(int argc, char **argv);

int eva_main(void)
{
  char argv0[256];
  char argv1[256];
  char argv2[256];
  char argv3[256];
  char argv4[256];
  int tmp_0;
  int argc = Frama_C_interval(0,5);
  char *argv[6] = {argv0, argv1, argv2, argv3, argv4, (char *)0};
  {
    int i = 0;
    /*@ loop unroll 5; */
    while (i < 5) {
      Frama_C_make_unknown(argv[i],(size_t)255);
      *(argv[i] + 255) = (char)0;
      i ++;
    }
  }
  tmp_0 = main(argc,argv);
  return tmp_0;
}

int idx;
int sink;
double dsink;
void *psink;
void bit_shift_main(void);

void dynamic_buffer_overrun_main(void);

void dynamic_buffer_underrun_main(void);

void data_lost_main(void);

void data_overflow_main(void);

void data_underflow_main(void);

void double_free_main(void);

void endless_loop_main(void);

void free_nondynamic_allocated_memory_main(void);

void invalid_memory_access_main(void);

void littlemem_st_main(void);

void memory_allocation_failure_main(void);

void not_return_main(void);

void null_pointer_main(void);

void overrun_st_main(void);

void pow_related_errors_main(void);

void ptr_subtraction_main(void);

void return_local_main(void);

void sign_conv_main(void);

void st_underrun_main(void);

void underrun_st_main(void);

void uninit_memory_access_main(void);

void uninit_pointer_main(void);

void uninit_var_main(void);

void zero_division_main(void);

int volatile vflag;
int volatile vflag_copy;
int volatile vflag_file;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1(char const * restrict format, int param0, int param1,
                int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_2(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_3(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_4(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_5(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_6(char const * restrict format);

int main(int argc, char **argv)
{
  int __retres;
  if (*(argv + 1)) {
    double tmp;
    double tmp_0;
    vflag_copy = atoi((char const *)*(argv + 1));
    tmp = floor((double)vflag_copy / 1000.0);
    vflag_file = (int)tmp;
    tmp_0 = floor((double)(vflag_copy % 1000));
    vflag = (int)tmp_0;
    printf("vflag_file = %d vflag_func = %d vflag_copy =%d \n",vflag_file,
           vflag,vflag_copy); /* printf_va_1 */
    if (vflag_file == 1) goto _LOR;
    else 
      if (vflag_file == 888) _LOR: bit_shift_main();
    if (vflag_file == 2) goto _LOR_0;
    else 
      if (vflag_file == 888) _LOR_0: dynamic_buffer_overrun_main();
    if (vflag_file == 3) goto _LOR_1;
    else 
      if (vflag_file == 888) _LOR_1: dynamic_buffer_underrun_main();
    if (vflag_file == 6) goto _LOR_2;
    else 
      if (vflag_file == 888) _LOR_2: data_lost_main();
    if (vflag_file == 7) goto _LOR_3;
    else 
      if (vflag_file == 888) _LOR_3: data_overflow_main();
    if (vflag_file == 8) goto _LOR_4;
    else 
      if (vflag_file == 888) _LOR_4: data_underflow_main();
    if (vflag_file == 12) goto _LOR_5;
    else 
      if (vflag_file == 888) _LOR_5: double_free_main();
    if (vflag_file == 15) goto _LOR_6;
    else 
      if (vflag_file == 888) _LOR_6: endless_loop_main();
    if (vflag_file == 16) goto _LOR_7;
    else 
      if (vflag_file == 888) _LOR_7: free_nondynamic_allocated_memory_main();
    if (vflag_file == 20) goto _LOR_8;
    else 
      if (vflag_file == 888) _LOR_8: ;
    if (vflag_file == 24) goto _LOR_9;
    else 
      if (vflag_file == 888) _LOR_9: invalid_memory_access_main();
    if (vflag_file == 25) goto _LOR_10;
    else 
      if (vflag_file == 888) _LOR_10: littlemem_st_main();
    if (vflag_file == 28) goto _LOR_11;
    else 
      if (vflag_file == 888) _LOR_11: memory_allocation_failure_main();
    if (vflag_file == 30) goto _LOR_12;
    else 
      if (vflag_file == 888) _LOR_12: not_return_main();
    if (vflag_file == 31) goto _LOR_13;
    else 
      if (vflag_file == 888) _LOR_13: null_pointer_main();
    if (vflag_file == 32) goto _LOR_14;
    else 
      if (vflag_file == 888) _LOR_14: overrun_st_main();
    if (vflag_file == 34) goto _LOR_15;
    else 
      if (vflag_file == 888) _LOR_15: pow_related_errors_main();
    if (vflag_file == 35) goto _LOR_16;
    else 
      if (vflag_file == 888) _LOR_16: ptr_subtraction_main();
    if (vflag_file == 38) goto _LOR_17;
    else 
      if (vflag_file == 888) _LOR_17: return_local_main();
    if (vflag_file == 39) goto _LOR_18;
    else 
      if (vflag_file == 888) _LOR_18: sign_conv_main();
    if (vflag_file == 43) goto _LOR_19;
    else 
      if (vflag_file == 888) _LOR_19: st_underrun_main();
    if (vflag_file == 44) goto _LOR_20;
    else 
      if (vflag_file == 888) _LOR_20: underrun_st_main();
    if (vflag_file == 45) goto _LOR_21;
    else 
      if (vflag_file == 888) _LOR_21: uninit_memory_access_main();
    if (vflag_file == 46) goto _LOR_22;
    else 
      if (vflag_file == 888) _LOR_22: uninit_pointer_main();
    if (vflag_file == 47) goto _LOR_23;
    else 
      if (vflag_file == 888) _LOR_23: uninit_var_main();
    if (vflag_file == 51) goto _LOR_24;
    else 
      if (vflag_file == 888) _LOR_24: zero_division_main();
    printf("Printed from main function "); /* printf_va_2 */
  }
  else {
    printf("Enter File XXX and Function XXX \n"); /* printf_va_3 */
    printf("Example: To Execute 2nd File 3rd Function , Enter 002003 \n"); /* printf_va_4 */
    printf("Example: To Execute All Files ,Enter 888888 \n"); /* printf_va_5 */
    printf("Example: To Execute All functions in a File :Sample - To execute all functions in 3rd file,Enter 003888 \n"); /* printf_va_6 */
  }
  __retres = 0;
  return __retres;
}

void bit_shift_001(void)
{
  int ret;
  int a_0 = 1;
  ret = a_0 << 10;
  sink = ret;
  return;
}

void bit_shift_002(void)
{
  long ret;
  long a_0 = (long)1;
  ret = a_0 << 10;
  sink = (int)ret;
  return;
}

void bit_shift_003(void)
{
  unsigned int ret;
  unsigned int a_0 = (unsigned int)1;
  ret = a_0 << 10;
  sink = (int)ret;
  return;
}

void bit_shift_004(void)
{
  unsigned long ret;
  unsigned long a_0 = (unsigned long)1;
  ret = a_0 << 10;
  sink = (int)ret;
  return;
}

void bit_shift_005(void)
{
  int ret;
  int a_0 = 1;
  ret = a_0 << 10;
  sink = ret;
  return;
}

void bit_shift_006(void)
{
  int ret;
  int a_0 = 1;
  ret = a_0 >> 10;
  sink = ret;
  return;
}

void bit_shift_007(void)
{
  int ret;
  int a_0 = 1;
  ret = a_0 >> 10;
  sink = ret;
  return;
}

void bit_shift_008(void)
{
  int ret;
  int a_0 = 1;
  int shift = 10;
  ret = a_0 << shift;
  sink = ret;
  return;
}

void bit_shift_009(void)
{
  int shift;
  int ret;
  int tmp;
  int a_0 = 1;
  tmp = rand();
  shift = tmp % 31;
  ret = a_0 << shift;
  sink = ret;
  return;
}

void bit_shift_010(void)
{
  int ret;
  int a_0 = 1;
  int shift = 2;
  ret = a_0 << (5 * shift + 1);
  sink = ret;
  return;
}

void bit_shift_011(void)
{
  int ret;
  int a_0 = 1;
  int shift = 2;
  ret = a_0 << (shift * shift + 6);
  sink = ret;
  return;
}

int bit_shift_012_func_001(void)
{
  int __retres;
  __retres = 10;
  return __retres;
}

void bit_shift_012(void)
{
  int ret;
  int tmp;
  int a_0 = 1;
  tmp = bit_shift_012_func_001();
  ret = a_0 << tmp;
  sink = ret;
  return;
}

void bit_shift_013_func_001(int shift)
{
  int ret;
  int a_0 = 1;
  ret = a_0 << shift;
  sink = ret;
  return;
}

void bit_shift_013(void)
{
  bit_shift_013_func_001(10);
  return;
}

void bit_shift_014(void)
{
  int ret;
  int a_0 = 1;
  int shifts[5] = {8, 40, 32, 16, 24};
  ret = a_0 << shifts[3];
  sink = ret;
  return;
}

void bit_shift_015(void)
{
  int shift1;
  int ret;
  int a_0 = 1;
  int shift = 10;
  shift1 = shift;
  ret = a_0 << shift1;
  sink = ret;
  return;
}

void bit_shift_016(void)
{
  int shift1;
  int shift2;
  int ret;
  int a_0 = 1;
  int shift = 10;
  shift1 = shift;
  shift2 = shift1;
  ret = a_0 << shift2;
  sink = ret;
  return;
}

void bit_shift_017(void)
{
  int ret;
  ret = 1 << 10;
  sink = ret;
  return;
}

void bit_shift_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: bit_shift_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: bit_shift_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: bit_shift_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: bit_shift_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: bit_shift_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: bit_shift_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: bit_shift_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: bit_shift_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: bit_shift_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: bit_shift_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: bit_shift_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: bit_shift_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: bit_shift_013();
  if (vflag == 14) goto _LOR_12;
  else 
    if (vflag == 888) _LOR_12: bit_shift_014();
  if (vflag == 15) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: bit_shift_015();
  if (vflag == 16) goto _LOR_14;
  else 
    if (vflag == 888) _LOR_14: bit_shift_016();
  if (vflag == 17) goto _LOR_15;
  else 
    if (vflag == 888) _LOR_15: bit_shift_017();
  return;
}

void dynamic_buffer_overrun_001(void)
{
  int i;
  char *buf_0 = calloc((size_t)5,sizeof(char));
  if (buf_0 != (char *)0) {
    i = 0;
    while (i < 5) {
      *(buf_0 + i) = (char)1;
      i ++;
    }
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_002(void)
{
  short *buf_0 = calloc((size_t)5,sizeof(short));
  if (buf_0 != (short *)0) {
    *(buf_0 + 4) = (short)1;
    free((void *)buf_0);
  }
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_7(char const * restrict format, int param0);

void dynamic_buffer_overrun_003(void)
{
  int ret;
  int i;
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    i = 0;
    while (i < 5) {
      *(buf_0 + i) = 1;
      i ++;
    }
    ret = *(buf_0 + 4);
    free((void *)buf_0);
    printf("%d",ret); /* printf_va_7 */
  }
  return;
}

void dynamic_buffer_overrun_004(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    *(buf_0 + 4) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_005(void)
{
  int i;
  long *buf_0 = calloc((size_t)5,sizeof(long));
  if (buf_0 != (long *)0) {
    i = 0;
    while (i < 5) {
      *(buf_0 + i) = (long)1;
      i ++;
    }
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_006(void)
{
  int i;
  float *buf_0 = calloc((size_t)5,sizeof(float));
  if (buf_0 != (float *)0) {
    i = 0;
    while (i < 5) {
      *(buf_0 + i) = (float)1.0;
      i ++;
    }
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_007(void)
{
  int i;
  double *buf_0 = calloc((size_t)5,sizeof(double));
  if (buf_0 != (double *)0) {
    i = 0;
    while (i < 5) {
      *(buf_0 + i) = 1.0;
      i ++;
    }
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_008(void)
{
  int i;
  int j;
  int **buf_0 = calloc((size_t)5,sizeof(int *));
  i = 0;
  while (i < 5) {
    *(buf_0 + i) = (int *)calloc((size_t)5,sizeof(int));
    i ++;
  }
  i = 0;
  while (i < 5) {
    j = 0;
    while (j < 5) {
      *(*(buf_0 + i) + j) = i;
      j ++;
    }
    free((void *)*(buf_0 + i));
    i ++;
  }
  free((void *)buf_0);
  return;
}

void dynamic_buffer_overrun_009(void)
{
  int i;
  int *buf1 = calloc((size_t)5,sizeof(int));
  int *buf2 = calloc((size_t)5,sizeof(int));
  int *buf3 = calloc((size_t)5,sizeof(int));
  int *buf4 = calloc((size_t)5,sizeof(int));
  int *buf5 = calloc((size_t)5,sizeof(int));
  int **pbuf[5] = {& buf1, & buf2, & buf3, & buf4, & buf5};
  int j = 4;
  i = 0;
  while (i < 5) {
    *(*(pbuf[i]) + j) = 5;
    i ++;
  }
  free((void *)buf1);
  free((void *)buf2);
  free((void *)buf3);
  free((void *)buf4);
  free((void *)buf5);
  return;
}

void dynamic_buffer_overrun_010(void)
{
  dynamic_buffer_overrun_010_s_001 *sbuf =
    calloc((size_t)5,sizeof(dynamic_buffer_overrun_010_s_001));
  if (sbuf != (dynamic_buffer_overrun_010_s_001 *)0) {
    (sbuf + 4)->a = 1;
    free((void *)sbuf);
  }
  return;
}

void dynamic_buffer_overrun_011(void)
{
  dynamic_buffer_overrun_011_s_001 *s_0 =
    calloc((size_t)5,sizeof(dynamic_buffer_overrun_011_s_001));
  if (s_0 != (dynamic_buffer_overrun_011_s_001 *)0) {
    (s_0 + 4)->buf[4] = 1;
    free((void *)s_0);
  }
  return;
}

void dynamic_buffer_overrun_012(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  int index_0 = 4;
  if (buf_0 != (int *)0) {
    *(buf_0 + index_0) = 9;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_013(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  int index_0 = 4;
  if (buf_0 != (int *)0) {
    *(buf_0 + index_0) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_014(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  int index_0 = 1;
  if (buf_0 != (int *)0) {
    *(buf_0 + (2 * index_0 + 1)) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_015(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  int index_0 = 1;
  if (buf_0 != (int *)0) {
    *(buf_0 + (index_0 * index_0 + 1)) = 1;
    free((void *)buf_0);
  }
  return;
}

int dynamic_buffer_overrun_016_func_001(void)
{
  int __retres;
  __retres = 4;
  return __retres;
}

void dynamic_buffer_overrun_016(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    int tmp_0;
    tmp_0 = dynamic_buffer_overrun_016_func_001();
    *(buf_0 + tmp_0) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_017_func_001(int index_0)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    *(buf_0 + index_0) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_017(void)
{
  dynamic_buffer_overrun_017_func_001(4);
  return;
}

void dynamic_buffer_overrun_018(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  int indexes[4] = {3, 4, 5, 6};
  int index_0 = 1;
  if (buf_0 != (int *)0) {
    *(buf_0 + indexes[index_0]) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_019(void)
{
  int index1;
  int *buf_0 = calloc((size_t)5,sizeof(int));
  int index_0 = 4;
  index1 = index_0;
  if (buf_0 != (int *)0) {
    *(buf_0 + index1) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_020(void)
{
  int index1;
  int index2;
  int *buf_0 = calloc((size_t)5,sizeof(int));
  int index_0 = 4;
  index1 = index_0;
  index2 = index1;
  if (buf_0 != (int *)0) {
    *(buf_0 + index2) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_021(void)
{
  int *p1;
  int *p2;
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    p1 = buf_0;
    p2 = p1;
    *(p2 + 4) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_022(void)
{
  int *p;
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    p = buf_0;
    *(p + 4) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_023(void)
{
  int *p;
  int i;
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    p = buf_0;
    i = 0;
    while (i < 5) {
      *p = 1;
      p ++;
      i ++;
    }
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_024_func_001(int *buf_0)
{
  *(buf_0 + 4) = 1;
  return;
}

void dynamic_buffer_overrun_024(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  dynamic_buffer_overrun_024_func_001(buf_0);
  if (buf_0 != (int *)0) free((void *)buf_0);
  return;
}

void dynamic_buffer_overrun_025(void)
{
  int i;
  char *buf_0 = calloc((size_t)5,sizeof(char));
  if (buf_0 != (char *)0) {
    i = 0;
    while (i < 5) {
      *(buf_0 + i) = (char)'1';
      i ++;
    }
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_026(void)
{
  int *p;
  char *buf_0 = calloc((size_t)5,sizeof(char));
  p = (int *)buf_0;
  if (buf_0 != (char *)0) {
    *(p + 0) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_027(void)
{
  char *p;
  int *buf_0 = calloc((size_t)5,sizeof(int));
  p = (char *)buf_0;
  if (buf_0 != (int *)0) {
    *(p + 1) = (char)1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_overrun_028(void)
{
  int i;
  int *buf1 = calloc((size_t)5,sizeof(int));
  int *buf2 = calloc((size_t)3,sizeof(int));
  i = 0;
  while (i < 5) {
    *(buf1 + i) = i;
    i ++;
  }
  *(buf2 + *(buf1 + 2)) = 1;
  free((void *)buf1);
  free((void *)buf2);
  return;
}

void dynamic_buffer_overrun_029(void)
{
  int i = 1;
  while (i) {
    char *buf_0 = malloc(sizeof(char));
    if (buf_0 != (char *)0) {
      *(buf_0 + (i - 1)) = (char)'a';
      free((void *)buf_0);
    }
    i --;
  }
  return;
}

void dynamic_buffer_overrun_030(void)
{
  int i;
  int j;
  char **doubleptr = malloc((unsigned int)10 * sizeof(char *));
  i = 0;
  while (i < 10) {
    *(doubleptr + i) = (char *)malloc((unsigned int)10 * sizeof(char));
    i ++;
  }
  i = 0;
  while (i < 10) {
    j = 0;
    while (j < 10) {
      *(*(doubleptr + i) + j) = (char)'a';
      j ++;
    }
    free((void *)*(doubleptr + i));
    i ++;
  }
  free((void *)doubleptr);
  return;
}

void dynamic_buffer_overrun_031(void)
{
  int i;
  char a_0[12];
  char *ptr1 = calloc((size_t)12,sizeof(char));
  char *ptr2 = a_0;
  if (ptr1 != (char *)0) {
    i = 0;
    while (i < 11) {
      *(ptr1 + i) = (char)'a';
      i ++;
    }
    *(ptr1 + i) = (char)'\000';
    memcpy((void *)ptr2,(void const *)ptr1,(size_t)11);
    free((void *)ptr1);
  }
  return;
}

void dynamic_buffer_overrun_032(void)
{
  int i;
  dynamic_buffer_overrun_s_005 *ptr_s =
    malloc((unsigned int)10 * sizeof(dynamic_buffer_overrun_s_005));
  if (ptr_s != (dynamic_buffer_overrun_s_005 *)0) {
    i = 0;
    while (i < 10) {
      (ptr_s + i)->arri[i] = 'a';
      i ++;
    }
    free((void *)ptr_s);
  }
  return;
}

void dynamic_buffer_overrun_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: dynamic_buffer_overrun_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: dynamic_buffer_overrun_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: dynamic_buffer_overrun_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: dynamic_buffer_overrun_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: dynamic_buffer_overrun_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: dynamic_buffer_overrun_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: dynamic_buffer_overrun_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: dynamic_buffer_overrun_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: dynamic_buffer_overrun_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: dynamic_buffer_overrun_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: dynamic_buffer_overrun_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: dynamic_buffer_overrun_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: dynamic_buffer_overrun_013();
  if (vflag == 14) goto _LOR_12;
  else 
    if (vflag == 888) _LOR_12: dynamic_buffer_overrun_014();
  if (vflag == 15) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: dynamic_buffer_overrun_015();
  if (vflag == 16) goto _LOR_14;
  else 
    if (vflag == 888) _LOR_14: dynamic_buffer_overrun_016();
  if (vflag == 17) goto _LOR_15;
  else 
    if (vflag == 888) _LOR_15: dynamic_buffer_overrun_017();
  if (vflag == 18) goto _LOR_16;
  else 
    if (vflag == 888) _LOR_16: dynamic_buffer_overrun_018();
  if (vflag == 19) goto _LOR_17;
  else 
    if (vflag == 888) _LOR_17: dynamic_buffer_overrun_019();
  if (vflag == 20) goto _LOR_18;
  else 
    if (vflag == 888) _LOR_18: dynamic_buffer_overrun_020();
  if (vflag == 21) goto _LOR_19;
  else 
    if (vflag == 888) _LOR_19: dynamic_buffer_overrun_021();
  if (vflag == 22) goto _LOR_20;
  else 
    if (vflag == 888) _LOR_20: dynamic_buffer_overrun_022();
  if (vflag == 23) goto _LOR_21;
  else 
    if (vflag == 888) _LOR_21: dynamic_buffer_overrun_023();
  if (vflag == 24) goto _LOR_22;
  else 
    if (vflag == 888) _LOR_22: dynamic_buffer_overrun_024();
  if (vflag == 25) goto _LOR_23;
  else 
    if (vflag == 888) _LOR_23: dynamic_buffer_overrun_025();
  if (vflag == 26) goto _LOR_24;
  else 
    if (vflag == 888) _LOR_24: dynamic_buffer_overrun_026();
  if (vflag == 27) goto _LOR_25;
  else 
    if (vflag == 888) _LOR_25: dynamic_buffer_overrun_027();
  if (vflag == 28) goto _LOR_26;
  else 
    if (vflag == 888) _LOR_26: dynamic_buffer_overrun_028();
  if (vflag == 29) goto _LOR_27;
  else 
    if (vflag == 888) _LOR_27: dynamic_buffer_overrun_029();
  if (vflag == 30) goto _LOR_28;
  else 
    if (vflag == 888) _LOR_28: dynamic_buffer_overrun_030();
  if (vflag == 31) goto _LOR_29;
  else 
    if (vflag == 888) _LOR_29: dynamic_buffer_overrun_031();
  if (vflag == 32) goto _LOR_30;
  else 
    if (vflag == 888) _LOR_30: dynamic_buffer_overrun_032();
  return;
}

void dynamic_buffer_underrun_001(void)
{
  int i;
  char *buf_0 = calloc((size_t)5,sizeof(char));
  if (buf_0 != (char *)0) {
    i = 4;
    while (i >= 0) {
      *(buf_0 + i) = (char)1;
      i --;
    }
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_002(void)
{
  short *buf_0 = calloc((size_t)5,sizeof(short));
  if (buf_0 != (short *)0) {
    *(buf_0 - 0) = (short)1;
    free((void *)buf_0);
  }
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_8(char const * restrict format, int param0);

void dynamic_buffer_underrun_003(void)
{
  int ret;
  int i;
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    i = 0;
    while (i < 5) {
      *(buf_0 + i) = 1;
      i ++;
    }
    ret = *(buf_0 + 0);
    free((void *)buf_0);
    printf("%d",ret); /* printf_va_8 */
  }
  return;
}

void dynamic_buffer_underrun_004(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    *(buf_0 - 0) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_005(void)
{
  int i;
  long *buf_0 = calloc((size_t)5,sizeof(long));
  if (buf_0 != (long *)0) {
    i = 0;
    while (i < 5) {
      *(buf_0 + i) = (long)1;
      i ++;
    }
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_006(void)
{
  int i;
  float *buf_0 = calloc((size_t)5,sizeof(float));
  if (buf_0 != (float *)0) {
    i = 0;
    while (i < 5) {
      *(buf_0 + i) = (float)1.0;
      i ++;
    }
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_007(void)
{
  int i;
  double *buf_0 = calloc((size_t)5,sizeof(double));
  if (buf_0 != (double *)0) {
    i = 0;
    while (i < 5) {
      *(buf_0 + i) = 1.0;
      i ++;
    }
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_008(void)
{
  int i;
  int j;
  int **buf_0 = calloc((size_t)5,sizeof(int *));
  i = 0;
  while (i < 5) {
    *(buf_0 + i) = (int *)calloc((size_t)5,sizeof(int));
    i ++;
  }
  i = 0;
  while (i < 5) {
    j = 0;
    while (j < 5) {
      *(*(buf_0 + i) + j) = i;
      j ++;
    }
    free((void *)*(buf_0 + i));
    i ++;
  }
  free((void *)buf_0);
  return;
}

void dynamic_buffer_underrun_009(void)
{
  int i;
  int *buf1 = calloc((size_t)5,sizeof(int));
  int *buf2 = calloc((size_t)5,sizeof(int));
  int *buf3 = calloc((size_t)5,sizeof(int));
  int *buf4 = calloc((size_t)5,sizeof(int));
  int *buf5 = calloc((size_t)5,sizeof(int));
  int **pbuf[5] = {& buf1, & buf2, & buf3, & buf4, & buf5};
  int j = 4;
  i = 0;
  while (i < 5) {
    *(*(pbuf[i]) + j) = 5;
    i ++;
  }
  free((void *)buf1);
  free((void *)buf2);
  free((void *)buf3);
  free((void *)buf4);
  free((void *)buf5);
  return;
}

void dynamic_buffer_underrun_010(void)
{
  dynamic_buffer_underrun_010_s_001 *sbuf =
    calloc((size_t)5,sizeof(dynamic_buffer_underrun_010_s_001));
  if (sbuf != (dynamic_buffer_underrun_010_s_001 *)0) {
    (sbuf + 0)->a = 1;
    free((void *)sbuf);
  }
  return;
}

void dynamic_buffer_underrun_011(void)
{
  dynamic_buffer_underrun_011_s_001 *s_0 =
    calloc((size_t)5,sizeof(dynamic_buffer_underrun_011_s_001));
  if (s_0 != (dynamic_buffer_underrun_011_s_001 *)0) {
    (s_0 + 0)->buf[4] = 1;
    free((void *)s_0);
  }
  return;
}

void dynamic_buffer_underrun_012(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  int index_0 = 0;
  if (buf_0 != (int *)0) {
    *(buf_0 - index_0) = 9;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_013(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  int index_0 = 3;
  if (buf_0 != (int *)0) {
    *(buf_0 + (-2 * index_0 + 6)) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_014(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  int index_0 = 2;
  if (buf_0 != (int *)0) {
    *(buf_0 + (index_0 * index_0 - 4)) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_015(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  int index_0 = 2;
  if (buf_0 != (int *)0) {
    *(buf_0 + (index_0 * index_0 - 4)) = 1;
    free((void *)buf_0);
  }
  return;
}

int dynamic_buffer_underrun_016_func_001(void)
{
  int __retres;
  __retres = 0;
  return __retres;
}

void dynamic_buffer_underrun_016(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    int tmp_0;
    tmp_0 = dynamic_buffer_underrun_016_func_001();
    *(buf_0 + tmp_0) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_017_func_001(int index_0)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    *(buf_0 - index_0) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_017(void)
{
  dynamic_buffer_underrun_017_func_001(0);
  return;
}

void dynamic_buffer_underrun_018(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  int indexes[5] = {3, 4, 0, 5, 6};
  int index_0 = 2;
  if (buf_0 != (int *)0) {
    *(buf_0 - indexes[index_0]) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_019(void)
{
  int index1;
  int *buf_0 = calloc((size_t)5,sizeof(int));
  int index_0 = 0;
  index1 = index_0;
  if (buf_0 != (int *)0) {
    *(buf_0 + index1) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_020(void)
{
  int index1;
  int index2;
  int *buf_0 = calloc((size_t)5,sizeof(int));
  int index_0 = 0;
  index1 = index_0;
  index2 = index1;
  if (buf_0 != (int *)0) {
    *(buf_0 + index2) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_021(void)
{
  int *p1;
  int *p2;
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    p1 = buf_0;
    p2 = p1;
    *(p2 - 0) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_022(void)
{
  int *p;
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    p = buf_0;
    *(p - 0) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_023(void)
{
  int *p;
  int i;
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    p = buf_0;
    i = 4;
    while (i > 0) {
      *(p + i) = '1';
      i --;
    }
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_024_func_001(int *buf_0)
{
  *(buf_0 - 0) = 1;
  return;
}

void dynamic_buffer_underrun_024(void)
{
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    dynamic_buffer_underrun_024_func_001(buf_0);
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_025(void)
{
  int i;
  char *buf_0 = calloc((size_t)5,sizeof(char));
  if (buf_0 != (char *)0) {
    i = 4;
    while (i > 0) {
      *(buf_0 + i) = (char)'1';
      i --;
    }
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_026(void)
{
  int *p;
  char *buf_0 = calloc((size_t)5,sizeof(char));
  if (buf_0 != (char *)0) {
    p = (int *)buf_0;
    *(p - 0) = 1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_027(void)
{
  char *p;
  int *buf_0 = calloc((size_t)5,sizeof(int));
  if (buf_0 != (int *)0) {
    p = (char *)buf_0;
    *(p - 0) = (char)1;
    free((void *)buf_0);
  }
  return;
}

void dynamic_buffer_underrun_028(void)
{
  int i;
  int *buf1 = calloc((size_t)5,sizeof(int));
  int *buf2 = calloc((size_t)3,sizeof(int));
  i = 0;
  while (i < 5) {
    *(buf1 + i) = i;
    i ++;
  }
  *(buf2 - *(buf1 + 0)) = 1;
  free((void *)buf1);
  free((void *)buf2);
  return;
}

void dynamic_buffer_underrun_029(void)
{
  while (1) {
    {
      char *buf_0 = malloc(sizeof(char));
      if (buf_0 != (char *)0) {
        *(buf_0 + 0) = (char)'a';
        free((void *)buf_0);
      }
      break;
    }
  }
  return;
}

void dynamic_buffer_underrun_030(void)
{
  int i;
  int j;
  char **doubleptr = malloc((unsigned int)10 * sizeof(char *));
  i = 0;
  while (i < 10) {
    *(doubleptr + i) = (char *)calloc((size_t)10,sizeof(char));
    i ++;
  }
  i = 0;
  while (i < 10) {
    j = 9;
    while (j > -1) {
      *(*(doubleptr + i) + j) = (char)'a';
      j --;
    }
    free((void *)*(doubleptr + i));
    i ++;
  }
  free((void *)doubleptr);
  return;
}

void dynamic_buffer_underrun_031(void)
{
  int i;
  char a_0[12];
  char *ptr1 = calloc((size_t)12,sizeof(char));
  char *ptr2 = a_0;
  if (ptr1 != (char *)0) {
    *(ptr1 + 11) = (char)'\000';
    i = 10;
    while (i > -1) {
      *(ptr1 + i) = (char)'a';
      i --;
    }
    memcpy((void *)ptr2,(void const *)ptr1,(size_t)12);
    free((void *)ptr1);
  }
  return;
}

void dynamic_buffer_underrun_032(void)
{
  int i;
  dynamic_buffer_underrun_s_032 *ptr_s =
    calloc((size_t)10,sizeof(dynamic_buffer_underrun_s_032));
  if (ptr_s != (dynamic_buffer_underrun_s_032 *)0) {
    i = 0;
    while (i < 10) {
      (ptr_s + i)->arr[i] = (char)'a';
      i ++;
    }
    free((void *)ptr_s);
  }
  return;
}

void dynamic_buffer_underrun_033(void)
{
  int c;
  char *message = calloc((size_t)12,sizeof(char));
  int index_0 = 12;
  int len = index_0 - 1;
  if (message != (char *)0) {
    while (len > 0) {
      int tmp_0;
      c = (int)*(message + len);
      tmp_0 = isspace(c);
      if (tmp_0) *(message + len) = (char)'\n';
      len --;
    }
    free((void *)message);
  }
  return;
}

void dynamic_buffer_underrun_034(void)
{
  int i;
  char *srcbuf = (char *)"Test Code";
  int loc = 1;
  char *destbuf = malloc((unsigned int)10 * sizeof(char));
  char ch = (char)'o';
  if (destbuf != (char *)0) {
    i = 0;
    while (1) {
      size_t tmp_0;
      tmp_0 = strlen((char const *)srcbuf);
      ;
      if (! ((size_t)i < tmp_0)) break;
      if ((int)*(srcbuf + i) == (int)ch) loc = i;
      i ++;
    }
    strncpy(destbuf + loc,(char const *)(srcbuf + loc),(size_t)1);
    free((void *)destbuf);
  }
  return;
}

void dynamic_buffer_underrun_035(void)
{
  int i;
  int loc1 = 0;
  int loc2 = 0;
  char **doubleptr = malloc((unsigned int)10 * sizeof(char *));
  i = 0;
  while (i < 10) {
    *(doubleptr + i) = (char *)malloc((unsigned int)10 * sizeof(char));
    i ++;
  }
  if (loc1 == 0) loc1 ++;
  *(*(doubleptr + loc1) + loc2) = (char)'T';
  if (loc2 == 0) loc2 ++;
  *(*(doubleptr + 0) + loc2) = (char)'T';
  i = 0;
  while (i < 10) {
    free((void *)*(doubleptr + i));
    i ++;
  }
  free((void *)doubleptr);
  return;
}

void dynamic_buffer_underrun_036(void)
{
  char test[15] =
    {(char)'T',
     (char)'h',
     (char)'i',
     (char)'s',
     (char)' ',
     (char)'i',
     (char)'s',
     (char)' ',
     (char)'S',
     (char)'T',
     (char)'R',
     (char)'I',
     (char)'N',
     (char)'G',
     (char)'\000'};
  char *newTest = malloc((unsigned int)15 * sizeof(char));
  if (newTest != (char *)0) {
    memcpy((void *)newTest,(void const *)(test),(size_t)15);
    free((void *)newTest);
  }
  return;
}

void dynamic_buffer_underrun_037(void)
{
  int i;
  char **doubleptr = malloc((unsigned int)10 * sizeof(char *));
  if (doubleptr != (char **)0) {
    i = 0;
    while (i < 10) {
      *(doubleptr + i) = (char *)malloc((unsigned int)10 * sizeof(char));
      if (*(doubleptr + i) != (char *)0) {
        *(*(doubleptr + i) + 0) = (char)'T';
        free((void *)*(doubleptr + i));
      }
      i ++;
    }
    free((void *)doubleptr);
  }
  return;
}

void dynamic_buffer_underrun_038(void)
{
  dynamic_buffer_underrun_s_038 *new_s =
    malloc((unsigned int)10 * sizeof(dynamic_buffer_underrun_s_038));
  int loc = 0;
  int i = 0;
  if (new_s != (dynamic_buffer_underrun_s_038 *)0) {
    (new_s + loc)->arr[i] = (char)'a';
    (new_s + 0)->arri[i] = 2;
    free((void *)new_s);
  }
  return;
}

void dynamic_buffer_underrun_039(void)
{
  dynamic_buffer_underrun_s_008 ptr_s2[15];
  int i;
  dynamic_buffer_underrun_s_008 *ptr_s1 =
    malloc((unsigned int)15 * sizeof(dynamic_buffer_underrun_s_008));
  if (ptr_s1 != (dynamic_buffer_underrun_s_008 *)0) {
    i = 0;
    while (i < 15) {
      memset((void *)ptr_s1,1,
             (unsigned int)15 * sizeof(dynamic_buffer_underrun_s_008));
      i ++;
    }
    memcpy((void *)(ptr_s2),(void const *)ptr_s1,
           (unsigned int)15 * sizeof(dynamic_buffer_underrun_s_008));
    free((void *)ptr_s1);
  }
  return;
}

void dynamic_buffer_underrun_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: dynamic_buffer_underrun_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: dynamic_buffer_underrun_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: dynamic_buffer_underrun_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: dynamic_buffer_underrun_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: dynamic_buffer_underrun_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: dynamic_buffer_underrun_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: dynamic_buffer_underrun_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: dynamic_buffer_underrun_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: dynamic_buffer_underrun_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: dynamic_buffer_underrun_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: dynamic_buffer_underrun_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: dynamic_buffer_underrun_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: dynamic_buffer_underrun_013();
  if (vflag == 14) goto _LOR_12;
  else 
    if (vflag == 888) _LOR_12: dynamic_buffer_underrun_014();
  if (vflag == 15) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: dynamic_buffer_underrun_015();
  if (vflag == 16) goto _LOR_14;
  else 
    if (vflag == 888) _LOR_14: dynamic_buffer_underrun_016();
  if (vflag == 17) goto _LOR_15;
  else 
    if (vflag == 888) _LOR_15: dynamic_buffer_underrun_017();
  if (vflag == 18) goto _LOR_16;
  else 
    if (vflag == 888) _LOR_16: dynamic_buffer_underrun_018();
  if (vflag == 19) goto _LOR_17;
  else 
    if (vflag == 888) _LOR_17: dynamic_buffer_underrun_019();
  if (vflag == 20) goto _LOR_18;
  else 
    if (vflag == 888) _LOR_18: dynamic_buffer_underrun_020();
  if (vflag == 21) goto _LOR_19;
  else 
    if (vflag == 888) _LOR_19: dynamic_buffer_underrun_021();
  if (vflag == 22) goto _LOR_20;
  else 
    if (vflag == 888) _LOR_20: dynamic_buffer_underrun_022();
  if (vflag == 23) goto _LOR_21;
  else 
    if (vflag == 888) _LOR_21: dynamic_buffer_underrun_023();
  if (vflag == 24) goto _LOR_22;
  else 
    if (vflag == 888) _LOR_22: dynamic_buffer_underrun_024();
  if (vflag == 25) goto _LOR_23;
  else 
    if (vflag == 888) _LOR_23: dynamic_buffer_underrun_025();
  if (vflag == 26) goto _LOR_24;
  else 
    if (vflag == 888) _LOR_24: dynamic_buffer_underrun_026();
  if (vflag == 27) goto _LOR_25;
  else 
    if (vflag == 888) _LOR_25: dynamic_buffer_underrun_027();
  if (vflag == 28) goto _LOR_26;
  else 
    if (vflag == 888) _LOR_26: dynamic_buffer_underrun_028();
  if (vflag == 29) goto _LOR_27;
  else 
    if (vflag == 888) _LOR_27: dynamic_buffer_underrun_029();
  if (vflag == 30) goto _LOR_28;
  else 
    if (vflag == 888) _LOR_28: dynamic_buffer_underrun_030();
  if (vflag == 31) goto _LOR_29;
  else 
    if (vflag == 888) _LOR_29: dynamic_buffer_underrun_031();
  if (vflag == 32) goto _LOR_30;
  else 
    if (vflag == 888) _LOR_30: dynamic_buffer_underrun_032();
  if (vflag == 33) goto _LOR_31;
  else 
    if (vflag == 888) _LOR_31: dynamic_buffer_underrun_033();
  if (vflag == 34) goto _LOR_32;
  else 
    if (vflag == 888) _LOR_32: dynamic_buffer_underrun_034();
  if (vflag == 35) goto _LOR_33;
  else 
    if (vflag == 888) _LOR_33: dynamic_buffer_underrun_035();
  if (vflag == 36) goto _LOR_34;
  else 
    if (vflag == 888) _LOR_34: dynamic_buffer_underrun_036();
  if (vflag == 37) goto _LOR_35;
  else 
    if (vflag == 888) _LOR_35: dynamic_buffer_underrun_037();
  if (vflag == 38) goto _LOR_36;
  else 
    if (vflag == 888) _LOR_36: dynamic_buffer_underrun_038();
  if (vflag == 39) goto _LOR_37;
  else 
    if (vflag == 888) _LOR_37: dynamic_buffer_underrun_039();
  return;
}

static int sink_0;
void data_lost_001(void)
{
  char ret;
  short a_0 = (short)0x7f;
  ret = (char)a_0;
  sink_0 = (int)ret;
  return;
}

void data_lost_002(void)
{
  short ret;
  int a_0 = 0x7fff;
  ret = (short)a_0;
  sink_0 = (int)ret;
  return;
}

void data_lost_003(void)
{
  short ret;
  long a_0 = (long)0x7fff;
  ret = (short)a_0;
  sink_0 = (int)ret;
  return;
}

void data_lost_004(void)
{
  int ret;
  float a_0 = 2.14748352e+09F;
  ret = (int)a_0;
  sink_0 = ret;
  return;
}

void data_lost_005(void)
{
  long ret;
  float a_0 = 2.14748352e+09F;
  ret = (long)a_0;
  sink_0 = (int)ret;
  return;
}

void data_lost_006(void)
{
  float ret;
  double a_0 = 3.4028232635611926e+38;
  ret = (float)a_0;
  return;
}

void data_lost_007(void)
{
  unsigned char ret;
  unsigned short a_0 = (unsigned short)0xff;
  ret = (unsigned char)a_0;
  sink_0 = (int)ret;
  return;
}

void data_lost_008(void)
{
  unsigned short ret;
  unsigned int a_0 = (unsigned int)0xffff;
  ret = (unsigned short)a_0;
  sink_0 = (int)ret;
  return;
}

void data_lost_009(void)
{
  unsigned short ret;
  unsigned long a_0 = (unsigned long)0xffff;
  ret = (unsigned short)a_0;
  sink_0 = (int)ret;
  return;
}

void data_lost_010(void)
{
  data_lost_010_s_001 s_0;
  s_0.a = (int)0x0f;
  s_0.ret = (int)s_0.a;
  return;
}

void data_lost_011(void)
{
  short ret;
  ret = (short)0x7fff;
  sink_0 = (int)ret;
  return;
}

void data_lost_012(void)
{
  short ret;
  int a_0;
  int tmp;
  tmp = rand();
  a_0 = tmp % 0x8000;
  ret = (short)a_0;
  sink_0 = (int)ret;
  return;
}

void data_lost_013(void)
{
  short ret;
  int a_0 = 129;
  ret = (short)(254 * a_0 + 1);
  sink_0 = (int)ret;
  return;
}

void data_lost_014(void)
{
  short ret;
  int a_0 = 181;
  ret = (short)(a_0 * a_0 + 6);
  sink_0 = (int)ret;
  return;
}

int data_lost_015_func_001(void)
{
  int __retres;
  __retres = 0x7fff;
  return __retres;
}

void data_lost_015(void)
{
  short ret;
  int tmp;
  tmp = data_lost_015_func_001();
  ret = (short)tmp;
  sink_0 = (int)ret;
  return;
}

void data_lost_016_func_001(int a_0)
{
  short ret;
  ret = (short)a_0;
  sink_0 = (int)ret;
  return;
}

void data_lost_016(void)
{
  data_lost_016_func_001(0x7fff);
  return;
}

void data_lost_017(void)
{
  short ret;
  int buf_0[5] = {0x8111, 0x8001, 0x8011, 0x7fff, 0x8111};
  ret = (short)buf_0[3];
  sink_0 = (int)ret;
  return;
}

void data_lost_018(void)
{
  short ret;
  int a1;
  int a_0 = 0x7fff;
  a1 = a_0;
  ret = (short)a1;
  sink_0 = (int)ret;
  return;
}

void data_lost_019(void)
{
  short ret;
  int a1;
  int a2;
  int a_0 = 0x7fff;
  a1 = a_0;
  a2 = a1;
  ret = (short)a2;
  sink_0 = (int)ret;
  return;
}

void data_lost_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: data_lost_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: data_lost_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: data_lost_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: data_lost_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: data_lost_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: data_lost_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: data_lost_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: data_lost_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: data_lost_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: data_lost_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: data_lost_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: data_lost_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: data_lost_013();
  if (vflag == 14) goto _LOR_12;
  else 
    if (vflag == 888) _LOR_12: data_lost_014();
  if (vflag == 15) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: data_lost_015();
  if (vflag == 16) goto _LOR_14;
  else 
    if (vflag == 888) _LOR_14: data_lost_016();
  if (vflag == 17) goto _LOR_15;
  else 
    if (vflag == 888) _LOR_15: data_lost_017();
  if (vflag == 18) goto _LOR_16;
  else 
    if (vflag == 888) _LOR_16: data_lost_018();
  if (vflag == 19) goto _LOR_17;
  else 
    if (vflag == 888) _LOR_17: data_lost_019();
  return;
}

static int sink_1;
void data_overflow_001(void)
{
  char ret;
  char max = (char)0x70;
  ret = (char)((int)max + 2);
  sink_1 = (int)ret;
  return;
}

void data_overflow_002(void)
{
  short ret;
  short max = (short)0x7ff0;
  ret = (short)((int)max + 2);
  sink_1 = (int)ret;
  return;
}

void data_overflow_003(void)
{
  int ret;
  int max = 0x7ffffffe;
  ret = max + 1;
  sink_1 = ret;
  return;
}

void data_overflow_004(void)
{
  long ret;
  long max = (long)0x7ffffffe;
  ret = max + (long)1;
  sink_1 = (int)ret;
  return;
}

void data_overflow_005(void)
{
  unsigned char ret;
  unsigned char max = (unsigned char)0xfe;
  ret = (unsigned char)((int)max + 1);
  sink_1 = (int)ret;
  return;
}

void data_overflow_006(void)
{
  unsigned short ret;
  unsigned short max = (unsigned short)0xfffe;
  ret = (unsigned short)((int)max + 1);
  sink_1 = (int)ret;
  return;
}

void data_overflow_007(void)
{
  unsigned int ret;
  unsigned int max = 0xfffffffe;
  ret = max + (unsigned int)1;
  return;
}

void data_overflow_008(void)
{
  unsigned long ret;
  unsigned long max = (unsigned long)0xfffffffe;
  ret = max + (unsigned long)1;
  return;
}

void data_overflow_009(void)
{
  data_overflow_009_s_001 s_0;
  s_0.max = (int)0x0e;
  s_0.ret = (int)((int)s_0.max + 1);
  return;
}

void data_overflow_010(void)
{
  data_overflow_010_s_001 s_0;
  s_0.max = (unsigned int)0x1e;
  s_0.ret = (unsigned int)((int)s_0.max + 1);
  return;
}

void data_overflow_011(void)
{
  int ret;
  int max = 0x7ffffffe;
  max ++;
  ret = max;
  sink_1 = ret;
  return;
}

void data_overflow_012(void)
{
  int ret;
  int max = 0x7fffff7f;
  ret = max + 128;
  sink_1 = ret;
  return;
}

void data_overflow_013(void)
{
  int ret;
  int max = 0x3fffffff;
  ret = max * 2;
  sink_1 = ret;
  return;
}

void data_overflow_014(void)
{
  int ret;
  int max = 0x7ffffffe;
  int d = 1;
  ret = max + d;
  sink_1 = ret;
  return;
}

void data_overflow_015(void)
{
  int d;
  int ret;
  int tmp;
  int max = 0x7ffffffe;
  tmp = rand();
  d = tmp % 2;
  ret = max + d;
  sink_1 = ret;
  return;
}

void data_overflow_016(void)
{
  int ret;
  int max = 429496729;
  ret = 5 * max + 2;
  sink_1 = ret;
  return;
}

void data_overflow_017(void)
{
  int ret;
  int max = 46340;
  ret = max * max + 88047;
  sink_1 = ret;
  return;
}

int data_overflow_018_func_001(void)
{
  int __retres;
  __retres = 1;
  return __retres;
}

void data_overflow_018(void)
{
  int ret;
  int tmp;
  int max = 0x7ffffffe;
  tmp = data_overflow_018_func_001();
  ret = max + tmp;
  sink_1 = ret;
  return;
}

void data_overflow_019_func_001(int d)
{
  int ret;
  int max = 0x7ffffffe;
  ret = max + d;
  sink_1 = ret;
  return;
}

void data_overflow_019(void)
{
  data_overflow_019_func_001(1);
  return;
}

void data_overflow_020(void)
{
  int ret;
  int max = 0x7ffffffe;
  int dlist[4] = {4, 1, 3, 2};
  ret = max + dlist[1];
  sink_1 = ret;
  return;
}

void data_overflow_021(void)
{
  int d1;
  int ret;
  int max = 0x7ffffffe;
  int d = 1;
  d1 = d;
  ret = max + d1;
  sink_1 = ret;
  return;
}

void data_overflow_022(void)
{
  int d1;
  int d2;
  int ret;
  int max = 0x7ffffffe;
  int d = 1;
  d1 = d;
  d2 = d1;
  ret = max + d2;
  sink_1 = ret;
  return;
}

void data_overflow_023(void)
{
  int ret;
  ret = 0x7ffffffe + 1;
  sink_1 = ret;
  return;
}

void data_overflow_024(void)
{
  float ret;
  float max = 2.1e+9F;
  ret = max + 4.14e+7F;
  sink_1 = (int)ret;
  return;
}

void data_overflow_025(void)
{
  double ret;
  double max = 2.1e+9;
  ret = max + 4.14e+7;
  sink_1 = (int)ret;
  return;
}

void data_overflow_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: data_overflow_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: data_overflow_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: data_overflow_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: data_overflow_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: data_overflow_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: data_overflow_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: data_overflow_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: data_overflow_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: data_overflow_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: data_overflow_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: data_overflow_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: data_overflow_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: data_overflow_013();
  if (vflag == 14) goto _LOR_12;
  else 
    if (vflag == 888) _LOR_12: data_overflow_014();
  if (vflag == 15) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: data_overflow_015();
  if (vflag == 16) goto _LOR_14;
  else 
    if (vflag == 888) _LOR_14: data_overflow_016();
  if (vflag == 17) goto _LOR_15;
  else 
    if (vflag == 888) _LOR_15: data_overflow_017();
  if (vflag == 18) goto _LOR_16;
  else 
    if (vflag == 888) _LOR_16: data_overflow_018();
  if (vflag == 19) goto _LOR_17;
  else 
    if (vflag == 888) _LOR_17: data_overflow_019();
  if (vflag == 20) goto _LOR_18;
  else 
    if (vflag == 888) _LOR_18: data_overflow_020();
  if (vflag == 21) goto _LOR_19;
  else 
    if (vflag == 888) _LOR_19: data_overflow_021();
  if (vflag == 22) goto _LOR_20;
  else 
    if (vflag == 888) _LOR_20: data_overflow_022();
  if (vflag == 23) goto _LOR_21;
  else 
    if (vflag == 888) _LOR_21: data_overflow_023();
  if (vflag == 24) goto _LOR_22;
  else 
    if (vflag == 888) _LOR_22: data_overflow_024();
  if (vflag == 25) goto _LOR_23;
  else 
    if (vflag == 888) _LOR_23: data_overflow_025();
  return;
}

void data_underflow_001(void)
{
  int ret;
  int min = -2147483646;
  ret = min - 2;
  sink = ret;
  return;
}

void data_underflow_002(void)
{
  unsigned int ret;
  unsigned int min = (unsigned int)1;
  ret = min - (unsigned int)1;
  sink = (int)ret;
  return;
}

void data_underflow_003(void)
{
  int ret;
  int min = -2147483646;
  min --;
  min --;
  ret = min;
  sink = ret;
  return;
}

void data_underflow_004(void)
{
  int ret;
  int min = -2147483520;
  ret = min - 128;
  sink = ret;
  return;
}

void data_underflow_005(void)
{
  int ret;
  int min = -1073741824;
  ret = min * 2;
  sink = ret;
  return;
}

void data_underflow_006(void)
{
  int ret;
  ret = -2147483646 - 2;
  sink = ret;
  return;
}

void data_underflow_007(void)
{
  float ret;
  float min = 2.80259693e-45F;
  ret = min / 2.0F;
  sink = (int)ret;
  return;
}

void data_underflow_008(void)
{
  double ret;
  double min = 9.8813129168249309e-324;
  ret = min / 2.0;
  sink = (int)ret;
  return;
}

void data_underflow_009(void)
{
  char ret;
  char min = (char)(-126);
  ret = (char)((int)min - 2);
  sink = (int)ret;
  return;
}

int data_underflow_010_func_001(void)
{
  int __retres;
  __retres = 2;
  return __retres;
}

void data_underflow_010(void)
{
  int ret;
  int tmp;
  int min = -2147483646;
  tmp = data_underflow_010_func_001();
  ret = min - tmp;
  sink = ret;
  return;
}

void data_underflow_011_func_001(int d)
{
  int ret;
  int min = -2147483646;
  ret = min - d;
  sink = ret;
  return;
}

void data_underflow_011(void)
{
  data_underflow_011_func_001(2);
  return;
}

void data_underflow_012(void)
{
  int ret;
  int min = -2147483646;
  int dlist[4] = {0, 1, -2, -1};
  ret = min - dlist[2];
  sink = ret;
  return;
}

void data_underflow_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: data_underflow_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: data_underflow_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: data_underflow_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: data_underflow_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: data_underflow_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: data_underflow_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: data_underflow_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: data_underflow_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: data_underflow_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: data_underflow_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: data_underflow_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: data_underflow_012();
  return;
}

void double_free_001(void)
{
  char *ptr = malloc(sizeof(char));
  free((void *)ptr);
  return;
}

void double_free_002(void)
{
  int i;
  char *ptr = malloc((unsigned int)10 * sizeof(char));
  i = 0;
  while (i < 10) {
    *(ptr + i) = (char)'a';
    if (i == 10) free((void *)ptr);
    i ++;
  }
  free((void *)ptr);
  return;
}

void double_free_003(void)
{
  int i;
  char *ptr = malloc((unsigned int)10 * sizeof(char));
  i = 0;
  while (i < 10) {
    *(ptr + i) = (char)'a';
    i ++;
  }
  free((void *)ptr);
  return;
}

void double_free_004(void)
{
  int i;
  char *ptr = malloc((unsigned int)10 * sizeof(char));
  i = 0;
  while (i < 10) {
    *(ptr + i) = (char)'a';
    i ++;
  }
  free((void *)ptr);
  return;
}

void double_free_005(void)
{
  char *ptr = malloc(sizeof(char));
  if (ptr) free((void *)ptr);
  return;
}

void double_free_006(void)
{
  char *ptr = malloc(sizeof(char));
  free((void *)ptr);
  return;
}

void double_free_007(void)
{
  char *ptr = malloc(sizeof(char));
  int flag = 0;
  if (flag < 0) free((void *)ptr);
  free((void *)ptr);
  return;
}

char *double_free_function_008_gbl_ptr;
void double_free_function_008(void)
{
  free((void *)double_free_function_008_gbl_ptr);
  return;
}

void double_free_008(void)
{
  double_free_function_008_gbl_ptr = (char *)malloc(sizeof(char));
  double_free_function_008();
  return;
}

void double_free_009(void)
{
  char *ptr = malloc(sizeof(char));
  int flag = 0;
  while (flag == 1) {
    free((void *)ptr);
    flag ++;
  }
  free((void *)ptr);
  return;
}

void double_free_010(void)
{
  char *ptr = malloc(sizeof(char));
  int flag = 1;
  while (flag) {
    free((void *)ptr);
    flag --;
  }
  return;
}

void double_free_011(void)
{
  char *ptr = malloc(sizeof(char));
  int flag = 1;
  int a_0 = 0;
  int b = 1;
  while (a_0 < b) {
    if (flag == 1) free((void *)ptr);
    a_0 ++;
  }
  return;
}

void double_free_012(void)
{
  char *ptr = malloc(sizeof(char));
  int a_0 = 0;
  a_0 = 0;
  while (a_0 < 1) {
    free((void *)ptr);
    a_0 ++;
  }
  return;
}

void double_free_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: double_free_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: double_free_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: double_free_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: double_free_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: double_free_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: double_free_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: double_free_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: double_free_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: double_free_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: double_free_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: double_free_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: double_free_012();
  return;
}

void endless_loop_001(void)
{
  int ret;
  int i;
  int a_0 = 0;
  i = 0;
  while (1) {
    a_0 ++;
    if (i > 5) break;
    i ++;
  }
  ret = a_0;
  sink = ret;
  return;
}

void endless_loop_002(void)
{
  int ret;
  int i;
  int a_0 = 0;
  i = 0;
  while (i < 10) {
    a_0 ++;
    i ++;
  }
  ret = a_0;
  sink = ret;
  return;
}

void endless_loop_003(void)
{
  int ret;
  int a_0 = 0;
  while (1) {
    a_0 ++;
    if (a_0 > 5) break;
  }
  ret = a_0;
  sink = ret;
  return;
}

void endless_loop_004(void)
{
  int ret;
  int a_0 = 0;
  int flag = 1;
  while (flag) {
    a_0 ++;
    if (a_0 > 5) break;
  }
  ret = a_0;
  sink = ret;
  return;
}

int endless_loop_005_func_001(void)
{
  int __retres;
  __retres = 1;
  return __retres;
}

void endless_loop_005(void)
{
  int ret;
  int a_0 = 0;
  while (1) {
    int tmp;
    tmp = endless_loop_005_func_001();
    if (! tmp) break;
    a_0 ++;
    if (a_0 > 5) break;
  }
  ret = a_0;
  sink = ret;
  return;
}

void endless_loop_006_func_001(int flag)
{
  int ret;
  int a_0 = 0;
  while (flag) {
    a_0 ++;
    if (a_0 > 5) break;
  }
  ret = a_0;
  sink = ret;
  return;
}

void endless_loop_006(void)
{
  endless_loop_006_func_001(1);
  return;
}

void endless_loop_007(void)
{
  int ret;
  int a_0 = 0;
  int flag = 1;
  while (flag > 0) {
    a_0 ++;
    if (a_0 > 5) break;
  }
  ret = a_0;
  sink = ret;
  return;
}

void endless_loop_008(void)
{
  int ret;
  int a_0 = 0;
  int flag = 0;
  while (flag == 0) {
    a_0 ++;
    if (a_0 > 5) break;
  }
  ret = a_0;
  sink = ret;
  return;
}

void endless_loop_009(void)
{
  int ret;
  int a_0 = 0;
  while (1) {
    a_0 ++;
    if (a_0 > 5) break;
  }
  ret = a_0;
  sink = ret;
  return;
}

void endless_loop_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: endless_loop_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: endless_loop_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: endless_loop_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: endless_loop_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: endless_loop_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: endless_loop_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: endless_loop_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: endless_loop_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: endless_loop_009();
  return;
}

void free_nondynamic_allocated_memory_001(void)
{
  char *ptr = (char *)"a";
  return;
}

void free_nondynamic_allocated_memory_002(void)
{
  char *ptr = (char *)"a";
  int flag = 1;
  if (flag > 1) free((void *)ptr);
  return;
}

char *free_nondynamic_allocated_memory_003_gbl_ptr;
void free_nondynamic_allocated_memory_003(void)
{
  free_nondynamic_allocated_memory_003_gbl_ptr = (char *)malloc(sizeof(char));
  free((void *)free_nondynamic_allocated_memory_003_gbl_ptr);
  return;
}

void free_nondynamic_allocated_memory_004(void)
{
  char *ptr1 = (char *)"a";
  char **ptr = & ptr1;
  while (1) {
    break;
    free((void *)ptr);
  }
  return;
}

void free_nondynamic_allocated_memory_005(void)
{
  int i;
  char *buf1 = calloc((size_t)5,sizeof(char));
  char *buf2 = calloc((size_t)5,sizeof(char));
  char **pbuf[2] = {& buf1, & buf2};
  int j = 1;
  if (buf2 != (char *)0) *(buf2 + 0) = (char)10.0;
  i = 0;
  while (i < 2) {
    *(*(pbuf[i]) + j) = (char)5.0;
    i ++;
  }
  free((void *)buf1);
  free((void *)buf2);
  return;
}

void free_nondynamic_allocated_memory_006(void)
{
  char *ptr1 = malloc(sizeof(char));
  int *ptr2 = malloc(sizeof(int));
  float *ptr3 = malloc(sizeof(float));
  double *ptr4 = malloc(sizeof(double));
  free((void *)ptr1);
  free((void *)ptr2);
  free((void *)ptr3);
  free((void *)ptr4);
  return;
}

void free_nondynamic_allocated_memory_007(void)
{
  char *ptr = (char *)"a";
  while (1) {
    break;
    free((void *)ptr);
  }
  return;
}

void free_nondynamic_allocated_memory_008(void)
{
  char *ptr = (char *)"b";
  int a_0 = 2;
  int b = 0;
  while (a_0 < b) free((void *)ptr);
  return;
}

void free_nondynamic_allocated_memory_009(void)
{
  char *ptr = (char *)"c";
  int a_0 = 0;
  int b = 2;
  while (a_0 > b) free((void *)ptr);
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_9(char const * restrict format, char *param0);

void free_nondynamic_allocated_memory_010(void)
{
  int i;
  i = 0;
  while (i < 1) {
    {
      char *ptr = (char *)"g";
      printf("%s",ptr); /* printf_va_9 */
    }
    i ++;
  }
  return;
}

void free_nondynamic_allocated_memory_011(void)
{
  int i;
  i = 0;
  while (i < 0) {
    {
      char *ptr = (char *)"z";
      free((void *)ptr);
    }
    i ++;
  }
  return;
}

void free_nondynamic_allocated_memory_012(void)
{
  char *ptr = (char *)"a";
  int a_0 = 0;
  int b = 2;
  while (a_0 < b) {
    a_0 ++;
    if (a_0 == 5) free((void *)ptr);
  }
  return;
}

void free_nondynamic_allocated_memory_013(void)
{
  free_nondynamic_allocated_memory_struct_013 *new_struct =
    malloc(sizeof(free_nondynamic_allocated_memory_struct_013));
  new_struct->next = (struct node *)malloc(sizeof(free_nondynamic_allocated_memory_struct_013));
  free((void *)new_struct->next);
  free((void *)new_struct);
  return;
}

free_nondynamic_allocated_memory_struct_014 *free_nondynamic_allocated_memory_str;
void free_nondynamic_allocated_memory_014(void)
{
  free_nondynamic_allocated_memory_str = (free_nondynamic_allocated_memory_struct_014 *)malloc
  (sizeof(free_nondynamic_allocated_memory_struct_014));
  free((void *)free_nondynamic_allocated_memory_str);
  return;
}

char *free_nondynamic_allocated_memory_015_gbl_ptr;
void free_nondynamic_allocated_memory_015_func_001(void)
{
  free((void *)free_nondynamic_allocated_memory_015_gbl_ptr);
  return;
}

void free_nondynamic_allocated_memory_015(void)
{
  free_nondynamic_allocated_memory_015_gbl_ptr = (char *)malloc(sizeof(char));
  free_nondynamic_allocated_memory_015_func_001();
  return;
}

char *free_nondynamic_allocated_memory_016_gbl_ptr;
char free_nondynamic_allocated_memory_016_gbl_var;
void free_nondynamic_allocated_memory_016_func_001(void)
{
  free_nondynamic_allocated_memory_016_gbl_ptr = (char *)malloc(sizeof(char));
  return;
}

void free_nondynamic_allocated_memory_016_func_002(void)
{
  if ((int)free_nondynamic_allocated_memory_016_gbl_var == 'A') free((void *)free_nondynamic_allocated_memory_016_gbl_ptr);
  return;
}

void free_nondynamic_allocated_memory_016(void)
{
  free_nondynamic_allocated_memory_016_gbl_var = (char)'A';
  free_nondynamic_allocated_memory_016_func_001();
  free_nondynamic_allocated_memory_016_func_002();
  return;
}

void free_nondynamic_allocated_memory_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: free_nondynamic_allocated_memory_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: free_nondynamic_allocated_memory_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: free_nondynamic_allocated_memory_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: free_nondynamic_allocated_memory_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: free_nondynamic_allocated_memory_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: free_nondynamic_allocated_memory_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: free_nondynamic_allocated_memory_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: free_nondynamic_allocated_memory_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: free_nondynamic_allocated_memory_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: free_nondynamic_allocated_memory_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: free_nondynamic_allocated_memory_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: free_nondynamic_allocated_memory_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: free_nondynamic_allocated_memory_013();
  if (vflag == 14) goto _LOR_12;
  else 
    if (vflag == 888) _LOR_12: free_nondynamic_allocated_memory_014();
  if (vflag == 15) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: free_nondynamic_allocated_memory_015();
  if (vflag == 16) goto _LOR_14;
  else 
    if (vflag == 888) _LOR_14: free_nondynamic_allocated_memory_016();
  return;
}

char **invalid_memory_access_016_doubleptr_gbl;
char *invalid_memory_access_017_doubleptr_gbl;
static int staticflag1 = 1;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_10(char const * restrict format, int param0);

void invalid_memory_access_001(void)
{
  int *ptr;
  int a_0;
  int flag = 10;
  if (flag == 10) {
    ptr = (int *)malloc((unsigned int)10 * sizeof(int));
    int *tmp_2 = ptr;
  }
  else {
    ptr = (int *)0;
    int *tmp_4 = ptr;
  }
  if (ptr != (int *)0) {
    if (flag == 10) {
      *(ptr + 1) = 10;
      int tmp_6 = *(ptr + 1);
    }
    else {
      a_0 = 100;
      int tmp_8 = a_0;
    }
    if (flag == 10) {
      a_0 = *(ptr + 1);
      printf("%d",a_0); /* printf_va_10 */
    }
    if (flag == 10) {
      free((void *)ptr);
      ptr = (int *)0;
    }
  }
  return;
}

void invalid_memory_access_002(void);

static int invalid_memory_access_002_staticflag = 10;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_11(char const * restrict format, double param0);

void invalid_memory_access_002(void)
{
  double *ptr;
  double a_0;
  double *dptr = (double *)0;
  if (invalid_memory_access_002_staticflag == 10) ptr = (double *)malloc
                                                  ((unsigned int)10 * sizeof(double));
  else dptr = (double *)malloc((unsigned int)5 * sizeof(double));
  if (invalid_memory_access_002_staticflag == 10) 
    if (ptr != (double *)0) *(ptr + 1) = 10.5; else *(dptr + 1) = 5.5;
  else *(dptr + 1) = 5.5;
  if (invalid_memory_access_002_staticflag == 10) 
    if (ptr != (double *)0) a_0 = *(ptr + 1); else a_0 = *(dptr + 1);
  else a_0 = *(dptr + 1);
  printf("%lf",a_0); /* printf_va_11 */
  if (invalid_memory_access_002_staticflag == 10) {
    if (ptr != (double *)0) {
      free((void *)ptr);
      ptr = (double *)0;
    }
    else goto _LAND;
  }
  else {
    _LAND: {
             free((void *)dptr);
             dptr = (double *)0;
           }
  }
  return;
}

void invalid_memory_access_003(void)
{
  char *buf_0;
  int i = 1;
  char *c = (char *)0;
  while (i > 0) {
    buf_0 = (char *)malloc((unsigned int)25 * sizeof(char));
    if (buf_0 != (char *)0) {
      strcpy(buf_0,"This is String");
      c = buf_0;
      free((void *)buf_0);
      buf_0 = (char *)0;
    }
    i ++;
    if (i >= 10) break;
  }
  return;
}

void invalid_memory_access_004(void)
{
  char *buf_0 = (char *)0;
  if (staticflag1) {
    buf_0 = (char *)malloc((unsigned int)100 * sizeof(char));
    if (buf_0 != (char *)0) {
      memset((void *)buf_0,'A',(size_t)(100 - 1));
      *(buf_0 + (100 - 1)) = (char)'\000';
      free((void *)buf_0);
      buf_0 = (char *)0;
    }
  }
  return;
}

int invalid_memory_access_005(int count)
{
  int __retres;
  int *ptr;
  if (count == 0) {
    __retres = 1;
    goto return_label;
  }
  else {
    int tmp_0;
    ptr = (int *)calloc((size_t)count,sizeof(int));
    if (ptr != (int *)0) {
      *(ptr + (count - 1)) = 5 * count;
      free((void *)ptr);
      ptr = (int *)0;
    }
    tmp_0 = invalid_memory_access_005(count - 1);
    ;
    __retres = count * tmp_0;
    goto return_label;
  }
  return_label: return __retres;
}

void invalid_memory_access_006(void)
{
  int i;
  float *buf1 = calloc((size_t)5,sizeof(float));
  float *buf2 = calloc((size_t)5,sizeof(float));
  float *buf3 = calloc((size_t)5,sizeof(float));
  float *buf4 = calloc((size_t)5,sizeof(float));
  float *buf5 = calloc((size_t)5,sizeof(float));
  float **pbuf[5] = {& buf1, & buf2, & buf3, & buf4, & buf5};
  int j = 4;
  if (buf2 != (float *)0) *(buf2 + 0) = (float)10.0;
  i = 0;
  while (i < 5) {
    *(*(pbuf[i]) + j) = (float)5.0;
    i ++;
  }
  if (buf2 != (float *)0) *(*(pbuf[1]) + 1) = *(buf2 + 0);
  if (buf1 != (float *)0) free((void *)buf1);
  if (buf2 != (float *)0) free((void *)buf2);
  if (buf3 != (float *)0) free((void *)buf3);
  if (buf4 != (float *)0) free((void *)buf4);
  if (buf5 != (float *)0) free((void *)buf5);
  return;
}

void invalid_memory_access_007(void)
{
  int i;
  char **ptr = malloc((unsigned int)5 * sizeof(char *));
  i = 0;
  while (i < 5) {
    *(ptr + i) = (char *)malloc((unsigned int)15 * sizeof(char));
    i ++;
  }
  i = 0;
  while (i < 5) {
    strcpy(*(ptr + i),"String");
    free((void *)*(ptr + i));
    *(ptr + i) = (char *)0;
    i ++;
  }
  free((void *)ptr);
  ptr = (char **)0;
  return;
}

void invalid_memory_access_008(void)
{
  char *buf_0 = calloc((size_t)25,sizeof(char));
  char *buf1 = (char *)"This is a string";
  if (buf_0 != (char *)0) {
    memcpy((void *)buf_0,(void const *)buf1,(size_t)11);
    free((void *)buf_0);
    buf_0 = (char *)0;
  }
  return;
}

void invalid_memory_access_009(void)
{
  invalid_memory_access_009_uni_001 *u =
    malloc((unsigned int)5 * sizeof(invalid_memory_access_009_uni_001));
  invalid_memory_access_009_uni_001 *p =
    (invalid_memory_access_009_uni_001 *)0;
  if (u != (invalid_memory_access_009_uni_001 *)0) {
    u->s1 = (invalid_memory_access_009_s_001 *)malloc(sizeof(invalid_memory_access_009_s_001));
    if (u->s1 != (invalid_memory_access_009_s_001 *)0) (u->s1)->a = (int *)malloc
                                                       ((unsigned int)5 * sizeof(int));
    p = u;
    *((p->s1)->a + 0) = 1;
    free((void *)(u->s1)->a);
    free((void *)u->s1);
    free((void *)u);
  }
  return;
}

void invalid_memory_access_func_010(int len, int **Ptr)
{
  int *p = malloc(sizeof(int) * (unsigned int)len);
  *Ptr = p;
  return;
}

void invalid_memory_access_010(void)
{
  int *ptr1;
  int i;
  int ptr[5] = {4, 6, 9, 10, 0};
  invalid_memory_access_func_010(5,& ptr1);
  i = 0;
  while (i < 5) {
    *(ptr1 + i) = ptr[i];
    i ++;
  }
  free((void *)ptr1);
  return;
}

void invalid_memory_access_011(void)
{
  int *ptr;
  int j;
  int i = 0;
  int index_0[4] = {3, 5, 4, 6};
  j = 0;
  while (1) {
    ptr = (int *)malloc(sizeof(int) * (unsigned int)4);
    if (ptr != (int *)0) {
      while (i < 4) {
        *(ptr + i) = index_0[i];
        i ++;
      }
      free((void *)ptr);
    }
    if (j > 10) break;
    j ++;
  }
  return;
}

int invalid_memory_access_012_func_001(int flag)
{
  invalid_memory_access_012_s_001 *s_0;
  s_0 = (invalid_memory_access_012_s_001 *)calloc((size_t)1,
                                                  sizeof(invalid_memory_access_012_s_001));
  int i = 0;
  switch (flag) {
    case 1:
    {
      if (s_0 != (invalid_memory_access_012_s_001 *)0) {
        s_0->a = 10;
        s_0->b = 10;
        s_0->uninit = 10;
        i = s_0->a;
        free((void *)s_0);
      }
      break;
    }
    case 2:
    {
      if (s_0 != (invalid_memory_access_012_s_001 *)0) {
        s_0->a = 20;
        s_0->b = 20;
        s_0->uninit = 20;
        i = s_0->a;
        free((void *)s_0);
      }
      break;
    }
    default: {
               free((void *)s_0);
               break;
             }
  }
  return i;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_12(char const * restrict format, int param0);

void invalid_memory_access_012(void)
{
  int ret;
  ret = invalid_memory_access_012_func_001(1);
  printf("%d",ret); /* printf_va_12 */
  return;
}

invalid_memory_access_013_s_001 *invalid_memory_access_013_s_001_s_gbl;
void invalid_memory_access_013_func_001(int flag)
{
  if (flag > 0) invalid_memory_access_013_s_001_s_gbl = (invalid_memory_access_013_s_001 *)calloc
                ((size_t)1,sizeof(invalid_memory_access_013_s_001));
  return;
}

int invalid_memory_access_013_func_002(int flag)
{
  int i = 0;
  switch (flag) {
    case 1:
    {
      if (invalid_memory_access_013_s_001_s_gbl != (invalid_memory_access_013_s_001 *)0) {
        invalid_memory_access_013_s_001_s_gbl->a = 10;
        invalid_memory_access_013_s_001_s_gbl->b = 10;
        invalid_memory_access_013_s_001_s_gbl->uninit = 10;
        i = invalid_memory_access_013_s_001_s_gbl->a;
        free((void *)invalid_memory_access_013_s_001_s_gbl);
      }
      break;
    }
    case 2:
    {
      if (invalid_memory_access_013_s_001_s_gbl != (invalid_memory_access_013_s_001 *)0) {
        invalid_memory_access_013_s_001_s_gbl->a = 20;
        invalid_memory_access_013_s_001_s_gbl->b = 20;
        invalid_memory_access_013_s_001_s_gbl->uninit = 20;
        i = invalid_memory_access_013_s_001_s_gbl->a;
        free((void *)invalid_memory_access_013_s_001_s_gbl);
      }
      break;
    }
    default: break;
  }
  return i;
}

void invalid_memory_access_013_func_003(int flag)
{
  invalid_memory_access_013_s_001 s_0;
  if (flag > 0) 
    if (invalid_memory_access_013_s_001_s_gbl != (invalid_memory_access_013_s_001 *)0) {
      s_0.a = invalid_memory_access_013_s_001_s_gbl->a;
      s_0.b = invalid_memory_access_013_s_001_s_gbl->b;
      s_0.uninit = invalid_memory_access_013_s_001_s_gbl->uninit;
    }
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_13(char const * restrict format, int param0);

void invalid_memory_access_013(void)
{
  int ret;
  invalid_memory_access_013_func_001(1);
  invalid_memory_access_013_func_003(1);
  ret = invalid_memory_access_013_func_002(1);
  printf("%d",ret); /* printf_va_13 */
  return;
}

int invalid_memory_access_014(int flag)
{
  int i;
  int ret = 0;
  int arr[5] = {3, 8, 9, 10, 4};
  int *ptr = malloc(sizeof(int) * (unsigned int)5);
  if (flag == 1) goto my_label;
  if (ptr != (int *)0) ret = *(ptr + 2);
  goto my_label2;
  my_label:
  {
    i = 0;
    while (i < 5) {
      if (ptr != (int *)0) *(ptr + i) = arr[i];
      i ++;
    }
  }
  my_label2: free((void *)ptr);
  return ret;
}

static char *invalid_memory_access_015_func_001(char *str1)
{
  char *__retres;
  int j;
  int i = 0;
  char *str_rev = (char *)0;
  if (str1 != (char *)0) {
    size_t tmp;
    tmp = strlen((char const *)str1);
    i = (int)tmp;
    str_rev = (char *)malloc((size_t)(i + 1));
    if (str_rev != (char *)0) {
      j = 0;
      while (j < i) {
        *(str_rev + j) = *(str1 + ((i - j) - 1));
        j ++;
      }
      *(str_rev + i) = (char)'\000';
    }
    __retres = str_rev;
    goto return_label;
  }
  else {
    __retres = (char *)0;
    goto return_label;
  }
  return_label: return __retres;
}

void invalid_memory_access_015(void)
{
  int j;
  char buf_0[2][25] =
    {{(char)'T',
      (char)'h',
      (char)'i',
      (char)'s',
      (char)' ',
      (char)'i',
      (char)'s',
      (char)' ',
      (char)'a',
      (char)' ',
      (char)'S',
      (char)'t',
      (char)'r',
      (char)'i',
      (char)'n',
      (char)'g',
      (char)'\000'},
     {(char)'S',
      (char)'e',
      (char)'c',
      (char)'o',
      (char)'n',
      (char)'d',
      (char)' ',
      (char)'S',
      (char)'t',
      (char)'r',
      (char)'i',
      (char)'n',
      (char)'g',
      (char)'\000'}};
  j = 0;
  while (j <= 1) {
    {
      char *str;
      str = invalid_memory_access_015_func_001(buf_0[j]);
      psink = (void *)str;
    }
    j ++;
  }
  return;
}

int invalid_memory_access_016_func_001(int flag)
{
  int ret;
  if (flag == 0) ret = 0; else ret = 1;
  return ret;
}

void invalid_memory_access_016_func_002(void)
{
  int i;
  int tmp_1;
  tmp_1 = invalid_memory_access_016_func_001(0);
  if (tmp_1 == 0) {
    invalid_memory_access_016_doubleptr_gbl = (char **)malloc((unsigned int)10 * sizeof(char *));
    i = 0;
    while (i < 10) {
      *(invalid_memory_access_016_doubleptr_gbl + i) = (char *)malloc
      ((unsigned int)10 * sizeof(char));
      strcpy(*(invalid_memory_access_016_doubleptr_gbl + i),"STRING00");
      i ++;
    }
  }
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_14(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_15(char const * restrict format, char *param0);

void invalid_memory_access_016_func_003(void)
{
  char s_0[10];
  printf("invalid gbl= %s \n",*(invalid_memory_access_016_doubleptr_gbl + 0)); /* printf_va_14 */
  strcpy(s_0,(char const *)*(invalid_memory_access_016_doubleptr_gbl + 0));
  printf("invalid str= %s \n",s_0); /* printf_va_15 */
  return;
}

void invalid_memory_access_016(void)
{
  int i;
  int tmp;
  int tmp_0;
  int flag = 0;
  tmp = invalid_memory_access_016_func_001(flag);
  if (tmp == 0) invalid_memory_access_016_func_002();
  tmp_0 = invalid_memory_access_016_func_001(flag);
  if (tmp_0 == 0) invalid_memory_access_016_func_003();
  if (invalid_memory_access_016_doubleptr_gbl != (char **)0) {
    i = 0;
    while (i < 10) {
      if (*(invalid_memory_access_016_doubleptr_gbl + i) != (char *)0) 
        free((void *)*(invalid_memory_access_016_doubleptr_gbl + i));
      i ++;
    }
    free((void *)invalid_memory_access_016_doubleptr_gbl);
  }
  return;
}

int invalid_memory_access_017_func_001(int flag)
{
  int ret;
  if (flag == 0) ret = 0; else ret = 1;
  return ret;
}

void invalid_memory_access_017_func_002(void)
{
  invalid_memory_access_017_doubleptr_gbl = (char *)malloc((unsigned int)10 * sizeof(char));
  if (invalid_memory_access_017_doubleptr_gbl != (char *)0) strcpy(invalid_memory_access_017_doubleptr_gbl,
                                                                   "TEST");
  return;
}

void invalid_memory_access_017_func_003(void)
{
  free((void *)invalid_memory_access_017_doubleptr_gbl);
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_16(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_17(char const * restrict format, char *param0);

void invalid_memory_access_017_func_004(void)
{
  char s_0[10];
  printf("invalid gbl= %s \n",invalid_memory_access_017_doubleptr_gbl); /* printf_va_16 */
  strcpy(s_0,(char const *)invalid_memory_access_017_doubleptr_gbl);
  printf("invalid str= %s \n",s_0); /* printf_va_17 */
  return;
}

void invalid_memory_access_017(void)
{
  int tmp;
  int tmp_0;
  int tmp_1;
  int flag = 10;
  tmp = invalid_memory_access_017_func_001(flag);
  if (! (tmp == 0)) invalid_memory_access_017_func_002();
  tmp_0 = invalid_memory_access_017_func_001(flag);
  if (! (tmp_0 == 0)) invalid_memory_access_017_func_004();
  tmp_1 = invalid_memory_access_017_func_001(flag);
  if (! (tmp_1 == 0)) invalid_memory_access_017_func_003();
  return;
}

void invalid_memory_access_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: invalid_memory_access_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: invalid_memory_access_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: invalid_memory_access_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: invalid_memory_access_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: ;
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: invalid_memory_access_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: invalid_memory_access_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: invalid_memory_access_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: invalid_memory_access_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: invalid_memory_access_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: invalid_memory_access_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: invalid_memory_access_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: invalid_memory_access_013();
  if (vflag == 14) goto _LOR_12;
  else 
    if (vflag == 888) {
      _LOR_12: {
                 int i;
                 i = invalid_memory_access_014(1);
                 sink = i;
               }
    }
  if (vflag == 15) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: invalid_memory_access_015();
  if (vflag == 16) goto _LOR_14;
  else 
    if (vflag == 888) _LOR_14: invalid_memory_access_016();
  if (vflag == 17) goto _LOR_15;
  else 
    if (vflag == 888) _LOR_15: invalid_memory_access_017();
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_18(char const * restrict format, int param0);

void littlemem_st_001(void)
{
  char buf_0[12];
  littlemem_st_001_s_001 *p;
  int ret;
  int i;
  i = 0;
  while (i < 12) {
    buf_0[i] = (char)1;
    i ++;
  }
  p = (littlemem_st_001_s_001 *)(buf_0);
  ret = p->c;
  printf("%d \n",p->c); /* printf_va_18 */
  return;
}

void littlemem_st_002(void)
{
  char buf_0[12];
  littlemem_st_002_s_001 *p;
  p = (littlemem_st_002_s_001 *)(buf_0);
  p->c = 1;
  return;
}

void littlemem_st_003(void)
{
  char buf_0[4];
  littlemem_st_003_uni_001 *p;
  p = (littlemem_st_003_uni_001 *)(buf_0);
  p->c = 1;
  return;
}

littlemem_st_004_s_001 *littlemem_st_004_s_001_gbl_str;
void littlemem_st_004(void)
{
  char buf_0[12];
  littlemem_st_004_s_001_gbl_str = (littlemem_st_004_s_001 *)(buf_0);
  littlemem_st_004_s_001_gbl_str->c = 1;
  return;
}

littlemem_st_005_s_001 *littlemem_st_005_s_001_gbl_str;
char littlemem_st_005_gbl_buf[12];
void littlemem_st_005_func_001(void)
{
  littlemem_st_005_s_001_gbl_str = (littlemem_st_005_s_001 *)(littlemem_st_005_gbl_buf);
  return;
}

void littlemem_st_005(void)
{
  littlemem_st_005_func_001();
  littlemem_st_005_s_001_gbl_str->c = 1;
  return;
}

littlemem_st_006_s_001 *littlemem_st_006_s_001_gbl_str;
char littlemem_st_006_gbl_buf[12];
void littlemem_st_006_func_001(void)
{
  littlemem_st_006_s_001_gbl_str = (littlemem_st_006_s_001 *)(littlemem_st_006_gbl_buf);
  return;
}

void littlemem_st_006_func_002(int flag)
{
  if (flag == 10) littlemem_st_006_s_001_gbl_str->c = 1;
  return;
}

void littlemem_st_006(void)
{
  littlemem_st_006_func_001();
  littlemem_st_006_func_002(10);
  return;
}

littlemem_st_007_s_001 *littlemem_st_007_s_001_gbl_str;
char littlemem_st_007_gbl_buf[12];
void littlemem_st_007_func_001(void)
{
  littlemem_st_007_s_001_gbl_str = (littlemem_st_007_s_001 *)(littlemem_st_007_gbl_buf);
  return;
}

void littlemem_st_007_func_002(int flag)
{
  int i;
  i = 0;
  while (i < 2) {
    if (! (flag == 10)) littlemem_st_007_s_001_gbl_str->c = 1;
    i ++;
  }
  return;
}

void littlemem_st_007(void)
{
  littlemem_st_007_func_001();
  littlemem_st_007_func_002(1);
  return;
}

littlemem_st_008_s_001 *littlemem_st_008_s_001_gbl_str;
char littlemem_st_008_gbl_buf[12];
void littlemem_st_008_func_001(void)
{
  littlemem_st_008_s_001_gbl_str = (littlemem_st_008_s_001 *)(littlemem_st_008_gbl_buf);
  return;
}

void littlemem_st_008_func_002(int flag)
{
  int i = 0;
  while (i < 2) {
    if (! (flag == 10)) 
      if (flag == 1) littlemem_st_008_s_001_gbl_str->c = 1;
    i ++;
  }
  return;
}

void littlemem_st_008(void)
{
  littlemem_st_008_func_001();
  littlemem_st_008_func_002(1);
  return;
}

littlemem_st_009_s_001 *littlemem_st_009_s_001_gbl_str;
char littlemem_st_009_gbl_buf[12];
void littlemem_st_009_func_001(void)
{
  littlemem_st_009_s_001_gbl_str = (littlemem_st_009_s_001 *)(littlemem_st_009_gbl_buf);
  return;
}

void littlemem_st_009_func_002(int flag)
{
  int i = 0;
  while (1) {
    if (! (flag == 10)) 
      if (flag == 1) littlemem_st_009_s_001_gbl_str->c = 1;
    i ++;
    if (! (i < 2)) break;
  }
  return;
}

void littlemem_st_009(void)
{
  littlemem_st_009_func_001();
  littlemem_st_009_func_002(1);
  return;
}

littlemem_st_010_s_001 *littlemem_st_010_s_001_gbl_str;
char littlemem_st_010_gbl_buf[12];
void littlemem_st_010_func_001(void)
{
  littlemem_st_010_s_001_gbl_str = (littlemem_st_010_s_001 *)(littlemem_st_010_gbl_buf);
  return;
}

void littlemem_st_010_func_002(int flag)
{
  goto label;
  label: littlemem_st_010_s_001_gbl_str->c = 1;
  return;
}

void littlemem_st_010(void)
{
  littlemem_st_010_func_001();
  littlemem_st_010_func_002(1);
  return;
}

littlemem_st_011_s_001 *littlemem_st_011_s_001_gbl_str;
char littlemem_st_011_gbl_buf[12];
void littlemem_st_011_func_001(void)
{
  littlemem_st_011_s_001_gbl_str = (littlemem_st_011_s_001 *)(littlemem_st_011_gbl_buf);
  return;
}

void littlemem_st_011_func_002(int flag)
{
  int i = 0;
  goto label;
  label: while (i < 2) {
           littlemem_st_011_s_001_gbl_str->c = 1;
           i ++;
         }
  return;
}

void littlemem_st_011(void)
{
  littlemem_st_011_func_001();
  littlemem_st_011_func_002(1);
  return;
}

void littlemem_st_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: littlemem_st_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: littlemem_st_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: littlemem_st_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: littlemem_st_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: littlemem_st_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: littlemem_st_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: littlemem_st_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: littlemem_st_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: littlemem_st_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: littlemem_st_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: littlemem_st_011();
  return;
}

unsigned int memory_allocation_failure_005_gbl = (unsigned int)40;
char *memory_allocation_failure_007_str_gbl;
memory_allocation_failure_010_s_001 *memory_allocation_failure_010_arr_gbl;
void memory_allocation_failure_001(void)
{
  int i;
  long *buf_0;
  i = 0;
  while (1) {
    buf_0 = (long *)calloc((size_t)5,sizeof(long));
    if (buf_0 != (long *)0) {
      *(buf_0 + 1) = (long)1;
      free((void *)buf_0);
    }
    if (i >= 10) break;
    i ++;
  }
  return;
}

void memory_allocation_failure_002(void)
{
  long long i = (long long)0;
  long long *ptr = malloc((unsigned int)10 * sizeof(long long));
  if (ptr != (long long *)0) {
    *(ptr + i) = i;
    free((void *)ptr);
  }
  return;
}

void memory_allocation_failure_003(void)
{
  unsigned int i;
  unsigned int j;
  unsigned int **ptr = malloc((unsigned int)10 * sizeof(unsigned int *));
  if (ptr != (unsigned int **)0) {
    i = (unsigned int)0;
    while (i < (unsigned int)10) {
      *(ptr + i) = (unsigned int *)malloc((unsigned int)10 * sizeof(unsigned int));
      i ++;
    }
  }
  i = (unsigned int)0;
  while (i < (unsigned int)5) {
    j = (unsigned int)0;
    while (j < (unsigned int)5) {
      *(*(ptr + i) + j) = i;
      j ++;
    }
    free((void *)*(ptr + i));
    i ++;
  }
  free((void *)ptr);
  return;
}

int memory_allocation_failure_004_func_001(int flag)
{
  int ret = 0;
  if (flag == 0) ret = 10; else ret = 1;
  return ret;
}

void memory_allocation_failure_004(void)
{
  unsigned int *tmp_0;
  int tmp;
  tmp = memory_allocation_failure_004_func_001(0);
  tmp_0 = (unsigned int *)malloc((unsigned int)tmp * sizeof(unsigned int));
  unsigned int *ptr = tmp_0;
  if (ptr != (unsigned int *)0) {
    *(ptr + 1) = (unsigned int)10;
    free((void *)ptr);
  }
  return;
}

void *vptr;
int memory_allocation_failure_005_func_001(int flag)
{
  int __retres;
  switch (flag) {
    case 1:
    {
      vptr = calloc(memory_allocation_failure_005_gbl * memory_allocation_failure_005_gbl,
                    sizeof(int));
      if (vptr != (void *)0) *((int *)vptr + 1) = 10;
      __retres = 1;
      goto return_label;
    }
    case 2:
    {
      vptr = calloc((size_t)10,sizeof(char));
      if (vptr != (void *)0) *((char *)vptr + 2) = (char)'a';
      __retres = 2;
      goto return_label;
    }
    case 3:
    {
      vptr = calloc((size_t)10,sizeof(float));
      if (vptr != (void *)0) *((float *)vptr + 3) = (float)5.5;
      __retres = 3;
      goto return_label;
    }
    default: __retres = -1;
    goto return_label;
  }
  return_label: return __retres;
}

void memory_allocation_failure_005(void)
{
  int ret;
  ret = memory_allocation_failure_005_func_001(1);
  if (ret >= 0) 
    if (vptr != (void *)0) {
      free(vptr);
      vptr = (void *)0;
    }
  return;
}

int **memory_allocation_failure_006_gbl_doubleptr;
int memory_allocation_failure_006_func_001(int flag)
{
  int ret;
  if (flag == 0) ret = 0; else ret = 1;
  return ret;
}

void memory_allocation_failure_006_func_002(void)
{
  int i;
  int tmp_1;
  tmp_1 = memory_allocation_failure_006_func_001(0);
  if (tmp_1 == 0) {
    memory_allocation_failure_006_gbl_doubleptr = (int **)malloc((unsigned int)10 * sizeof(int *));
    i = 0;
    while (i < 10) {
      *(memory_allocation_failure_006_gbl_doubleptr + i) = (int *)malloc
      ((unsigned int)10 * sizeof(int));
      *(*(memory_allocation_failure_006_gbl_doubleptr + i) + 0) = 10;
      i ++;
    }
  }
  return;
}

void memory_allocation_failure_006(void)
{
  int i;
  int tmp;
  int tmp_0;
  int flag = 0;
  tmp = memory_allocation_failure_006_func_001(flag);
  if (tmp == 0) memory_allocation_failure_006_func_002();
  tmp_0 = memory_allocation_failure_006_func_001(flag);
  if (tmp_0 == 0) {
    i = 0;
    while (i < 10) {
      if (*(memory_allocation_failure_006_gbl_doubleptr + i) != (int *)0) {
        free((void *)*(memory_allocation_failure_006_gbl_doubleptr + i));
        *(memory_allocation_failure_006_gbl_doubleptr + i) = (int *)0;
      }
      i ++;
    }
    free((void *)memory_allocation_failure_006_gbl_doubleptr);
    memory_allocation_failure_006_gbl_doubleptr = (int **)0;
  }
  return;
}

static unsigned int static_var = (unsigned int)(10 * 2);
static char *memory_allocation_failure_007_func_001(char *str1)
{
  char *__retres;
  int j;
  if (str1 != (char *)0) {
    static_var = strlen((char const *)str1);
    memory_allocation_failure_007_str_gbl = (char *)malloc(static_var + (unsigned int)1);
    if (memory_allocation_failure_007_str_gbl != (char *)0) {
      j = 0;
      while ((unsigned int)j < static_var) {
        *(memory_allocation_failure_007_str_gbl + j) = *(str1 + ((static_var - (unsigned int)j) - (unsigned int)1));
        j ++;
      }
      *(memory_allocation_failure_007_str_gbl + static_var) = (char)'\000';
    }
    __retres = memory_allocation_failure_007_str_gbl;
    goto return_label;
  }
  else {
    __retres = (char *)0;
    goto return_label;
  }
  return_label: return __retres;
}

void memory_allocation_failure_007(void)
{
  int j;
  char buf_0[2][25] =
    {{(char)'T',
      (char)'h',
      (char)'i',
      (char)'s',
      (char)' ',
      (char)'i',
      (char)'s',
      (char)' ',
      (char)'a',
      (char)' ',
      (char)'S',
      (char)'t',
      (char)'r',
      (char)'i',
      (char)'n',
      (char)'g',
      (char)'\000'},
     {(char)'S',
      (char)'e',
      (char)'c',
      (char)'o',
      (char)'n',
      (char)'d',
      (char)' ',
      (char)'S',
      (char)'t',
      (char)'r',
      (char)'i',
      (char)'n',
      (char)'g',
      (char)'\000'}};
  j = 0;
  while (j <= 1) {
    if (buf_0[j] != (char *)0) memory_allocation_failure_007_str_gbl = memory_allocation_failure_007_func_001
                               (buf_0[j]);
    j ++;
  }
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    requires
      \valid(s + (0 .. n - 1)) ∨
      \valid(s + (0 .. format_length(format) - 1));
    assigns \result, *(s + (0 ..));
    assigns \result
      \from (indirect: n), (indirect: *(format + (0 ..))),
            (indirect: *(param0 + (0 ..)));
    assigns *(s + (0 ..))
      \from (indirect: n), (indirect: *(format + (0 ..))), *(param0 + (0 ..));
 */
int snprintf_va_1(char * restrict s, size_t n, char const * restrict format,
                  char *param0);

char *memory_allocation_failure_008_func_001(char const *msg)
{
  int i;
  char const *error_log = msg;
  char *buffer = (char *)0;
  i = 0;
  while (i < max_buffer) {
    buffer = (char *)malloc((unsigned int)max_buffer * sizeof(char));
    break;
    i ++;
  }
  if (buffer != (char *)0) snprintf(buffer,
                                    (unsigned int)max_buffer * sizeof(char),
                                    "Error: %s",(char *)error_log); /* snprintf_va_1 */
  return buffer;
}

void memory_allocation_failure_008(void)
{
  char *str = (char *)"STRINGMEM";
  memory_allocation_failure_008_func_001((char const *)str);
  return;
}

void memory_allocation_failure_009_func_001(char *buf_0)
{
  int i = 0;
  while (1) {
    buf_0 = (char *)malloc((size_t)(429496728UL * (unsigned long)sizeof(char)));
    i ++;
    if (! (i < 10)) break;
  }
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_19(char const * restrict format, char *param0);

void memory_allocation_failure_009_func_002(void *vptr_0)
{
  char **cptr = (char **)vptr_0;
  char *buf_0 = (char *)0;
  memory_allocation_failure_009_func_001(buf_0);
  buf_0 = *cptr;
  printf("%s",buf_0); /* printf_va_19 */
  return;
}

void memory_allocation_failure_009(void)
{
  void *buf1;
  buf1 = (void *)"String Test123";
  memory_allocation_failure_009_func_002((void *)(& buf1));
  return;
}

void memory_allocation_failure_010_func_001(int devno)
{
  int i = 0;
  if (devno <= 4) 
    while (1) {
      memory_allocation_failure_010_arr_gbl = (memory_allocation_failure_010_s_001 *)malloc
      ((unsigned int)10 * sizeof(memory_allocation_failure_010_s_001));
      i ++;
      if (! (i <= 10)) break;
    }
  return;
}

void memory_allocation_failure_010_func_002(int devno)
{
  memory_allocation_failure_010_func_001(1);
  memory_allocation_failure_010_arr_gbl->csr = 0x2;
  while (1) {
    memory_allocation_failure_010_arr_gbl->data = 0x2;
    if (memory_allocation_failure_010_arr_gbl->csr & 0x1) memory_allocation_failure_010_arr_gbl->csr = 0x4;
    if (! ((memory_allocation_failure_010_arr_gbl->csr & (0x2 | 0x1)) == 0)) 
      break;
  }
  return;
}

void memory_allocation_failure_010(void)
{
  memory_allocation_failure_010_func_002(1);
  (memory_allocation_failure_010_arr_gbl->data) ++;
  return;
}

int memory_allocation_failure_011_func_001(int flag)
{
  int ret = 0;
  if (flag == 0) ret = 10; else ret = 5;
  return ret;
}

memory_allocation_failure_011_uni_001 *memory_allocation_failure_011_gbl_u1;
void memory_allocation_failure_011_func_002(void)
{
  void *tmp_0;
  int tmp;
  tmp = memory_allocation_failure_011_func_001(1);
  tmp_0 = malloc((unsigned int)tmp * sizeof(memory_allocation_failure_011_uni_001));
  memory_allocation_failure_011_gbl_u1 = (memory_allocation_failure_011_uni_001 *)tmp_0;
  memory_allocation_failure_011_gbl_u1->s1 = (memory_allocation_failure_011_s_001 *)malloc
  (sizeof(memory_allocation_failure_011_s_001));
  (memory_allocation_failure_011_gbl_u1->s1)->a = (int *)calloc((size_t)5,
                                                                sizeof(int));
  return;
}

void memory_allocation_failure_011(void)
{
  memory_allocation_failure_011_uni_001 *p =
    (memory_allocation_failure_011_uni_001 *)0;
  memory_allocation_failure_011_func_002();
  if (memory_allocation_failure_011_gbl_u1 != (memory_allocation_failure_011_uni_001 *)0) {
    p = memory_allocation_failure_011_gbl_u1;
    *((p->s1)->a + 1) = 10;
    free((void *)(memory_allocation_failure_011_gbl_u1->s1)->a);
    free((void *)memory_allocation_failure_011_gbl_u1->s1);
    free((void *)memory_allocation_failure_011_gbl_u1);
  }
  return;
}

int *memory_allocation_failure_012_buf2_gbl;
int memory_allocation_failure_012_func_001(int flag)
{
  int ret = 0;
  if (flag == 0) ret = 10; else ret = 5;
  return ret;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_20(char const * restrict format, int param0);

void memory_allocation_failure_012_func_002(int **pbuf)
{
  void *tmp_0;
  int tmp;
  int ret;
  int buf1[5] = {1, 2, 3, 4, 5};
  tmp = memory_allocation_failure_012_func_001(1);
  tmp_0 = calloc((size_t)tmp,sizeof(int));
  memory_allocation_failure_012_buf2_gbl = (int *)tmp_0;
  int buf3[5] = {1, 2, 3, 4, 5};
  int buf4[5] = {1, 2, 3, 4, 5};
  int buf5[5] = {1, 2, 3, 4, 5};
  *(pbuf + 0) = buf1;
  *(pbuf + 1) = memory_allocation_failure_012_buf2_gbl;
  *(pbuf + 2) = buf3;
  *(pbuf + 3) = buf4;
  *(pbuf + 4) = buf5;
  ret = *(*(pbuf + 1) + 1);
  printf("%d",ret); /* printf_va_20 */
  return;
}

void memory_allocation_failure_012(void)
{
  int *ptr[5];
  int a_0;
  int flag = 10;
  if (flag == 10) memory_allocation_failure_012_func_002(ptr);
  else {
    a_0 = 20;
    int tmp = a_0;
  }
  if (flag == 10) {
    *(ptr[1] + 1) = 200;
    int tmp_3 = *(ptr[1] + 1);
  }
  else {
    a_0 = 100;
    int tmp_5 = a_0;
  }
  if (flag == 10) 
    if (memory_allocation_failure_012_buf2_gbl != (int *)0) {
      a_0 = *(ptr[1] + 1);
      free((void *)memory_allocation_failure_012_buf2_gbl);
    }
  return;
}

int memory_allocation_failure_013_func_001(int flag)
{
  int ret = 0;
  if (flag == 0) ret = 10; else ret = 5;
  return ret;
}

void memory_allocation_failure_013(void)
{
  return;
}

int const arr_value[2] = {1, 10};
int (*memory_allocation_failure_014_func_001(void))[4]
{
  int (*p)[4];
  int i;
  int j;
  int arr[4][4] =
    {{1, 2, 3, 4}, {11, 22, 33, 44}, {33, 44, 55, 66}, {55, 66, 77, 88}};
  p = (int (*)[4])malloc((unsigned int)arr_value[0] * sizeof(arr));
  if (p != (int (*)[4])0) {
    memcpy((void *)p,(void const *)(arr),sizeof(arr));
    i = 0;
    while (i < 4) {
      j = 0;
      while (j < 4) {
        (*(p + i))[j] += (*(p + i))[j];
        j ++;
      }
      i ++;
    }
  }
  return p;
}

void memory_allocation_failure_014(void);

static int memory_allocation_failure_014_staticflag = 10;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_21(char const * restrict format, int param0, double param1);

void memory_allocation_failure_014(void)
{
  int (*ptr1)[4];
  char **dptr;
  double *ptr;
  double b;
  int i;
  int j;
  char a_0 = (char)0;
  if (memory_allocation_failure_014_staticflag == 10) ptr = (double *)malloc
                                                      ((unsigned int)10 * sizeof(double));
  else {
    dptr = (char **)malloc((unsigned int)10 * sizeof(char *));
    i = 0;
    while (i < 10) {
      *(dptr + i) = (char *)malloc((unsigned int)10 * sizeof(char));
      i ++;
    }
    ptr1 = memory_allocation_failure_014_func_001();
  }
  if (memory_allocation_failure_014_staticflag == 10) *(ptr + 1) = 10.5;
  else {
    strcpy(*(dptr + 1),"STRING TEST");
    i = 0;
    while (i < 4) {
      j = 0;
      while (j < 4) {
        (*(ptr1 + i))[j] += (*(ptr1 + i))[j];
        j ++;
      }
      i ++;
    }
  }
  if (memory_allocation_failure_014_staticflag == 10) b = *(ptr + 1);
  else a_0 = (char)(*(ptr1 + 1))[1];
  if (memory_allocation_failure_014_staticflag == 10) {
    free((void *)ptr);
    ptr = (double *)0;
  }
  else {
    i = 0;
    while (i < 10) {
      free((void *)*(dptr + i));
      i ++;
    }
    free((void *)dptr);
    free((void *)ptr1);
  }
  printf("%d %lf",(int)a_0,b); /* printf_va_21 */
  return;
}

int *memory_allocation_failure_015_gbl_ptr;
int memory_allocation_failure_015_func_001(void)
{
  int __retres;
  memory_allocation_failure_015_s_001 s_0 = {.a = 10, .b = 20};
  __retres = s_0.b;
  return __retres;
}

void memory_allocation_failure_015_func_002(void)
{
  void *tmp_0;
  int tmp;
  tmp = memory_allocation_failure_015_func_001();
  tmp_0 = malloc((unsigned int)tmp * sizeof(int));
  memory_allocation_failure_015_gbl_ptr = (int *)tmp_0;
  return;
}

int memory_allocation_failure_015_func_003(int flag)
{
  int __retres;
  int ret = 0;
  if (flag == 1) goto my_label;
  __retres = ret;
  goto return_label;
  my_label: ;
  if (flag == 1) memory_allocation_failure_015_func_002();
  *(memory_allocation_failure_015_gbl_ptr + 1) = 7;
  ret ++;
  __retres = ret;
  return_label: return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_22(char const * restrict format, int param0);

void memory_allocation_failure_015(void)
{
  int flag;
  flag = memory_allocation_failure_015_func_003(1);
  printf("%d",flag); /* printf_va_22 */
  return;
}

int *memory_allocation_failure_016_gbl_ptr1;
int *memory_allocation_failure_016_gbl_ptr2;
int memory_allocation_failure_016_func_001(int flag)
{
  int ret = 0;
  if (flag == 0) ret = 10; else ret = 5;
  return ret;
}

void memory_allocation_failure_016_func_002(int flag)
{
  if (! (flag == 0)) {
    void *tmp_0;
    int tmp;
    void *tmp_2;
    int tmp_1;
    tmp = memory_allocation_failure_016_func_001(0);
    tmp_0 = malloc((unsigned int)tmp * sizeof(int));
    memory_allocation_failure_016_gbl_ptr1 = (int *)tmp_0;
    tmp_1 = memory_allocation_failure_016_func_001(0);
    tmp_2 = malloc((unsigned int)tmp_1 * sizeof(int));
    memory_allocation_failure_016_gbl_ptr2 = (int *)tmp_2;
  }
  return;
}

void memory_allocation_failure_016(void)
{
  int *tmp_0;
  int tmp;
  int *tmp_2;
  int tmp_1;
  tmp = memory_allocation_failure_016_func_001(0);
  tmp_0 = (int *)malloc((unsigned int)tmp * sizeof(int));
  int *ptr1 = tmp_0;
  tmp_1 = memory_allocation_failure_016_func_001(0);
  tmp_2 = (int *)malloc((unsigned int)tmp_1 * sizeof(int));
  int *ptr2 = tmp_2;
  *(ptr1 + 1) = 10;
  memory_allocation_failure_016_func_002(0);
  free((void *)memory_allocation_failure_016_gbl_ptr1);
  free((void *)memory_allocation_failure_016_gbl_ptr2);
  free((void *)ptr1);
  free((void *)ptr2);
  return;
}

void memory_allocation_failure_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: memory_allocation_failure_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: memory_allocation_failure_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: memory_allocation_failure_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: memory_allocation_failure_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: memory_allocation_failure_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: memory_allocation_failure_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: memory_allocation_failure_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: memory_allocation_failure_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: memory_allocation_failure_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: memory_allocation_failure_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: memory_allocation_failure_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: memory_allocation_failure_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: memory_allocation_failure_013();
  if (vflag == 14) goto _LOR_12;
  else 
    if (vflag == 888) _LOR_12: memory_allocation_failure_014();
  if (vflag == 15) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: memory_allocation_failure_015();
  if (vflag == 16) goto _LOR_14;
  else 
    if (vflag == 888) _LOR_14: memory_allocation_failure_016();
  return;
}

int not_return_001_func_001(int flag)
{
  int __retres;
  if (flag == 0) {
    __retres = 0;
    goto return_label;
  }
  else {
    __retres = 1;
    goto return_label;
  }
  return_label: return __retres;
}

void not_return_001(void)
{
  int ret;
  int tmp;
  tmp = rand();
  ret = not_return_001_func_001(tmp);
  sink = ret;
  return;
}

int not_return_002_func_001(int flag1, int flag2)
{
  int __retres;
  if (flag1 == 0) {
    if (flag2 == 0) {
      __retres = 0;
      goto return_label;
    }
    __retres = 1;
    goto return_label;
  }
  else {
    __retres = 0;
    goto return_label;
  }
  return_label: return __retres;
}

void not_return_002(void)
{
  int ret;
  int tmp;
  int tmp_0;
  tmp = rand();
  tmp_0 = rand();
  ret = not_return_002_func_001(tmp_0,tmp);
  sink = ret;
  return;
}

int not_return_003_func_001(int flag)
{
  int __retres;
  switch (flag) {
    case 1: __retres = 0;
    goto return_label;
    case 2: __retres = 1;
    goto return_label;
    case 3: __retres = 0;
    goto return_label;
    default: __retres = -1;
    goto return_label;
  }
  return_label: return __retres;
}

void not_return_003(void)
{
  int ret;
  int tmp;
  tmp = rand();
  ret = not_return_003_func_001(tmp);
  sink = ret;
  return;
}

int not_return_004_func_001(int flag)
{
  int __retres;
  int ret = 0;
  if (flag == 0) goto my_label;
  __retres = ret;
  goto return_label;
  my_label: ret ++;
  __retres = ret;
  return_label: return __retres;
}

void not_return_004(void)
{
  int ret;
  int tmp;
  tmp = rand();
  ret = not_return_004_func_001(tmp);
  sink = ret;
  return;
}

void not_return_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: not_return_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: not_return_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: not_return_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: not_return_004();
  return;
}

static int sink_2;
void null_pointer_001(void)
{
  int buf_0[5];
  int *p = buf_0;
  *p = 1;
  return;
}

void null_pointer_002(void)
{
  int ret;
  int buf_0[5] = {1, 2, 3, 4, 5};
  int *p = buf_0;
  ret = *p;
  sink_2 = ret;
  return;
}

void null_pointer_003(void)
{
  int buf_0[5];
  int **pp;
  int *p = buf_0;
  pp = & p;
  *(*pp) = 1;
  return;
}

void null_pointer_004(void)
{
  null_pointer_004_s_001 s_0;
  null_pointer_004_s_001 *p = & s_0;
  p->a = 1;
  return;
}

void null_pointer_005(void)
{
  null_pointer_005_uni_001 u;
  null_pointer_005_uni_001 *p = & u;
  p->s1.a = 1;
  return;
}

void null_pointer_006(void)
{
  int *p;
  int a_0 = 20;
  p = & a_0;
  *p = 1;
  return;
}

void null_pointer_007(void)
{
  int *p;
  int a_0 = 3;
  p = & a_0;
  *p = 1;
  return;
}

int null_pointer_008_glb_001[5];
int *null_pointer_008_func_001(void)
{
  int *__retres;
  __retres = null_pointer_008_glb_001;
  return __retres;
}

void null_pointer_008(void)
{
  int *p;
  p = null_pointer_008_func_001();
  *p = 1;
  return;
}

void null_pointer_009_func_001(int *p)
{
  *p = 1;
  return;
}

void null_pointer_009(void)
{
  int buf_0[5];
  null_pointer_009_func_001(buf_0);
  return;
}

void null_pointer_010(void)
{
  int buf_0[5];
  int *p1;
  int *p = buf_0;
  p1 = p;
  *p1 = 1;
  return;
}

void null_pointer_011(void)
{
  int buf_0[5];
  int *p1;
  int *p2;
  int *p = buf_0;
  p1 = p;
  p2 = p1;
  *p2 = 1;
  return;
}

void null_pointer_012(void)
{
  int buf_0[5];
  int *p = buf_0;
  *(p + 3) = 1;
  return;
}

int buf[5];
int *null_pointer_013_func_001(void)
{
  int *__retres;
  __retres = buf;
  return __retres;
}

void null_pointer_013(void)
{
  int *p;
  p = null_pointer_013_func_001();
  if (p != (int *)0) *p = 1;
  return;
}

int null_pointer_014_gbl = 10;
int *null_pointer_014_func_001(void)
{
  int *__retres;
  __retres = & null_pointer_014_gbl;
  return __retres;
}

void null_pointer_014(void)
{
  int *p;
  p = null_pointer_014_func_001();
  *p = 1;
  if (p != (int *)0) *p = 2;
  return;
}

static unsigned char a = (unsigned char)'a';
char *null_pointer_015_gbl_ptr;
void null_pointer_015_func_001(int len)
{
  null_pointer_015_gbl_ptr = (char *)0;
  if ((int)a == 'a') null_pointer_015_gbl_ptr = (char *)malloc(sizeof(char) * (unsigned int)(
                                                               len + 1));
  return;
}

void null_pointer_015(void)
{
  size_t tmp;
  char *str = (char *)"This is a string";
  tmp = strlen((char const *)str);
  null_pointer_015_func_001((int)tmp);
  strcpy(null_pointer_015_gbl_ptr,(char const *)str);
  free((void *)null_pointer_015_gbl_ptr);
  null_pointer_015_gbl_ptr = (char *)0;
  return;
}

long **null_pointer_016_gbl_doubleptr;
int null_pointer_016_func_001(int flag)
{
  int ret;
  if (flag == 0) ret = 0; else ret = 1;
  return ret;
}

void null_pointer_016_func_002(void)
{
  int i;
  int j;
  null_pointer_016_gbl_doubleptr = (long **)malloc((unsigned int)10 * sizeof(long *));
  i = 0;
  while (i < 10) {
    *(null_pointer_016_gbl_doubleptr + i) = (long *)malloc((unsigned int)10 * sizeof(long));
    i ++;
  }
  i = 0;
  while (i < 10) {
    j = 0;
    while (j < 10) {
      *(*(null_pointer_016_gbl_doubleptr + i) + j) = (long)i;
      j ++;
    }
    i ++;
  }
  return;
}

void null_pointer_016(void)
{
  int i;
  int j;
  int tmp;
  int tmp_0;
  int flag = 0;
  null_pointer_016_gbl_doubleptr = (long **)0;
  goto label;
  tmp = null_pointer_016_func_001(flag);
  if (tmp == 0) {
    i = 0;
    while (i < 10) {
      j = 0;
      while (j < 10) {
        *(*(null_pointer_016_gbl_doubleptr + i) + j) += (long)1;
        j ++;
      }
      free((void *)*(null_pointer_016_gbl_doubleptr + i));
      *(null_pointer_016_gbl_doubleptr + i) = (long *)0;
      i ++;
    }
    free((void *)null_pointer_016_gbl_doubleptr);
    null_pointer_016_gbl_doubleptr = (long **)0;
  }
  label: tmp_0 = null_pointer_016_func_001(flag);
  if (tmp_0 == 0) null_pointer_016_func_002();
  return;
}

char **null_pointer_017dst;
void null_pointer_017_func_001(void)
{
  int i;
  null_pointer_017dst = (char **)0;
  while (1) {
    null_pointer_017dst = (char **)malloc((unsigned int)5 * sizeof(char *));
    i = 0;
    while (i < 5) {
      *(null_pointer_017dst + i) = (char *)malloc((unsigned int)15 * sizeof(char));
      i ++;
    }
    break;
  }
  return;
}

void null_pointer_017(void)
{
  int i;
  null_pointer_017_func_001();
  i = 0;
  while (i < 5) {
    strcpy(*(null_pointer_017dst + i),"STRING");
    i ++;
  }
  while (1) {
    i = 0;
    while (i < 5) {
      free((void *)*(null_pointer_017dst + i));
      *(null_pointer_017dst + i) = (char *)0;
      i ++;
    }
    free((void *)null_pointer_017dst);
    null_pointer_017dst = (char **)0;
    break;
  }
  return;
}

void null_pointer_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: null_pointer_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: null_pointer_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: null_pointer_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: null_pointer_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: null_pointer_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: null_pointer_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: null_pointer_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: null_pointer_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: null_pointer_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: null_pointer_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: null_pointer_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: null_pointer_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: null_pointer_013();
  if (vflag == 14) goto _LOR_12;
  else 
    if (vflag == 888) _LOR_12: null_pointer_014();
  if (vflag == 15) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: null_pointer_015();
  if (vflag == 16) goto _LOR_14;
  else 
    if (vflag == 888) _LOR_14: null_pointer_016();
  if (vflag == 17) goto _LOR_15;
  else 
    if (vflag == 888) _LOR_15: null_pointer_017();
  return;
}

void overrun_st_001(void)
{
  char buf_0[5];
  buf_0[4] = (char)1;
  return;
}

void overrun_st_002(void)
{
  short buf_0[5];
  buf_0[4] = (short)1;
  return;
}

void overrun_st_003(void)
{
  int ret;
  int buf_0[5] = {1, 2, 3, 4, 5};
  ret = buf_0[4];
  return;
}

void overrun_st_004(void)
{
  int buf_0[5];
  buf_0[4] = 1;
  return;
}

void overrun_st_005(void)
{
  long buf_0[5];
  buf_0[4] = (long)1;
  return;
}

void overrun_st_006(void)
{
  float buf_0[5];
  buf_0[4] = (float)1.0;
  return;
}

void overrun_st_007(void)
{
  double buf_0[5];
  buf_0[4] = 1.0;
  return;
}

void overrun_st_008(void)
{
  int buf_0[5][6];
  buf_0[4][5] = 1;
  return;
}

void overrun_st_009(void)
{
  int buf_0[5][6][7];
  buf_0[4][5][6] = 1;
  return;
}

void overrun_st_010(void)
{
  int buf1[5];
  int buf2[5];
  int buf3[5];
  int buf4[5];
  int buf5[6];
  int *pbuf[5] = {buf1, buf2, buf3, buf4, buf5};
  *(pbuf[4] + 5) = 1;
  return;
}

void overrun_st_011(void)
{
  overrun_st_011_s_001 sbuf[5];
  sbuf[4].a = 1;
  return;
}

overrun_st_012_s_001 overrun_st_012_s_gbl;
void overrun_st_012(void)
{
  overrun_st_012_s_gbl.buf[4] = 1;
  return;
}

void overrun_st_013(void)
{
  int buf_0[5];
  int index_0 = 4;
  buf_0[index_0] = 1;
  return;
}

void overrun_st_014(void)
{
  int buf_0[5];
  int index_0;
  int tmp;
  tmp = rand();
  index_0 = tmp % 5;
  buf_0[index_0] = 1;
  return;
}

void overrun_st_015(void)
{
  int buf_0[6];
  int index_0 = 2;
  buf_0[2 * index_0 + 1] = 1;
  return;
}

void overrun_st_016(void)
{
  int buf_0[6];
  int index_0 = 2;
  buf_0[index_0 * index_0 + 1] = 1;
  return;
}

int overrun_st_017_func_001(void)
{
  int __retres;
  __retres = 4;
  return __retres;
}

void overrun_st_017(void)
{
  int buf_0[5];
  int tmp;
  tmp = overrun_st_017_func_001();
  buf_0[tmp] = 1;
  return;
}

int overrun_st_018_buf[5];
void overrun_st_018_func_001(int index_0)
{
  overrun_st_018_buf[index_0] = 1;
  return;
}

void overrun_st_018(void)
{
  overrun_st_018_func_001(4);
  return;
}

void overrun_st_019(void)
{
  int buf_0[5];
  int indexes[4] = {3, 5, 4, 6};
  int index_0 = 2;
  buf_0[indexes[index_0]] = 1;
  return;
}

void overrun_st_020(void)
{
  int buf_0[5];
  int index1;
  int index_0 = 4;
  index1 = index_0;
  buf_0[index1] = 1;
  return;
}

void overrun_st_021(void)
{
  int buf_0[5];
  int index1;
  int index2;
  int index_0 = 4;
  index1 = index_0;
  index2 = index1;
  buf_0[index2] = 1;
  return;
}

void overrun_st_022(void)
{
  char buf_0[5];
  char *p;
  p = buf_0;
  *(p + 4) = (char)1;
  return;
}

void overrun_st_023(void)
{
  short buf_0[5];
  short *p;
  p = buf_0;
  *(p + 4) = (short)1;
  return;
}

void overrun_st_024(void)
{
  int *p;
  int ret;
  int buf_0[5] = {1, 2, 3, 4, 5};
  p = buf_0;
  ret = *(p + 4);
  return;
}

void overrun_st_025(void)
{
  int buf_0[5];
  int *p;
  p = buf_0;
  *(p + 4) = 1;
  return;
}

void overrun_st_026(void)
{
  long buf_0[5];
  long *p;
  p = buf_0;
  *(p + 4) = (long)1;
  return;
}

void overrun_st_027(void)
{
  float buf_0[5];
  float *p;
  p = buf_0;
  *(p + 4) = (float)1;
  return;
}

void overrun_st_028(void)
{
  double buf_0[5];
  double *p;
  p = buf_0;
  *(p + 4) = (double)1;
  return;
}

void overrun_st_029(void)
{
  int buf_0[5];
  int *p;
  int **pp;
  p = buf_0;
  pp = & p;
  *(*pp + 4) = 1;
  return;
}

void overrun_st_030(void)
{
  int buf_0[5];
  int *p1;
  int *p2;
  p1 = buf_0;
  p2 = p1;
  *(p2 + 4) = 1;
  return;
}

int overrun_st_031_buf_gbl[5];
void overrun_st_031(void)
{
  int *p;
  p = overrun_st_031_buf_gbl;
  *(p + 4) = 1;
  return;
}

void overrun_st_032(void)
{
  int buf_0[5];
  int *p;
  int index_0 = 4;
  p = buf_0;
  *(p + index_0) = 1;
  return;
}

void overrun_st_033(void)
{
  int buf_0[5];
  int *p;
  int index_0;
  int tmp;
  p = buf_0;
  tmp = rand();
  index_0 = tmp % 5;
  *(p + index_0) = 1;
  return;
}

void overrun_st_034(void)
{
  int buf_0[6];
  int *p;
  int index_0 = 2;
  p = buf_0;
  *(p + (2 * index_0 + 1)) = 1;
  return;
}

void overrun_st_035(void)
{
  int buf_0[6];
  int *p;
  int index_0 = 2;
  p = buf_0;
  *(p + (index_0 * index_0 + 1)) = 1;
  return;
}

int overrun_st_036_func_001(void)
{
  int __retres;
  __retres = 4;
  return __retres;
}

void overrun_st_036(void)
{
  int buf_0[5];
  int *p;
  int tmp;
  p = buf_0;
  tmp = overrun_st_036_func_001();
  *(p + tmp) = 1;
  return;
}

void overrun_st_037_func_001(int index_0)
{
  int buf_0[5];
  int *p;
  p = buf_0;
  *(p + index_0) = 1;
  return;
}

void overrun_st_037(void)
{
  overrun_st_037_func_001(4);
  return;
}

void overrun_st_038(void)
{
  int buf_0[5];
  int *p;
  int indexes[4] = {3, 5, 4, 6};
  int index_0 = 2;
  p = buf_0;
  *(p + indexes[index_0]) = 1;
  return;
}

void overrun_st_039(void)
{
  int buf_0[5];
  int *p;
  int index1;
  int index_0 = 4;
  index1 = index_0;
  p = buf_0;
  *(p + index1) = 1;
  return;
}

void overrun_st_040(void)
{
  int buf_0[5];
  int *p;
  int index1;
  int index2;
  int index_0 = 4;
  index1 = index_0;
  index2 = index1;
  p = buf_0;
  *(p + index2) = 1;
  return;
}

void overrun_st_041(void)
{
  int buf_0[5];
  int i;
  i = 0;
  while (i < 5) {
    buf_0[i] = 1;
    i ++;
  }
  return;
}

void overrun_st_042(void)
{
  int buf_0[5][6];
  int i;
  int j;
  i = 0;
  while (i < 5) {
    j = 0;
    while (j < 6) {
      buf_0[i][j] = 1;
      j ++;
    }
    i ++;
  }
  return;
}

void overrun_st_043(void)
{
  int buf1[6];
  int buf2[6];
  int buf3[6];
  int buf4[6];
  int buf5[6];
  int i;
  int j;
  int *pbuf[5] = {buf1, buf2, buf3, buf4, buf5};
  i = 0;
  while (i < 5) {
    j = 0;
    while (j < 6) {
      *(pbuf[i] + j) = 1;
      j ++;
    }
    i ++;
  }
  return;
}

void overrun_st_044(void)
{
  int buf_0[5];
  int *p;
  int i;
  p = buf_0;
  i = 0;
  while (i < 5) {
    *p = 1;
    p ++;
    i ++;
  }
  return;
}

void overrun_st_045_func_001(int *buf_0)
{
  *(buf_0 + 4) = 1;
  return;
}

void overrun_st_045(void)
{
  int buf_0[5];
  overrun_st_045_func_001(buf_0);
  return;
}

void overrun_st_046_func_001(int *p)
{
  *(p + 4) = 1;
  return;
}

void overrun_st_046(void)
{
  int buf_0[5];
  overrun_st_046_func_001(buf_0);
  return;
}

void overrun_st_047_func_001(int *p)
{
  *(p + 4) = 1;
  return;
}

void overrun_st_047(void)
{
  int buf_0[5];
  overrun_st_047_func_001(buf_0);
  return;
}

void overrun_st_048_func_001(int *buf_0)
{
  *(buf_0 + 4) = 1;
  return;
}

void overrun_st_048(void)
{
  int buf_0[5];
  overrun_st_048_func_001(buf_0);
  return;
}

void overrun_st_049(void)
{
  int buf_0[5] = {1, 2, 3, 4, 5};
  buf_0[4] = 1;
  return;
}

void overrun_st_050(void)
{
  int buf_0[5][6] =
    {{1, 2, 3, 4, 5, 6},
     {1, 2, 3, 4, 5, 6},
     {1, 2, 3, 4, 5, 6},
     {1, 2, 3, 4, 5, 6},
     {1, 2, 3, 4, 5, 6}};
  buf_0[4][5] = 1;
  return;
}

void overrun_st_051(void)
{
  int buf1[5] = {1, 2, 3, 4, 5};
  int buf2[5] = {1, 2, 3, 4, 5};
  int buf3[5] = {1, 2, 3, 4, 5};
  int buf4[5] = {1, 2, 3, 4, 5};
  int buf5[6] = {1, 2, 3, 4, 5, 6};
  int *pbuf[5] = {buf1, buf2, buf3, buf4, buf5};
  *(pbuf[4] + 5) = 1;
  return;
}

void overrun_st_052(void)
{
  char buf_0[5] = {(char)'1', (char)'2', (char)'3', (char)'4', (char)'\000'};
  buf_0[4] = (char)1;
  return;
}

void overrun_st_053(void)
{
  char buf_0[8];
  int *p;
  p = (int *)(buf_0);
  *(p + 1) = 1;
  return;
}

int overrun_st_054_buf_gbl[5];
void overrun_st_054(void)
{
  char *p;
  p = (char *)(overrun_st_054_buf_gbl);
  *(p + 3) = (char)1;
  return;
}

void overrun_st_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: overrun_st_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: overrun_st_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: overrun_st_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: overrun_st_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: overrun_st_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: overrun_st_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: overrun_st_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: overrun_st_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: overrun_st_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: overrun_st_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: overrun_st_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: overrun_st_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: overrun_st_013();
  if (vflag == 14) goto _LOR_12;
  else 
    if (vflag == 888) _LOR_12: overrun_st_014();
  if (vflag == 15) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: overrun_st_015();
  if (vflag == 16) goto _LOR_14;
  else 
    if (vflag == 888) _LOR_14: overrun_st_016();
  if (vflag == 17) goto _LOR_15;
  else 
    if (vflag == 888) _LOR_15: overrun_st_017();
  if (vflag == 18) goto _LOR_16;
  else 
    if (vflag == 888) _LOR_16: overrun_st_018();
  if (vflag == 19) goto _LOR_17;
  else 
    if (vflag == 888) _LOR_17: overrun_st_019();
  if (vflag == 20) goto _LOR_18;
  else 
    if (vflag == 888) _LOR_18: overrun_st_020();
  if (vflag == 21) goto _LOR_19;
  else 
    if (vflag == 888) _LOR_19: overrun_st_021();
  if (vflag == 22) goto _LOR_20;
  else 
    if (vflag == 888) _LOR_20: overrun_st_022();
  if (vflag == 23) goto _LOR_21;
  else 
    if (vflag == 888) _LOR_21: overrun_st_023();
  if (vflag == 24) goto _LOR_22;
  else 
    if (vflag == 888) _LOR_22: overrun_st_024();
  if (vflag == 25) goto _LOR_23;
  else 
    if (vflag == 888) _LOR_23: overrun_st_025();
  if (vflag == 26) goto _LOR_24;
  else 
    if (vflag == 888) _LOR_24: overrun_st_026();
  if (vflag == 27) goto _LOR_25;
  else 
    if (vflag == 888) _LOR_25: overrun_st_027();
  if (vflag == 28) goto _LOR_26;
  else 
    if (vflag == 888) _LOR_26: overrun_st_028();
  if (vflag == 29) goto _LOR_27;
  else 
    if (vflag == 888) _LOR_27: overrun_st_029();
  if (vflag == 30) goto _LOR_28;
  else 
    if (vflag == 888) _LOR_28: overrun_st_030();
  if (vflag == 31) goto _LOR_29;
  else 
    if (vflag == 888) _LOR_29: overrun_st_031();
  if (vflag == 32) goto _LOR_30;
  else 
    if (vflag == 888) _LOR_30: overrun_st_032();
  if (vflag == 33) goto _LOR_31;
  else 
    if (vflag == 888) _LOR_31: overrun_st_033();
  if (vflag == 34) goto _LOR_32;
  else 
    if (vflag == 888) _LOR_32: overrun_st_034();
  if (vflag == 35) goto _LOR_33;
  else 
    if (vflag == 888) _LOR_33: overrun_st_035();
  if (vflag == 36) goto _LOR_34;
  else 
    if (vflag == 888) _LOR_34: overrun_st_036();
  if (vflag == 37) goto _LOR_35;
  else 
    if (vflag == 888) _LOR_35: overrun_st_037();
  if (vflag == 38) goto _LOR_36;
  else 
    if (vflag == 888) _LOR_36: overrun_st_038();
  if (vflag == 39) goto _LOR_37;
  else 
    if (vflag == 888) _LOR_37: overrun_st_039();
  if (vflag == 40) goto _LOR_38;
  else 
    if (vflag == 888) _LOR_38: overrun_st_040();
  if (vflag == 41) goto _LOR_39;
  else 
    if (vflag == 888) _LOR_39: overrun_st_041();
  if (vflag == 42) goto _LOR_40;
  else 
    if (vflag == 888) _LOR_40: overrun_st_042();
  if (vflag == 43) goto _LOR_41;
  else 
    if (vflag == 888) _LOR_41: overrun_st_043();
  if (vflag == 44) goto _LOR_42;
  else 
    if (vflag == 888) _LOR_42: overrun_st_044();
  if (vflag == 45) goto _LOR_43;
  else 
    if (vflag == 888) _LOR_43: overrun_st_045();
  if (vflag == 46) goto _LOR_44;
  else 
    if (vflag == 888) _LOR_44: overrun_st_046();
  if (vflag == 47) goto _LOR_45;
  else 
    if (vflag == 888) _LOR_45: overrun_st_047();
  if (vflag == 48) goto _LOR_46;
  else 
    if (vflag == 888) _LOR_46: overrun_st_048();
  if (vflag == 49) goto _LOR_47;
  else 
    if (vflag == 888) _LOR_47: overrun_st_049();
  if (vflag == 50) goto _LOR_48;
  else 
    if (vflag == 888) _LOR_48: overrun_st_050();
  if (vflag == 51) goto _LOR_49;
  else 
    if (vflag == 888) _LOR_49: overrun_st_051();
  if (vflag == 52) goto _LOR_50;
  else 
    if (vflag == 888) _LOR_50: overrun_st_052();
  if (vflag == 53) goto _LOR_51;
  else 
    if (vflag == 888) _LOR_51: overrun_st_053();
  if (vflag == 54) goto _LOR_52;
  else 
    if (vflag == 888) _LOR_52: overrun_st_054();
  return;
}

void pow_related_errors_001(void)
{
  double ans;
  double num = 1e2;
  double exponent = 1e2;
  ans = titcb_pow(num,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_002(void)
{
  double ans;
  double num = 1.004;
  double exponent = (double)3;
  ans = titcb_pow(num,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_003(void)
{
  int i;
  double ans;
  double arr[5] = {2.0, 1.2, 3.9, 1e3, 4.0};
  double exponent = (double)2;
  i = 0;
  while ((unsigned int)i < sizeof(arr) / sizeof(double)) {
    ans = titcb_pow(arr[i],exponent);
    i ++;
  }
  dsink = ans;
  return;
}

void pow_related_errors_004(void)
{
  int i;
  double ans;
  double arr[5] = {2.0, 1.2, 3.9, 1e3, 4.0};
  double *arr1 = arr;
  double **arr2 = & arr1;
  double exponent = (double)2;
  i = 0;
  while ((unsigned int)i < sizeof(arr) / sizeof(double)) {
    {
      double temp = *(*arr2 + i);
      ans = titcb_pow(temp,exponent);
    }
    i ++;
  }
  dsink = ans;
  return;
}

void pow_related_errors_005(void)
{
  int i;
  double ans;
  double arr[5] = {2.0, 1.2, 3.9, 1e3, 4.0};
  double *arr1 = arr;
  double exponent = (double)2;
  i = 0;
  while ((unsigned int)i < sizeof(arr) / sizeof(double)) {
    {
      double temp = *(arr1 + i);
      ans = titcb_pow(temp,exponent);
    }
    i ++;
  }
  dsink = ans;
  return;
}

double pow_related_errors_006_func_001(void)
{
  double __retres;
  __retres = 1e3;
  return __retres;
}

void pow_related_errors_006(void)
{
  double ans;
  double tmp;
  double exponent = 2.0;
  ;
  tmp = pow_related_errors_006_func_001();
  ans = titcb_pow(tmp,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_007(void)
{
  double ans;
  double ans1;
  double exponent = (double)2;
  pow_related_errors_007_s *newarr =
    malloc(sizeof(pow_related_errors_007_s));
  pow_related_errors_007_s *ptr_newarr =
    malloc(sizeof(pow_related_errors_007_s));
  newarr->arr[0] = (double)1000;
  ptr_newarr->arr[0] = (double)1000;
  ans = titcb_pow(newarr->arr[0],exponent);
  ans1 = titcb_pow(ptr_newarr->arr[0],exponent);
  free((void *)newarr);
  free((void *)ptr_newarr);
  dsink = ans + ans1;
  return;
}

void pow_related_errors_008(void)
{
  double ans;
  double exponent = (double)2;
  double base = - 34.50;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_009(void)
{
  double ans;
  double exponent = - 2.4;
  double base = - 34.50;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_010(void)
{
  double ans;
  double exponent = 2.4;
  double base = 0.565;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_011(void)
{
  double ans;
  double exponent = - 2.4;
  double base = 0.565;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_012(void)
{
  double ans;
  double base = - 0.36;
  double exponent = (double)20;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_013(void)
{
  double ans;
  double base = - 0.36;
  double exponent = (double)21;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_014(void)
{
  double ans;
  double base = 0.36;
  double exponent = (double)21;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_015(void)
{
  double ans;
  double base = - 1e6;
  double exponent = (double)21;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_016(void)
{
  double ans;
  double base = 1e3;
  double exponent = (double)21;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_017(void)
{
  double ans;
  double base = 1e3;
  double exponent = - 1e-3;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_018(void)
{
  double ans;
  double base = - 1e-3;
  double exponent = - 8e-3;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_019(void)
{
  double ans;
  double base = 0.0004;
  double exponent = - 1e-3;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_020(void)
{
  double ans;
  double base = - 0.0004;
  double exponent = - 1e-3;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_021(void)
{
  double ans;
  double base = (double)100;
  double exponent = - 1e-3;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_022(void)
{
  double ans;
  double base = (double)(-100);
  double exponent = - 1e-3;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_023(void)
{
  double ans;
  double base = 0.0004;
  double exponent = - 1e-3;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_024(void)
{
  double ans;
  double base = - 0.0004;
  double exponent = - 1e-3;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_025(void)
{
  double ans;
  double base = 1e3;
  double exponent = 0.04;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_026(void)
{
  double ans;
  double base = 1e12;
  double exponent = (double)7;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_027(void)
{
  double ans;
  double base = - 1e10;
  double exponent = (double)7;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_028(void)
{
  double ans;
  double base = - 1e2;
  double exponent = (double)(-7);
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_029(void)
{
  double ans;
  double base = - 1e-3;
  double exponent = - 1e-3;
  ans = titcb_pow(base,exponent);
  dsink = ans;
  return;
}

void pow_related_errors_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: pow_related_errors_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: pow_related_errors_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: pow_related_errors_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: pow_related_errors_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: pow_related_errors_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: pow_related_errors_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: pow_related_errors_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: pow_related_errors_008();
  if (vflag == 10) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: pow_related_errors_010();
  if (vflag == 11) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: pow_related_errors_011();
  if (vflag == 12) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: pow_related_errors_012();
  if (vflag == 13) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: pow_related_errors_013();
  if (vflag == 14) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: pow_related_errors_014();
  if (vflag == 15) goto _LOR_12;
  else 
    if (vflag == 888) _LOR_12: pow_related_errors_015();
  if (vflag == 16) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: pow_related_errors_016();
  if (vflag == 17) goto _LOR_14;
  else 
    if (vflag == 888) _LOR_14: pow_related_errors_017();
  if (vflag == 19) goto _LOR_15;
  else 
    if (vflag == 888) _LOR_15: pow_related_errors_019();
  if (vflag == 21) goto _LOR_16;
  else 
    if (vflag == 888) _LOR_16: pow_related_errors_021();
  if (vflag == 23) goto _LOR_17;
  else 
    if (vflag == 888) _LOR_17: pow_related_errors_023();
  if (vflag == 25) goto _LOR_18;
  else 
    if (vflag == 888) _LOR_18: pow_related_errors_025();
  if (vflag == 26) goto _LOR_19;
  else 
    if (vflag == 888) _LOR_19: pow_related_errors_026();
  if (vflag == 27) goto _LOR_20;
  else 
    if (vflag == 888) _LOR_20: pow_related_errors_027();
  if (vflag == 28) goto _LOR_21;
  else 
    if (vflag == 888) _LOR_21: pow_related_errors_028();
  return;
}

void ptr_subtraction_001(void)
{
  int buf1[10];
  int buf2[5];
  intptr_t offset;
  return;
}

void ptr_subtraction_002(void)
{
  int x = 10;
  int *ptr = & x;
  int *buf_0 = ptr;
  *buf_0 = 20;
  return;
}

void ptr_subtraction_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: ptr_subtraction_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: ptr_subtraction_002();
  return;
}

static int return_local_001_func_001_buf[5];
int *return_local_001_func_001(void)
{
  int *__retres;
  __retres = return_local_001_func_001_buf;
  return __retres;
}

void return_local_001(void)
{
  int *p;
  p = return_local_001_func_001();
  *(p + 3) = 1;
  return;
}

static int return_local_002_func_001_buf[5];
void return_local_002_func_001(int **pp)
{
  *pp = return_local_002_func_001_buf;
  return;
}

void return_local_002(void)
{
  int *p;
  return_local_002_func_001(& p);
  *(p + 3) = 1;
  return;
}

void return_local_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: return_local_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: return_local_002();
  return;
}

void sign_conv_001(void)
{
  char ret;
  unsigned char a_0 = (unsigned char)0x7f;
  ret = (char)a_0;
  sink = (int)ret;
  return;
}

void sign_conv_002(void)
{
  short ret;
  unsigned short a_0 = (unsigned short)0x7fff;
  ret = (short)a_0;
  sink = (int)ret;
  return;
}

void sign_conv_003(void)
{
  int ret;
  unsigned int a_0 = (unsigned int)0x7fffffff;
  ret = (int)a_0;
  sink = ret;
  return;
}

void sign_conv_004(void)
{
  long ret;
  unsigned long a_0 = (unsigned long)0x7fffffff;
  ret = (long)a_0;
  sink = (int)ret;
  return;
}

void sign_conv_005(void)
{
  unsigned char ret;
  char a_0 = (char)0x7f;
  ret = (unsigned char)a_0;
  sink = (int)ret;
  return;
}

void sign_conv_006(void)
{
  unsigned short ret;
  short a_0 = (short)0x7fff;
  ret = (unsigned short)a_0;
  sink = (int)ret;
  return;
}

void sign_conv_007(void)
{
  unsigned int ret;
  int a_0 = 0x7fffffff;
  ret = (unsigned int)a_0;
  sink = (int)ret;
  return;
}

void sign_conv_008(void)
{
  unsigned long ret;
  long a_0 = (long)0x7fffffff;
  ret = (unsigned long)a_0;
  sink = (int)ret;
  return;
}

void sign_conv_009(void)
{
  sign_conv_009_s_001 s_0;
  s_0.a = (unsigned int)0x0f;
  s_0.ret = (int)s_0.a;
  return;
}

void sign_conv_010(void)
{
  sign_conv_010_s_001 s_0;
  s_0.a = (int)0x0f;
  s_0.ret = (unsigned int)s_0.a;
  return;
}

void sign_conv_011(void)
{
  unsigned int ret;
  ret = (unsigned int)0x7fffffff;
  sink = (int)ret;
  return;
}

void sign_conv_012(void)
{
  int a_0;
  unsigned int ret;
  a_0 = rand();
  ret = (unsigned int)a_0;
  sink = (int)ret;
  return;
}

void sign_conv_013(void)
{
  unsigned int ret;
  int a_0 = -1;
  ret = (unsigned int)(5 * a_0 + 6);
  sink = (int)ret;
  return;
}

void sign_conv_014(void)
{
  unsigned int ret;
  int a_0 = 2;
  ret = (unsigned int)(a_0 * a_0 - 3);
  sink = (int)ret;
  return;
}

unsigned int sign_conv_015_gbl_ret;
int sign_conv_015_func_001(void)
{
  int __retres;
  __retres = 0x7fffffff;
  return __retres;
}

void sign_conv_015(void)
{
  int tmp;
  tmp = sign_conv_015_func_001();
  sign_conv_015_gbl_ret = (unsigned int)tmp;
  return;
}

int sign_conv_016_gbl_ret;
void sign_conv_016_func_001(int a_0)
{
  sign_conv_016_gbl_ret = a_0;
  return;
}

void sign_conv_016(void)
{
  sign_conv_016_func_001(0x7fffffff);
  return;
}

int sign_conv_017_gbl_buf[5] = {1, 2, 3, -4, 5};
int sign_conv_017_gbl_ret;
void sign_conv_017(void)
{
  sign_conv_017_gbl_ret = sign_conv_017_gbl_buf[3];
  return;
}

void sign_conv_018(void)
{
  int a1;
  unsigned int ret;
  int a_0 = 0x7fffffff;
  a1 = a_0;
  ret = (unsigned int)a1;
  sink = (int)ret;
  return;
}

void sign_conv_019(void)
{
  int a1;
  int a2;
  unsigned int ret;
  int a_0 = 0x7fffffff;
  a1 = a_0;
  a2 = a1;
  ret = (unsigned int)a2;
  sink = (int)ret;
  return;
}

void sign_conv_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: sign_conv_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: sign_conv_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: sign_conv_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: sign_conv_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: sign_conv_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: sign_conv_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: sign_conv_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: sign_conv_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: sign_conv_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: sign_conv_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: sign_conv_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: sign_conv_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: sign_conv_013();
  if (vflag == 14) goto _LOR_12;
  else 
    if (vflag == 888) _LOR_12: sign_conv_014();
  if (vflag == 15) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: sign_conv_015();
  if (vflag == 16) goto _LOR_14;
  else 
    if (vflag == 888) _LOR_14: sign_conv_016();
  if (vflag == 17) goto _LOR_15;
  else 
    if (vflag == 888) _LOR_15: sign_conv_017();
  if (vflag == 18) goto _LOR_16;
  else 
    if (vflag == 888) _LOR_16: sign_conv_018();
  if (vflag == 19) goto _LOR_17;
  else 
    if (vflag == 888) _LOR_17: sign_conv_019();
  return;
}

void st_underrun_001(void)
{
  char buf_0[10];
  size_t tmp;
  strcpy(buf_0,"my string");
  tmp = strlen((char const *)(buf_0));
  int len = (int)(tmp - (size_t)1);
  while ((int)buf_0[len] != 'Z') {
    len --;
    if (len < 0) break;
  }
  return;
}

void st_underrun_002_func_001(st_underrun_002_s_001 s_0)
{
  size_t tmp;
  tmp = strlen((char const *)(s_0.buf));
  int len = (int)(tmp - (size_t)1);
  while ((int)s_0.buf[len] != 'Z') {
    if (len <= 0) break;
    len --;
  }
  return;
}

void st_underrun_002(void)
{
  st_underrun_002_s_001 s_0;
  strcpy(s_0.buf,"STRING");
  st_underrun_002_func_001(s_0);
  return;
}

void st_underrun_003_func_001(st_underrun_003_s_001 *s_0)
{
  char buf_0[10] =
    {(char)'S',
     (char)'T',
     (char)'R',
     (char)'I',
     (char)'N',
     (char)'G',
     (char)'\000'};
  strcpy(s_0->buf,(char const *)(buf_0));
  return;
}

void st_underrun_003_func_002(st_underrun_003_s_001 *s_0)
{
  size_t tmp;
  tmp = strlen((char const *)(s_0->buf));
  int len = (int)(tmp - (size_t)1);
  while (1) {
    s_0->buf[len] = (char)'A';
    len --;
    if (len < 0) break;
    if (! ((int)s_0->buf[len] != 'Z')) break;
  }
  return;
}

void st_underrun_003(void)
{
  st_underrun_003_s_001 s_0;
  st_underrun_003_func_001(& s_0);
  st_underrun_003_func_002(& s_0);
  return;
}

void st_underrun_004_func_002(st_underrun_004_s_001 *s_0)
{
  char buf_0[10] =
    {(char)'S',
     (char)'T',
     (char)'R',
     (char)'I',
     (char)'N',
     (char)'G',
     (char)'\000'};
  strcpy(s_0->buf,(char const *)(buf_0));
  return;
}

st_underrun_004_s_001 st_underrun_004_func_001(st_underrun_004_s_001 *s_0)
{
  st_underrun_004_s_001 s1;
  size_t tmp;
  st_underrun_004_func_002(s_0);
  tmp = strlen((char const *)(s_0->buf));
  int len = (int)(tmp - (size_t)1);
  while (1) {
    s_0->buf[len] = (char)'B';
    s1.buf[len] = s_0->buf[len];
    len --;
    if (len < 0) break;
    if (! ((int)s_0->buf[len] != 'Z')) break;
  }
  return s1;
}

void st_underrun_004(void)
{
  st_underrun_004_s_001 s_0;
  st_underrun_004_s_001 s2;
  s2 = st_underrun_004_func_001(& s_0);
  sink = (int)s2.buf[0];
  return;
}

void st_underrun_005_func_001(st_underrun_005_s_001 s_0, int cnt)
{
  while ((int)s_0.buf[cnt] != 'Z') {
    cnt --;
    if (cnt > 0) st_underrun_005_func_001(s_0,cnt); else break;
  }
  return;
}

void st_underrun_005(void)
{
  char buf_0[10];
  st_underrun_005_s_001 s_0;
  strcpy(s_0.buf,"STRING !");
  buf_0[0] = s_0.buf[1];
  sink = (int)buf_0[0];
  return;
}

void st_underrun_006_func_001(st_underrun_006_s_001 s_0)
{
  return;
}

void st_underrun_006(void)
{
  st_underrun_006_s_001 s_0;
  void (*func)(st_underrun_006_s_001 );
  strcpy(s_0.buf,"STRING !!!!");
  func = & st_underrun_006_func_001;
  (*func)(s_0);
  return;
}

void st_underrun_007_func_001(st_underrun_007_s_001 *s_0)
{
  size_t tmp;
  tmp = strlen((char const *)(s_0->buf));
  int len = (int)(tmp - (size_t)1);
  char c = (char)0;
  while ((int)s_0->buf[len] != 'Z') {
    c = s_0->buf[len];
    if (len <= 0) break;
    len --;
  }
  sink = (int)c;
  return;
}

void st_underrun_007_func_002(st_underrun_007_s_001 s_0)
{
  s_0.buf[0] = (char)((int)s_0.buf[0] + 1);
  return;
}

void st_underrun_007(void)
{
  int flag = 0;
  st_underrun_007_s_001 s_0 =
    {.buf = {(char)0},
     .buf1 = {(char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0},
     .buf2 = {(char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0},
     .buf3 = {(char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0},
     .buf4 = {(char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0},
     .buf5 = {(char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0,
              (char)0}};
  s_0.buf[0] = (char)1;
  if (flag > 1) st_underrun_007_func_002(s_0);
  else st_underrun_007_func_001(& s_0);
  return;
}

void st_underrun_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: st_underrun_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: st_underrun_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: st_underrun_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: st_underrun_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: st_underrun_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: st_underrun_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: st_underrun_007();
  return;
}

void underrun_st_001(void)
{
  int ret;
  int buf_0[5] = {1, 2, 3, 4, 5};
  ret = buf_0[0];
  sink = ret;
  return;
}

void underrun_st_002(void)
{
  int buf_0[5];
  buf_0[0] = 1;
  sink = buf_0[idx];
  return;
}

void underrun_st_003(void)
{
  int buf_0[5];
  int index_0 = 0;
  buf_0[index_0] = 1;
  sink = buf_0[idx];
  return;
}

void underrun_st_004(void)
{
  int *p;
  int ret;
  int buf_0[5] = {1, 2, 3, 4, 5};
  p = & buf_0[1];
  ret = *(p - 1);
  sink = ret;
  return;
}

void underrun_st_005(void)
{
  int buf_0[5];
  int *p;
  p = & buf_0[1];
  *(p - 1) = 1;
  return;
}

void underrun_st_006(void)
{
  int buf_0[5];
  int *p;
  int index_0 = 1;
  p = & buf_0[1];
  *(p - index_0) = 1;
  return;
}

void underrun_st_007(void)
{
  int buf_0[5];
  int i;
  i = 4;
  while (i > -1) {
    buf_0[i] = 1;
    i --;
  }
  sink = buf_0[idx];
  return;
}

void underrun_st_008(void)
{
  int buf_0[5];
  int *p;
  int i;
  p = & buf_0[4];
  i = 0;
  while (i < 5) {
    *p = 1;
    p --;
    i ++;
  }
  return;
}

int underrun_st_009_gbl_buf[5];
void underrun_st_009(void)
{
  int i;
  i = 4;
  while (i > -1) {
    underrun_st_009_gbl_buf[i] = 1;
    i --;
  }
  return;
}

int underrun_st_010_gbl_buf[5];
void underrun_st_010(void)
{
  int *p;
  int i;
  p = & underrun_st_010_gbl_buf[4];
  i = 0;
  while (i < 5) {
    *p = 1;
    p --;
    i ++;
  }
  return;
}

int underrun_st_011_gbl_buf[5];
void underrun_st_011(void)
{
  int i = 4;
  while (i > -1) {
    underrun_st_011_gbl_buf[i] = 1;
    i --;
  }
  return;
}

int underrun_st_012_gbl_buf[5];
void underrun_st_012(void)
{
  int *p;
  p = & underrun_st_012_gbl_buf[4];
  int i = 4;
  while (i > -1) {
    *p = 1;
    p --;
    i --;
  }
  return;
}

int underrun_st_013_gbl_buf[5];
void underrun_st_013(void)
{
  int i = 4;
  int var = 0;
  while (i > -1) {
    if (var == 0) underrun_st_013_gbl_buf[i] = 1;
    i --;
  }
  return;
}

void underrun_st_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: underrun_st_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: underrun_st_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: underrun_st_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: underrun_st_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: underrun_st_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: underrun_st_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: underrun_st_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: underrun_st_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: underrun_st_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: underrun_st_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: underrun_st_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: underrun_st_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: underrun_st_013();
  return;
}

long **uninit_memory_access_009_doubleptr_gbl;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_23(char const * restrict format, unsigned long param0);

void uninit_memory_access_001(void)
{
  unsigned long *ret;
  unsigned long a_0 = (unsigned long)10;
  ret = & a_0;
  printf("%lu ",*ret); /* printf_va_23 */
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_24(char const * restrict format, double param0);

void uninit_memory_access_002(void)
{
  double *a_0 = calloc((size_t)3,sizeof(double));
  if (a_0 != (double *)0) {
    *(a_0 + 1) = 10.00000;
    printf("%lf ",*(a_0 + 1)); /* printf_va_24 */
    free((void *)a_0);
  }
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param1 + (0 ..)), *(param0 + (0 ..));
 */
int printf_va_25(char const * restrict format, char *param0, char *param1);

void uninit_memory_access_003(void)
{
  char *str1 = calloc((size_t)25,sizeof(char));
  char *str2 = (char *)"THIS IS STRING";
  if (str1 != (char *)0) {
    strcpy(str1,(char const *)str2);
    printf("%s %s\n",str1,str2); /* printf_va_25 */
    free((void *)str1);
  }
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_26(char const * restrict format, int param0);

void uninit_memory_access_004(void)
{
  short **ptr = (short **)0;
  short *p1 = calloc((size_t)10,sizeof(short));
  short *p2 = (short *)0;
  if (p1 != (short *)0) {
    *p1 = (short)20;
    p2 = p1;
  }
  ptr = & p2;
  printf("%d \n",(int)*(*ptr)); /* printf_va_26 */
  free((void *)p1);
  return;
}

void uninit_memory_access_005(void)
{
  int i;
  int j;
  int k;
  int arr1[2][3][4];
  int arr[2][3][4] =
    {{{1, 2, 3, 4}, {12, 22, 32, 42}, {13, 23, 33, 43}},
     {{21, 22, 23, 24}, {31, 32, 33, 34}, {41, 42, 43, 44}}};
  i = 0;
  while (i < 2) {
    j = 0;
    while (j < 3) {
      k = 0;
      while (k < 4) {
        arr1[i][j][k] = arr[i][j][k];
        k ++;
      }
      j ++;
    }
    i ++;
  }
  k = arr1[1][2][3];
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_27(char const * restrict format);

void uninit_memory_access_006_func_001(char *dst, char const *src)
{
  if (src == (char const *)0) {
    printf("Null Assignment:\n"); /* printf_va_27 */
    goto return_label;
  }
  else {
    while ((int)*src != '\000') {
      *dst = *src;
      src ++;
      dst ++;
    }
    *dst = (char)'\000';
  }
  return_label: return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_28(char const * restrict format, char *param0);

void uninit_memory_access_006(void)
{
  char *str1 = calloc((size_t)25,sizeof(char));
  char *str2 = (char *)"STRING";
  uninit_memory_access_006_func_001(str1,(char const *)str2);
  printf("%s\n",str1); /* printf_va_28 */
  return;
}

void uninit_memory_access_007_func_001(uninit_memory_access_007_s_001 *st)
{
  memset((void *)st,0,sizeof(*st));
  st->a = 1;
  return;
}

void uninit_memory_access_007_func_002(uninit_memory_access_007_s_001 *st)
{
  int i;
  int temp = 0;
  i = 0;
  while (i < 10) {
    temp += st->arr[i];
    i ++;
  }
  return;
}

void uninit_memory_access_007_func_003(uninit_memory_access_007_s_001 *st)
{
  st->b = 10;
  st->c = 20;
  return;
}

void uninit_memory_access_007_func_004(int num)
{
  int temp = 0;
  if (num != 0) temp = num;
  sink = temp;
  return;
}

void uninit_memory_access_007(void)
{
  uninit_memory_access_007_s_001 st;
  uninit_memory_access_007_func_001(& st);
  uninit_memory_access_007_func_002(& st);
  uninit_memory_access_007_func_003(& st);
  uninit_memory_access_007_func_004(st.a);
  return;
}

uninit_memory_access_008_s_001 *uninit_memory_access_008_func_001(void)
{
  uninit_memory_access_008_s_001 *ret =
    malloc((unsigned int)5 * sizeof(uninit_memory_access_008_s_001));
  if (ret != (uninit_memory_access_008_s_001 *)0) {
    ret->a = (int)0x0f;
    ret->b = (int)0x0f;
  }
  return ret;
}

void uninit_memory_access_008(void)
{
  uninit_memory_access_008_s_001 *s_0 = (uninit_memory_access_008_s_001 *)0;
  s_0 = uninit_memory_access_008_func_001();
  if (s_0 != (uninit_memory_access_008_s_001 *)0) {
    s_0->b = (int)((int)s_0->a + 10);
    free((void *)s_0);
  }
  return;
}

int uninit_memory_access_009_func_001(int flag)
{
  int ret;
  if (flag == 0) ret = 0; else ret = 1;
  return ret;
}

void uninit_memory_access_009_func_002(void)
{
  int i;
  int j;
  uninit_memory_access_009_doubleptr_gbl = (long **)malloc((unsigned int)10 * sizeof(long *));
  i = 0;
  while (i < 10) {
    *(uninit_memory_access_009_doubleptr_gbl + i) = (long *)malloc((unsigned int)10 * sizeof(long));
    i ++;
  }
  i = 0;
  while (i < 10) {
    j = 0;
    while (j < 10) {
      *(*(uninit_memory_access_009_doubleptr_gbl + i) + j) = (long)i;
      j ++;
    }
    i ++;
  }
  return;
}

void uninit_memory_access_009(void)
{
  int i;
  int j;
  int tmp;
  int tmp_0;
  int flag = 0;
  tmp = uninit_memory_access_009_func_001(flag);
  if (tmp == 0) uninit_memory_access_009_func_002();
  tmp_0 = uninit_memory_access_009_func_001(flag);
  if (tmp_0 == 0) {
    i = 0;
    while (i < 10) {
      j = 0;
      while (j < 10) {
        *(*(uninit_memory_access_009_doubleptr_gbl + i) + j) += (long)1;
        j ++;
      }
      free((void *)*(uninit_memory_access_009_doubleptr_gbl + i));
      *(uninit_memory_access_009_doubleptr_gbl + i) = (long *)0;
      i ++;
    }
    free((void *)uninit_memory_access_009_doubleptr_gbl);
    uninit_memory_access_009_doubleptr_gbl = (long **)0;
  }
  return;
}

uninit_memory_access_010_s_001 volatile *uninit_memory_access_010_s_001_arr_gbl;
void uninit_memory_access_010_func_001(unsigned int devno)
{
  uninit_memory_access_010_s_001_arr_gbl = (uninit_memory_access_010_s_001 volatile *)malloc
  ((unsigned int)5 * sizeof(uninit_memory_access_010_s_001));
  if (uninit_memory_access_010_s_001_arr_gbl != (uninit_memory_access_010_s_001 volatile *)0) {
    uninit_memory_access_010_s_001_arr_gbl->csr = (unsigned short)0x2;
    while (1) {
      uninit_memory_access_010_s_001_arr_gbl->data = (unsigned short)0x2;
      if ((int)uninit_memory_access_010_s_001_arr_gbl->csr & 0x1) uninit_memory_access_010_s_001_arr_gbl->csr = (unsigned short)0x4;
      if (! (((int)uninit_memory_access_010_s_001_arr_gbl->csr & (0x2 | 0x1)) == 0)) 
        break;
    }
  }
  return;
}

void uninit_memory_access_010(void)
{
  uninit_memory_access_010_func_001((unsigned int)1);
  if (uninit_memory_access_010_s_001_arr_gbl != (uninit_memory_access_010_s_001 volatile *)0) {
    unsigned short data = uninit_memory_access_010_s_001_arr_gbl->data;
    if ((int)data < 32767) uninit_memory_access_010_s_001_arr_gbl->data = (unsigned short)(
                           (int)data + 1);
    free((void *)uninit_memory_access_010_s_001_arr_gbl);
  }
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    requires
      \valid(s + (0 .. n - 1)) ∨
      \valid(s + (0 .. format_length(format) - 1));
    assigns \result, *(s + (0 ..));
    assigns \result
      \from (indirect: n), (indirect: *(format + (0 ..))),
            (indirect: *(param0 + (0 ..)));
    assigns *(s + (0 ..))
      \from (indirect: n), (indirect: *(format + (0 ..))), *(param0 + (0 ..));
 */
int snprintf_va_2(char * restrict s, size_t n, char const * restrict format,
                  char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_29(char const * restrict format, char *param0);

void uninit_memory_access_011_func_001(char const *msg)
{
  char buffer[max_buffer_0];
  char const *error_log = msg;
  snprintf(buffer,sizeof(buffer),"Error: %s",(char *)error_log); /* snprintf_va_2 */
  printf(" test %s\n",buffer); /* printf_va_29 */
  return;
}

void uninit_memory_access_011(void)
{
  char *str = (char *)"STRING";
  uninit_memory_access_011_func_001((char const *)str);
  return;
}

void uninit_memory_access_012(void)
{
  uninit_memory_access_012_s_001 *s1;
  uninit_memory_access_012_s_001 s_0;
  s1 = (uninit_memory_access_012_s_001 *)calloc((size_t)1,
                                                sizeof(uninit_memory_access_012_s_001));
  if (s1 != (uninit_memory_access_012_s_001 *)0) {
    s1->int_a = 10;
    s1->short_b = (short)20;
    s1->pad = (short)20;
    memcpy((void *)(& s_0),(void const *)s1,
           sizeof(uninit_memory_access_012_s_001));
    free((void *)s1);
  }
  return;
}

void uninit_memory_access_013(void)
{
  int i;
  uninit_memory_access_013_s_001 *s1;
  uninit_memory_access_013_s_001 s_0;
  s1 = (uninit_memory_access_013_s_001 *)calloc((size_t)1,
                                                sizeof(uninit_memory_access_013_s_001));
  s1->int_a = 10;
  s1->int_c = 20;
  s1->bool_b = true;
  i = 0;
  while (i < 3) {
    s1->dummy[i] = false;
    i ++;
  }
  memcpy((void *)(& s_0),(void const *)s1,
         sizeof(uninit_memory_access_013_s_001));
  free((void *)s1);
  s1 = (uninit_memory_access_013_s_001 *)0;
  return;
}

uninit_memory_access_014_u_001 *uninit_memory_access_014_func_001(void)
{
  uninit_memory_access_014_u_001 *__retres;
  uninit_memory_access_014_u_001 *u;
  int flag = rand();
  flag = 1;
  switch (flag) {
    case 1:
    {
      u = (uninit_memory_access_014_u_001 *)calloc((size_t)1,
                                                   sizeof(uninit_memory_access_014_u_001));
      u->a = 40;
      __retres = u;
      goto return_label;
    }
    case 2:
    {
      u = (uninit_memory_access_014_u_001 *)calloc((size_t)2,
                                                   sizeof(uninit_memory_access_014_u_001));
      u->a = 20;
      __retres = u;
      goto return_label;
    }
    case 3:
    {
      u = (uninit_memory_access_014_u_001 *)calloc((size_t)3,
                                                   sizeof(uninit_memory_access_014_u_001));
      u->a = 30;
      __retres = u;
      goto return_label;
    }
    default: __retres = (uninit_memory_access_014_u_001 *)(-1);
    goto return_label;
  }
  return_label: return __retres;
}

void uninit_memory_access_014(void)
{
  uninit_memory_access_014_u_001 *p;
  int ret = 0;
  p = uninit_memory_access_014_func_001();
  if (p != (uninit_memory_access_014_u_001 *)0) {
    ret = p->b;
    free((void *)p);
    p = (uninit_memory_access_014_u_001 *)0;
  }
  sink = ret;
  return;
}

int (*uninit_memory_access_015_func_001(void))[4]
{
  int (*p)[4];
  int i;
  int j;
  int arr[4][4] =
    {{1, 2, 3, 4}, {11, 22, 33, 44}, {33, 44, 55, 66}, {55, 66, 77, 88}};
  p = (int (*)[4])malloc(sizeof(arr));
  memcpy((void *)p,(void const *)(arr),sizeof(arr));
  i = 0;
  while (i < 4) {
    j = 0;
    while (j < 4) {
      (*(p + i))[j] += (*(p + i))[j];
      j ++;
    }
    i ++;
  }
  return p;
}

void uninit_memory_access_015(void)
{
  int (*ptr)[4];
  ptr = uninit_memory_access_015_func_001();
  free((void *)ptr);
  ptr = (int (*)[4])0;
  return;
}

void uninit_memory_access_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: uninit_memory_access_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: uninit_memory_access_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: uninit_memory_access_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: uninit_memory_access_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: uninit_memory_access_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: uninit_memory_access_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: uninit_memory_access_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: uninit_memory_access_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: uninit_memory_access_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: uninit_memory_access_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: uninit_memory_access_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: uninit_memory_access_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: uninit_memory_access_013();
  if (vflag == 14) goto _LOR_12;
  else 
    if (vflag == 888) _LOR_12: uninit_memory_access_014();
  if (vflag == 15) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: uninit_memory_access_015();
  return;
}

char **uninit_pointer_016_gbl_doubleptr;
void uninit_pointer_001(void)
{
  int ret;
  int a_0 = 5;
  int *p = & a_0;
  ret = *p;
  sink = ret;
  return;
}

void uninit_pointer_002(void)
{
  int a_0 = 30;
  int *p = & a_0;
  *p = 1;
  return;
}

void uninit_pointer_003(void)
{
  int ret;
  int **pp = (int **)0;
  int *p = (int *)0;
  int a_0 = 20;
  p = & a_0;
  pp = & p;
  ret = *(*pp);
  sink = ret;
  return;
}

void uninit_pointer_004_func_001(int *p)
{
  int ret = 10;
  *p = ret;
  sink = ret;
  return;
}

void uninit_pointer_004(void)
{
  int a_0 = 10;
  int *p = & a_0;
  uninit_pointer_004_func_001(p);
  return;
}

void uninit_pointer_005_func_001(int **pbuf)
{
  int ret;
  int buf1[6] = {1, 2, 3, 4, 5, 6};
  int buf2[6] = {1, 2, 3, 4, 5, 6};
  int buf3[6] = {1, 2, 3, 4, 5, 6};
  int buf4[6] = {1, 2, 3, 4, 5, 6};
  int buf5[6] = {1, 2, 3, 4, 5, 6};
  *(pbuf + 0) = buf1;
  *(pbuf + 1) = buf2;
  *(pbuf + 2) = buf3;
  *(pbuf + 3) = buf4;
  *(pbuf + 4) = buf5;
  ret = *(*(pbuf + 1) + 1);
  sink = ret;
  return;
}

void uninit_pointer_005(void)
{
  int *pbuf[5];
  uninit_pointer_005_func_001(pbuf);
  return;
}

void uninit_pointer_006_func_001(int **pp)
{
  *(*pp) = 1;
  return;
}

void uninit_pointer_006(void)
{
  int a_0 = 10;
  int *p = & a_0;
  uninit_pointer_006_func_001(& p);
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_30(char const * restrict format, int param0);

void uninit_pointer_007(void)
{
  int i;
  char *buf1 = strdup("String1");
  char *buf2 = strdup("String2");
  char *buf3 = strdup("String3");
  char *buf4 = strdup("String4");
  char *buf5 = strdup("String5");
  if (! buf1) goto return_label;
  else 
    if (! buf2) goto return_label;
    else 
      if (! buf3) goto return_label;
      else 
        if (! buf4) goto return_label;
        else 
          if (! buf5) goto return_label;
  char **pbuf[5] = {& buf1, & buf2, & buf3, & buf4, & buf5};
  int j = 4;
  i = 0;
  while (i < 5) {
    *(*(pbuf[i]) + j) = (char)'a';
    printf("uninit %c \n",(int)*(*(pbuf[i]) + j)); /* printf_va_30 */
    i ++;
  }
  free((void *)buf1);
  free((void *)buf2);
  free((void *)buf3);
  free((void *)buf4);
  free((void *)buf5);
  return_label: return;
}

void uninit_pointer_008_func_001(uninit_pointer_008_s_001 *p)
{
  int ret = 10;
  p->uninit = ret;
  return;
}

void uninit_pointer_008(void)
{
  uninit_pointer_008_s_001 s_0;
  s_0.a = 1;
  s_0.b = 1;
  s_0.uninit = 1;
  uninit_pointer_008_func_001(& s_0);
  return;
}

int uninit_pointer_009_func_001(int flag)
{
  int ret;
  if (flag == 0) ret = 0; else ret = flag + 1;
  return ret;
}

void uninit_pointer_009(void)
{
  char *buf_0;
  char buf1[25];
  int tmp;
  int tmp_0;
  int flag = 1;
  tmp = uninit_pointer_009_func_001(flag);
  if (tmp > 0) buf_0 = (char *)"This is a string";
  tmp_0 = uninit_pointer_009_func_001(flag);
  if (tmp_0 > 0) strcpy(buf1,(char const *)buf_0);
  return;
}

void uninit_pointer_010_func_001(void *vptr_0)
{
  char **cptr = (char **)vptr_0;
  char *buf_0 = (char *)"String";
  buf_0 = *cptr;
  sink = (int)*(buf_0 + idx);
  return;
}

void uninit_pointer_010(void)
{
  void *buf1;
  buf1 = (void *)"String Test";
  uninit_pointer_010_func_001((void *)(& buf1));
  return;
}

void uninit_pointer_011(void)
{
  int i;
  unsigned int *ptr = (unsigned int *)0;
  unsigned int a_0 = (unsigned int)0;
  ptr = (unsigned int *)malloc((unsigned int)10 * sizeof(unsigned int *));
  if (ptr != (unsigned int *)0) {
    while (1) {
      i = 0;
      while (i < 10) {
        *(ptr + i) = (unsigned int)i;
        i ++;
      }
      break;
    }
    while (1) {
      i = 0;
      while (i < 10) {
        a_0 += *(ptr + i);
        i ++;
      }
      break;
    }
  }
  return;
}

void uninit_pointer_012(void)
{
  float arr[10];
  int i;
  float *fptr = (float *)0;
  fptr = arr;
  i = 0;
  while (i < 10) {
    *(fptr + i) = (float)i;
    i ++;
  }
  i = 0;
  while (i < 10) {
    *(fptr + i) += (float)1;
    arr[i] = *(fptr + i);
    i ++;
  }
  return;
}

void uninit_pointer_013(void)
{
  int i;
  int j;
  int **ptr = malloc((unsigned int)3 * sizeof(int *));
  i = 0;
  while (i < 3) {
    *(ptr + i) = (int *)malloc((unsigned int)3 * sizeof(int));
    i ++;
  }
  int arr[3][3] = {{1, 2, 3}, {11, 12, 13}, {21, 22, 23}};
  i = 0;
  while (i < 3) {
    j = 0;
    while (j < 3) {
      *(*(ptr + i) + j) = arr[i][j];
      j ++;
    }
    free((void *)*(ptr + i));
    *(ptr + i) = (int *)0;
    i ++;
  }
  free((void *)ptr);
  ptr = (int **)0;
  return;
}

uninit_pointer_014_s_001 *s;
void uninit_pointer_014_func_001(int flag)
{
  switch (flag) {
    case 1:
    {
      s = (uninit_pointer_014_s_001 *)calloc((size_t)1,
                                             sizeof(uninit_pointer_014_s_001));
      if (s != (uninit_pointer_014_s_001 *)0) {
        s->a = 10;
        s->b = 10;
        s->uninit = 10;
      }
      break;
    }
    case 2:
    {
      s = (uninit_pointer_014_s_001 *)calloc((size_t)1,
                                             sizeof(uninit_pointer_014_s_001));
      if (s != (uninit_pointer_014_s_001 *)0) {
        s->a = 20;
        s->b = 20;
        s->uninit = 20;
      }
      break;
    }
    default: break;
  }
  return;
}

void uninit_pointer_014(void)
{
  uninit_pointer_014_s_001 r;
  uninit_pointer_014_func_001(1);
  if (s != (uninit_pointer_014_s_001 *)0) {
    r = *s;
    free((void *)s);
  }
  r.a = 0;
  sink = r.a;
  return;
}

void uninit_pointer_015_func_001(int *ptr)
{
  values val = ONE;
  *ptr = (int)val;
  return;
}

void uninit_pointer_015(void)
{
  int a_0 = 0;
  int *ptr = & a_0;
  uninit_pointer_015_func_001(ptr);
  return;
}

int uninit_pointer_016_func_001(int flag)
{
  int ret;
  if (flag == 0) ret = 0; else ret = 1;
  return ret;
}

void uninit_pointer_016_func_002(void)
{
  int i;
  int tmp_1;
  tmp_1 = uninit_pointer_016_func_001(0);
  if (tmp_1 == 0) {
    uninit_pointer_016_gbl_doubleptr = (char **)malloc((unsigned int)10 * sizeof(char *));
    i = 0;
    while (i < 10) {
      *(uninit_pointer_016_gbl_doubleptr + i) = (char *)malloc((unsigned int)10 * sizeof(char));
      strcpy(*(uninit_pointer_016_gbl_doubleptr + i),"STRING00");
      i ++;
    }
  }
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_31(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_32(char const * restrict format, char *param0);

void uninit_pointer_016(void)
{
  int i;
  int tmp_0;
  int flag = 0;
  char *s_0 = malloc((unsigned int)10 * sizeof(char));
  tmp_0 = uninit_pointer_016_func_001(flag);
  if (tmp_0 == 0) uninit_pointer_016_func_002();
  if (uninit_pointer_016_gbl_doubleptr != (char **)0) {
    i = 0;
    while (i < 10) {
      if (*(uninit_pointer_016_gbl_doubleptr + i) != (char *)0) {
        if (i == 7) {
          printf("unint p %s \n",*(uninit_pointer_016_gbl_doubleptr + i)); /* printf_va_31 */
          strcpy(s_0,(char const *)*(uninit_pointer_016_gbl_doubleptr + i));
          printf("unint p %s \n",s_0); /* printf_va_32 */
        }
        free((void *)*(uninit_pointer_016_gbl_doubleptr + i));
      }
      i ++;
    }
    free((void *)uninit_pointer_016_gbl_doubleptr);
    free((void *)s_0);
  }
  return;
}

void uninit_pointer_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: uninit_pointer_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: uninit_pointer_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: uninit_pointer_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: uninit_pointer_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: uninit_pointer_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: uninit_pointer_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: uninit_pointer_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: uninit_pointer_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: uninit_pointer_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: uninit_pointer_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: uninit_pointer_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: uninit_pointer_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: uninit_pointer_013();
  if (vflag == 14) goto _LOR_12;
  else 
    if (vflag == 888) _LOR_12: uninit_pointer_014();
  if (vflag == 15) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: uninit_pointer_015();
  if (vflag == 16) goto _LOR_14;
  else 
    if (vflag == 888) _LOR_14: uninit_pointer_016();
  return;
}

void uninit_var_001(void)
{
  int ret;
  int a_0 = 0;
  ret = a_0;
  sink = ret;
  return;
}

void uninit_var_002(void)
{
  int ret;
  int buf_0[5] = {1, 2, 3, 4, 5};
  ret = buf_0[3];
  sink = ret;
  return;
}

void uninit_var_003(void)
{
  int ret;
  int buf_0[5][6] =
    {{1, 2, 3, 4, 5, 6},
     {11, 12, 13, 14, 15, 16},
     {21, 22, 23, 24, 25, 26},
     {31, 32, 33, 34, 35, 36},
     {41, 42, 43, 44, 45, 46}};
  ret = buf_0[1][1];
  sink = ret;
  return;
}

static int const UNINIT_VAR_004_TRUE = 1;
static int const UNINIT_VAR_004_FALSE = 0;
void uninit_var_004(void)
{
  float dvar;
  float dvar1;
  if (UNINIT_VAR_004_TRUE) dvar = (float)10.0;
  else 
    if (UNINIT_VAR_004_FALSE == 0) dvar1 = (float)25.8;
    else {
      dvar1 = (float)2.2;
      dvar = dvar1;
    }
  dsink = (double)dvar;
  return;
}

int uninit_var_005_func_001(void)
{
  int ret;
  ret = 1;
  return ret;
}

void uninit_var_005(void)
{
  int a_0;
  a_0 = uninit_var_005_func_001();
  sink = a_0;
  return;
}

void uninit_var_006(void)
{
  long a_0;
  int flag = 10;
  if (flag == 10) {
    a_0 = (long)1;
    long tmp = a_0;
  }
  else {
    a_0 = (long)5;
    long tmp_3 = a_0;
  }
  return;
}

void uninit_var_007(void)
{
  uninit_var_007_s_001 s_0;
  int ret;
  s_0.a = 1;
  s_0.b = 1;
  s_0.uninit = 1;
  ret = s_0.uninit;
  sink = ret;
  return;
}

int uninit_var_008_func_001(int a_0);

static int uninit_var_008_func_001_ret = 10;
int uninit_var_008_func_001(int a_0)
{
  uninit_var_008_func_001_ret -= a_0;
  return uninit_var_008_func_001_ret;
}

void uninit_var_008(void);

static int uninit_var_008_flag = 1;
static int uninit_var_008_data;
void uninit_var_008(void)
{
  while (1) {
    int tmp;
    tmp = uninit_var_008_func_001(uninit_var_008_flag);
    if (! (tmp > 0)) break;
    uninit_var_008_data += uninit_var_008_flag;
  }
  return;
}

void uninit_var_009_func_001(char *buf_0)
{
  char ret[17] =
    {(char)'T',
     (char)'h',
     (char)'i',
     (char)'s',
     (char)' ',
     (char)'i',
     (char)'s',
     (char)' ',
     (char)'a',
     (char)' ',
     (char)'s',
     (char)'t',
     (char)'r',
     (char)'i',
     (char)'n',
     (char)'g',
     (char)'\000'};
  strcpy(buf_0,(char const *)(ret));
  return;
}

void uninit_var_009(void)
{
  char buf_0[25];
  uninit_var_009_func_001(buf_0);
  return;
}

void uninit_var_010_func_001(int (*buf_0)[6])
{
  int i;
  int j;
  int ret[5][6] =
    {{1, 2, 3, 4, 5, 6},
     {11, 12, 13, 14, 15, 16},
     {21, 22, 23, 24, 25, 26},
     {31, 32, 33, 34, 35, 36},
     {41, 42, 43, 44, 45, 46}};
  i = 0;
  while (i < 5) {
    j = 0;
    while (j < 6) {
      (*(buf_0 + i))[j] = ret[i][j];
      j ++;
    }
    i ++;
  }
  return;
}

void uninit_var_010(void)
{
  int buf_0[5][6];
  uninit_var_010_func_001(buf_0);
  return;
}

int uninit_var_011_func_001(int *arr1, int a_0)
{
  int ret = 0;
  if (*(arr1 + 0) > 0) ret = a_0 + *(arr1 + 1);
  return ret;
}

void uninit_var_011(void)
{
  int p;
  int arr[6] = {1, 2, 3, 4, 5, 6};
  p = uninit_var_011_func_001(arr,(int)(sizeof(arr) / sizeof(int)));
  sink = p;
  return;
}

int uninit_var_012_func_001(uninit_var_012_s_001 s1)
{
  int __retres;
  switch ((s1.a + s1.b) + s1.uninit) {
    case (unsigned int)5: {
                            __retres = 5;
                            goto return_label;
                          }
    case (unsigned int)6: {
                            __retres = 6;
                            goto return_label;
                          }
    case (unsigned int)7: {
                            __retres = 7;
                            goto return_label;
                          }
    default: __retres = -1;
    goto return_label;
  }
  return_label: return __retres;
}

void uninit_var_012(void)
{
  uninit_var_012_s_001 s_0;
  uninit_var_012_s_001 r;
  int ret;
  s_0.a = (unsigned int)2;
  s_0.b = (unsigned int)1;
  s_0.uninit = (unsigned int)2;
  ret = uninit_var_012_func_001(s_0);
  if (ret >= 0) r = s_0;
  r.a = (unsigned int)0;
  sink = (int)r.a;
  return;
}

int uninit_var_013_func_001(void)
{
  int __retres;
  values val = ONE;
  __retres = (int)val;
  return __retres;
}

void uninit_var_013(void)
{
  int a_0;
  a_0 = uninit_var_013_func_001();
  sink = a_0;
  return;
}

uninit_var_014_s_001 uninit_var_014_func_001(uninit_var_014_s_001 s1)
{
  uninit_var_014_s_001 ret;
  (s1.a) ++;
  ret.a = s1.a;
  (s1.b) ++;
  ret.b = s1.b;
  (s1.uninit) ++;
  ret.uninit = s1.uninit;
  return ret;
}

void uninit_var_014(void)
{
  uninit_var_014_s_001 s_0;
  uninit_var_014_s_001 r;
  s_0.a = 1;
  s_0.b = 1;
  s_0.uninit = 1;
  r = uninit_var_014_func_001(s_0);
  r.a = 0;
  sink = r.a;
  return;
}

void uninit_var_015_func_001(int *a_0)
{
  *(a_0 + 0) = 0;
  *(a_0 + 1) = 1;
  *(a_0 + 2) = 2;
  return;
}

void uninit_var_015(void)
{
  int a_0[3];
  uninit_var_015_func_001(a_0);
  return;
}

void uninit_var_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: uninit_var_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: uninit_var_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: uninit_var_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: uninit_var_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: uninit_var_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: uninit_var_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: uninit_var_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: uninit_var_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: uninit_var_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: uninit_var_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: uninit_var_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: uninit_var_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: uninit_var_013();
  if (vflag == 14) goto _LOR_12;
  else 
    if (vflag == 888) _LOR_12: uninit_var_014();
  if (vflag == 15) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: uninit_var_015();
  return;
}

void zero_division_001(void)
{
  int ret;
  int dividend = 1000;
  ret = dividend / 1;
  return;
}

void zero_division_002(void)
{
  int ret;
  int dividend = 1000;
  dividend /= 1;
  ret = dividend;
  return;
}

void zero_division_003(void)
{
  int ret;
  int dividend = 1000;
  ret = dividend % 1;
  return;
}

int zero_division_004_dividend_gbl = 1000;
static int zero_division_004_divisor_gbl = 11;
void zero_division_004_func_001(void)
{
  zero_division_004_dividend_gbl %= zero_division_004_divisor_gbl;
  return;
}

void zero_division_004(void)
{
  zero_division_004_divisor_gbl --;
  zero_division_004_func_001();
  return;
}

void zero_division_005(void)
{
  int ret;
  int dividend = 1000;
  int divisors[5] = {2, 1, 3, 0, 4};
  ret = dividend / divisors[2];
  return;
}

int zero_division_006_gbl_divisor = 1;
void zero_division_006(void)
{
  int *p;
  int ret;
  int dividend = 1000;
  p = & zero_division_006_gbl_divisor;
  ret = dividend / *p;
  return;
}

zero_division_007_s_001 zero_division_007_s_gbl;
void zero_division_007_func_001(void)
{
  zero_division_007_s_gbl.divisor = 1;
  return;
}

void zero_division_007(void)
{
  int ret;
  int dividend = 1000;
  zero_division_007_func_001();
  ret = dividend / zero_division_007_s_gbl.divisor;
  return;
}

void zero_division_008(void)
{
  float ret;
  float dividend = (float)1000.0;
  ret = (float)((double)dividend / 1.0);
  return;
}

void zero_division_009(void)
{
  int ret;
  int dividend = 1000;
  int divisor = 1;
  ret = dividend / divisor;
  return;
}

void zero_division_010(void)
{
  int divisor;
  int ret;
  int dividend = 1000;
  divisor = rand();
  if (divisor != 0) ret = dividend / divisor;
  return;
}

void zero_division_011(void)
{
  int ret;
  int dividend = 1000;
  int divisor = 2;
  ret = dividend / (2 * divisor - 3);
  return;
}

void zero_division_012(void)
{
  int ret;
  int dividend = 1000;
  int divisor = 2;
  ret = dividend / (divisor * divisor - 3);
  return;
}

int zero_division_013_func_001(void)
{
  int __retres;
  __retres = 1;
  return __retres;
}

void zero_division_013(void)
{
  int ret;
  int tmp;
  int dividend = 1000;
  tmp = zero_division_013_func_001();
  ret = dividend / tmp;
  return;
}

void zero_division_014_func_001(int divisor)
{
  int ret;
  int dividend = 1000;
  ret = dividend / divisor;
  return;
}

void zero_division_014(void)
{
  zero_division_014_func_001(1);
  return;
}

void zero_division_015(void)
{
  int divisor1;
  int ret;
  int dividend = 1000;
  int divisor = 1;
  divisor1 = divisor;
  ret = dividend / divisor1;
  return;
}

int *zero_division_016_gbl_divisor;
void zero_division_016_func_001(void)
{
  zero_division_016_gbl_divisor = (int *)malloc((unsigned int)1 * sizeof(int));
  *zero_division_016_gbl_divisor = 1;
  return;
}

void zero_division_016_func_002(void)
{
  (*zero_division_016_gbl_divisor) ++;
  return;
}

void zero_division_016(void)
{
  int divisor1;
  int divisor2;
  int ret;
  int dividend = 1000;
  zero_division_016_func_001();
  zero_division_016_func_002();
  divisor1 = *zero_division_016_gbl_divisor;
  divisor2 = divisor1;
  ret = dividend / divisor2;
  return;
}

void zero_division_main(void)
{
  if (vflag == 1) goto _LOR;
  else 
    if (vflag == 888) _LOR: zero_division_001();
  if (vflag == 2) goto _LOR_0;
  else 
    if (vflag == 888) _LOR_0: zero_division_002();
  if (vflag == 3) goto _LOR_1;
  else 
    if (vflag == 888) _LOR_1: zero_division_003();
  if (vflag == 4) goto _LOR_2;
  else 
    if (vflag == 888) _LOR_2: zero_division_004();
  if (vflag == 5) goto _LOR_3;
  else 
    if (vflag == 888) _LOR_3: zero_division_005();
  if (vflag == 6) goto _LOR_4;
  else 
    if (vflag == 888) _LOR_4: zero_division_006();
  if (vflag == 7) goto _LOR_5;
  else 
    if (vflag == 888) _LOR_5: zero_division_007();
  if (vflag == 8) goto _LOR_6;
  else 
    if (vflag == 888) _LOR_6: zero_division_008();
  if (vflag == 9) goto _LOR_7;
  else 
    if (vflag == 888) _LOR_7: zero_division_009();
  if (vflag == 10) goto _LOR_8;
  else 
    if (vflag == 888) _LOR_8: zero_division_010();
  if (vflag == 11) goto _LOR_9;
  else 
    if (vflag == 888) _LOR_9: zero_division_011();
  if (vflag == 12) goto _LOR_10;
  else 
    if (vflag == 888) _LOR_10: zero_division_012();
  if (vflag == 13) goto _LOR_11;
  else 
    if (vflag == 888) _LOR_11: zero_division_013();
  if (vflag == 14) goto _LOR_12;
  else 
    if (vflag == 888) _LOR_12: zero_division_014();
  if (vflag == 15) goto _LOR_13;
  else 
    if (vflag == 888) _LOR_13: zero_division_015();
  if (vflag == 16) goto _LOR_14;
  else 
    if (vflag == 888) _LOR_14: zero_division_016();
  return;
}


