/* Generated by Frama-C */
#include "assert.h"
#include "errno.h"
#include "inttypes.h"
#include "stdarg.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
int y = 0;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_1(char const * restrict format, void *param0, void *param1);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_2(char const * restrict format, char *param0);

int main(void)
{
  int __retres;
  int tmp;
  char const *tmp_0;
  __FC_assert((sizeof(int *) == sizeof(char *)) != 0,"null_pointer_2.c",3,
              "sizeof(int*)==sizeof(char*)");
  int *p = (int *)0;
  char *q = (char *)0;
  tmp = memcmp((void const *)(& p),(void const *)(& q),sizeof(p));
  _Bool b = (_Bool)(tmp == 0);
  printf("p=%p q=%p\n",(void *)p,(void *)q); /* printf_va_1 */
  if (b) tmp_0 = "equal"; else tmp_0 = "unequal";
  printf("%s\n",(char *)tmp_0); /* printf_va_2 */
  __retres = 0;
  return __retres;
}


