/* Generated by Frama-C */
#include "assert.h"
#include "errno.h"
#include "inttypes.h"
#include "stdarg.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
int x = 1;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), param0;
 */
int fprintf_va_1(FILE * restrict stream, char const * restrict format,
                 unsigned int param0);

/*@ requires \valid(param0);
    requires valid_read_string(format);
    ensures \initialized(param0);
    assigns \result, stream->__fc_FILE_data, *param0;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param0
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
 */
int fscanf_va_1(FILE * restrict stream, char const * restrict format,
                unsigned int *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_2(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(param2);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), *(param2 + (0 ..)), param1, param0;
 */
int printf_va_3(char const * restrict format, int param0, int param1,
                char *param2, char *param3);

int main(void)
{
  int __retres;
  uintptr_t k;
  int tmp_1;
  char const *tmp_2;
  char const *tmp_3;
  int *p = & x;
  uintptr_t i = (uintptr_t)p;
  FILE *f = fopen("provenance_via_io_uintptr_t_global.tmp","w+b");
  printf("Addresses: i=%u \n",i); /* printf_va_1 */
  fprintf(f,"%u\n",i); /* fprintf_va_1 */
  rewind(f);
  int n = fscanf_va_1(f,"%u\n",& k);
  if (n != 1) exit(1);
  printf("Addresses: k=%u\n",k); /* printf_va_2 */
  int *r = (int *)k;
  *r = 12;
  _Bool b1 = (_Bool)(r == p);
  tmp_1 = memcmp((void const *)(& r),(void const *)(& p),sizeof(r));
  _Bool b2 = (_Bool)(0 == tmp_1);
  if (b2) tmp_2 = "true"; else tmp_2 = "false";
  if (b1) tmp_3 = "true"; else tmp_3 = "false";
  ;
  ;
  printf("x=%i *r=%i b1=%s b2=%s\n",x,*r,(char *)tmp_3,(char *)tmp_2); /* printf_va_3 */
  __retres = 0;
  return __retres;
}


