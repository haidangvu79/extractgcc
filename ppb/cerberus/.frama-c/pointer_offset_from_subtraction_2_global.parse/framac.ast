/* Generated by Frama-C */
#include "assert.h"
#include "errno.h"
#include "inttypes.h"
#include "stdarg.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
int w = 4;
int z = 3;
int y = 2;
int x = 1;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1(char const * restrict format, int param0, int param1,
                int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_2(char const * restrict format, int param0, int param1,
                int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_3(char const * restrict format, int param0, int param1,
                int param2, int param3);

int main(void)
{
  int __retres;
  int tmp;
  intptr_t ux = (intptr_t)(& x);
  intptr_t uy = (intptr_t)(& y);
  intptr_t offsetxy = uy - ux;
  intptr_t uz = (intptr_t)(& z);
  intptr_t uw = (intptr_t)(& w);
  intptr_t offsetzw = uw - uz;
  printf("Addresses: &x=%i &y=%i offsetxy=%i \n",ux,uy,offsetxy); /* printf_va_1 */
  printf("Addresses: &z=%i &w=%i offsetzw=%i \n",uz,uw,offsetzw); /* printf_va_2 */
  __FC_assert((offsetzw == offsetxy) != 0,
              "pointer_offset_from_subtraction_2_global.c",13,
              "offsetzw==offsetxy");
  int *p = (int *)(ux + offsetzw);
  int *q = & y;
  tmp = memcmp((void const *)(& p),(void const *)(& q),sizeof(p));
  if (tmp == 0) {
    *p = 11;
    printf("x=%d  y=%d  *p=%d  *q=%d\n",x,y,*p,*q); /* printf_va_3 */
  }
  __retres = 0;
  return __retres;
}


