/* Generated by Frama-C */
#include "assert.h"
#include "errno.h"
#include "inttypes.h"
#include "stdarg.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
struct __anonstruct_st1_1 {
   char c1 ;
   float f1 ;
};
typedef struct __anonstruct_st1_1 st1;
struct __anonstruct_st2_2 {
   char c2 ;
   float f2 ;
};
typedef struct __anonstruct_st2_2 st2;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1(char const * restrict format, double param0);

int main(void)
{
  int __retres;
  __FC_assert((sizeof(st1) == sizeof(st2)) != 0,"effective_type_8.c",4,
              "sizeof(st1)==sizeof(st2)");
  __FC_assert((0U == 0U) != 0,"effective_type_8.c",5,
              "offsetof(st1,c1)==offsetof(st2,c2)");
  __FC_assert((4U == 4U) != 0,"effective_type_8.c",6,
              "offsetof(st1,f1)==offsetof(st2,f2)");
  void *p = malloc(sizeof(st1));
  __FC_assert((p != (void *)0) != 0,"effective_type_8.c",7,"p != NULL");
  ((st1 *)p)->c1 = (char)'A';
  ((st2 *)p)->f2 = (float)1.0;
  printf("((st2 *)p)->f2=%f\n",(double)((st2 *)p)->f2); /* printf_va_1 */
  __retres = 0;
  return __retres;
}


