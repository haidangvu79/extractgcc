/* Generated by Frama-C */
#include "assert.h"
#include "errno.h"
#include "inttypes.h"
#include "stdarg.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
struct __anonstruct_st1_1 {
   char c1 ;
   float f1 ;
};
typedef struct __anonstruct_st1_1 st1;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1(char const * restrict format, double param0);

int main(void)
{
  int __retres;
  void *p = malloc(sizeof(st1));
  __FC_assert((p != (void *)0) != 0,"effective_type_5.c",3,"p != NULL");
  st1 s1 = {.c1 = (char)'A', .f1 = (float)1.0};
  *((st1 *)p) = s1;
  float *pf = & ((st1 *)p)->f1;
  float f = *pf;
  printf("f=%f\n",(double)f); /* printf_va_1 */
  __retres = 0;
  return __retres;
}


