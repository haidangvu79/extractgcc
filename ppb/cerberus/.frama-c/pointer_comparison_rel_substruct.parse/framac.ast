/* Generated by Frama-C */
#include "assert.h"
#include "errno.h"
#include "inttypes.h"
#include "stdarg.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
struct __anonstruct_st1_1 {
   int i1 ;
   float f1 ;
};
typedef struct __anonstruct_st1_1 st1;
struct __anonstruct_st2_2 {
   int i2 ;
   st1 s2 ;
};
typedef struct __anonstruct_st2_2 st2;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_1(char const * restrict format, void *param0, void *param1);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_2(char const * restrict format, char *param0);

int main(void)
{
  int __retres;
  char const *tmp;
  st2 s = {.i2 = 2, .s2 = {.i1 = 1, .f1 = (float)1.0}};
  int *p = & s.i2;
  int *q = & s.s2.i1;
  _Bool b = (_Bool)(p < q);
  printf("Addresses: p=%p  q=%p\n",(void *)p,(void *)q); /* printf_va_1 */
  if (b) tmp = "true"; else tmp = "false";
  printf("(p<q) = %s\n",(char *)tmp); /* printf_va_2 */
  __retres = 0;
  return __retres;
}


