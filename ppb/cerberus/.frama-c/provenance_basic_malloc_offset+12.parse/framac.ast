/* Generated by Frama-C */
#include "assert.h"
#include "errno.h"
#include "inttypes.h"
#include "stdarg.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1(char const * restrict format, void *param0, void *param1,
                void *param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_2(char const * restrict format, int param0, int param1,
                int param2, int param3);

int main(void)
{
  int __retres;
  int tmp_1;
  int *xp = malloc(sizeof(int));
  int *yp = malloc(sizeof(int));
  *xp = 1;
  *yp = 2;
  int *p = xp + 16;
  int *q = yp;
  printf("Addresses: xp=%p p=%p q=%p\n",(void *)xp,(void *)p,(void *)q); /* printf_va_1 */
  tmp_1 = memcmp((void const *)(& p),(void const *)(& q),sizeof(p));
  if (tmp_1 == 0) {
    *p = 11;
    printf("*xp=%d *yp=%d *p=%d *q=%d\n",*xp,*yp,*p,*q); /* printf_va_2 */
  }
  __retres = 0;
  return __retres;
}


