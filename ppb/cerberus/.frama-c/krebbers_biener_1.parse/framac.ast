/* Generated by Frama-C */
#include "assert.h"
#include "errno.h"
#include "inttypes.h"
#include "stdarg.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
struct X {
   int i ;
   int j ;
};
int foo(struct X *p, struct X *q)
{
  int __retres;
  q->j = 1;
  p->i = 0;
  __retres = q->j;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1(char const * restrict format, int param0);

int main(void)
{
  int __retres;
  int tmp_0;
  __FC_assert((sizeof(struct X) == (unsigned int)2 * sizeof(int)) != 0,
              "krebbers_biener_1.c",9,"sizeof(struct X) == 2 * sizeof(int)");
  unsigned char *p = malloc((unsigned int)3 * sizeof(int));
  tmp_0 = foo((struct X *)(p + sizeof(int)),(struct X *)p);
  printf("%i\n",tmp_0); /* printf_va_1 */
  __retres = 0;
  return __retres;
}


