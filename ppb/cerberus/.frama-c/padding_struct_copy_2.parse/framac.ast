/* Generated by Frama-C */
#include "assert.h"
#include "errno.h"
#include "inttypes.h"
#include "stdarg.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
struct __anonstruct_st_1 {
   uint16_t u ;
   char c ;
};
typedef struct __anonstruct_st_1 st;
int x;
void f(st *s2p, st *s1p)
{
  *s2p = *s1p;
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_2(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_3(char const * restrict format, unsigned int param0);

int main(void)
{
  int __retres;
  st s2;
  size_t offset_padding = 2U + sizeof(char);
  __FC_assert((sizeof(st) > offset_padding) != 0,"padding_struct_copy_2.c",9,
              "sizeof(st)>offset_padding");
  st s1 = {.u = (uint16_t)0x1234, .c = (char)'A'};
  unsigned char *padding1 = (unsigned char *)(& s1) + offset_padding;
  *padding1 = (unsigned char)0xBA;
  printf("*padding1=0x%x\n",(unsigned int)((int)*padding1)); /* printf_va_1 */
  unsigned char *padding2 = (unsigned char *)(& s2) + offset_padding;
  printf("*padding2=0x%x\n",(unsigned int)((int)*padding2)); /* printf_va_2 */
  f(& s2,& s1);
  printf("*padding2=0x%x\n",(unsigned int)((int)*padding2)); /* printf_va_3 */
  __retres = 0;
  return __retres;
}


