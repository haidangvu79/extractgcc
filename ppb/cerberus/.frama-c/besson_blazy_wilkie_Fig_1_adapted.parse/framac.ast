/* Generated by Frama-C */
#include "assert.h"
#include "errno.h"
#include "inttypes.h"
#include "stdarg.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
int set(int p, int flag)
{
  int __retres;
  __retres = p | (1 << flag);
  return __retres;
}

int isset(int p, int flag)
{
  int __retres;
  __retres = (p & (1 << flag)) != 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param1 + (0 ..)), param0;
 */
int printf_va_2(char const * restrict format, unsigned int param0,
                char *param1);

int main(void)
{
  int status;
  int tmp;
  char const *tmp_0;
  int tmp_1;
  printf("status=0x%x\n",(unsigned int)status); /* printf_va_1 */
  status = set(status,0);
  tmp = isset(status,0);
  _Bool b = (_Bool)(tmp != 0);
  if (b) tmp_0 = "true"; else tmp_0 = "false";
  ;
  printf("status=0x%x  b=%s\n",(unsigned int)status,(char *)tmp_0); /* printf_va_2 */
  tmp_1 = isset(status,0);
  return tmp_1;
}


