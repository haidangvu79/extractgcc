/* Generated by Frama-C */
#include "assert.h"
#include "errno.h"
#include "inttypes.h"
#include "stdarg.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
typedef unsigned long word_t;
word_t *kfree_list;
void *alloc(word_t size)
{
  void *__retres;
  word_t *prev;
  word_t *curr;
  word_t *tmp;
  word_t i;
  if (size >= (word_t)1024) size = size; else size = (word_t)1024;
  prev = (word_t *)(& kfree_list);
  curr = kfree_list;
  while (curr) {
    if (! ((word_t)curr & (size - (word_t)1))) {
      tmp = (word_t *)*curr;
      i = (word_t)1;
      while (1) {
        if (tmp) {
          if (! (i < size / (word_t)1024)) break;
        }
        else break;
        if ((word_t)tmp != (word_t)curr + (word_t)1024 * i) {
          tmp = (word_t *)0;
          break;
        }
        tmp = (word_t *)*tmp;
        i ++;
      }
      if (tmp) {
        *prev = (word_t)tmp;
        i = (word_t)0;
        while (i < size / (word_t)sizeof(word_t)) {
          *(curr + i) = (word_t)0;
          i ++;
        }
        __retres = (void *)curr;
        goto return_label;
      }
    }
    prev = curr;
    curr = (word_t *)*curr;
  }
  __retres = (void *)0;
  return_label: return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_2(char const * restrict format, void *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_3(char const * restrict format, void *param0);

void print_free_list(word_t *p)
{
  word_t *q = p;
  printf("free list: "); /* printf_va_1 */
  while (q != (word_t *)0) {
    printf("%p ",(void *)q); /* printf_va_2 */
    q = (word_t *)*q;
  }
  printf("%p\n",(void *)q); /* printf_va_3 */
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_4(char const * restrict format, void *param0, void *param1,
                void *param2);

int main(void)
{
  int __retres;
  int i;
  void *a;
  void *b;
  void *c;
  int n = 10;
  void *r = malloc((size_t)(1024 * (n + 1)));
  if (((word_t)r & (unsigned long)(1024 - 1)) != (unsigned long)0) r = (void *)(
                                                                   ((word_t)r & ~ ((word_t)(
                                                                    1024 - 1))) + (word_t)1024);
  i = 0;
  while (i < n - 1) {
    *((word_t *)((word_t)r + (word_t)(i * 1024))) = (word_t)r + (word_t)(
                                                    (i + 1) * 1024);
    i ++;
  }
  *((word_t *)((word_t)r + (word_t)((n - 1) * 1024))) = (word_t)0;
  kfree_list = (word_t *)r;
  print_free_list(kfree_list);
  a = alloc((word_t)2048);
  b = alloc((word_t)2048);
  c = alloc((word_t)65536);
  printf("a=%p b=%p c=%p\n",a,b,c); /* printf_va_4 */
  print_free_list(kfree_list);
  __retres = 0;
  return __retres;
}


