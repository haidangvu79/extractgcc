/* Generated by Frama-C */
#include "assert.h"
#include "errno.h"
#include "inttypes.h"
#include "stdarg.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
int y = 2;
int x = 1;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_1(char const * restrict format, void *param0, void *param1);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param1 + (0 ..)), *(param0 + (0 ..));
 */
int printf_va_2(char const * restrict format, char *param0, char *param1);

int main(void)
{
  int __retres;
  char const *tmp;
  char const *tmp_0;
  int *p = & x;
  int *q = & y;
  _Bool b1 = (_Bool)(p < q);
  _Bool b2 = (_Bool)(p > q);
  printf("Addresses: p=%p  q=%p\n",(void *)p,(void *)q); /* printf_va_1 */
  if (b2) tmp = "true"; else tmp = "false";
  if (b1) tmp_0 = "true"; else tmp_0 = "false";
  printf("(p<q) = %s  (p>q) = %s\n",(char *)tmp_0,(char *)tmp); /* printf_va_2 */
  __retres = 0;
  return __retres;
}


