/* Generated by Frama-C */
#include "__fc_builtin.h"
#include "assert.h"
#include "ctype.h"
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
#include "string.h"
#include "strings.h"
char *strrand(char *s);

int istrrand(char *s);

int istrchr(char const *s, int c);

int istrrchr(char const *s, int c);

int istrncmp(char const *s1, int start, char const *s2, size_t n);

int istrstr(char const *haystack, char const *needle);

int readlink(char const *path, char *buf, int bufsiz);

char *getcwd(char *buf, size_t size);

char *fb_realpath(char const *path, char *resolved)
{
  char *__retres;
  int rootd;
  char wbuf[2 + 2];
  int resultcode;
  char tmp[2 + 2];
  int p;
  int q;
  char *tmp_0;
  strncpy(resolved,path,(size_t)((2 + 2) - 1));
  *(resolved + ((2 + 2) - 1)) = (char)0;
  q = istrrchr((char const *)resolved,'/');
  if (q != -1) {
    p = q + 1;
    if (! (q == 0)) {
      while (1) {
        q --;
        if (q > 0) {
          if (! ((int)*(resolved + q) == '/')) break;
        }
        else break;
      }
      *(resolved + (q + 1)) = (char)0;
      q = 0;
    }
  }
  else p = 0;
  strcpy(wbuf,(char const *)(resolved + p));
  tmp_0 = getcwd(resolved,(size_t)(2 + 2));
  if (tmp_0 == (char *)0) {
    __retres = (char *)0;
    goto return_label;
  }
  if ((int)*(resolved + 0) == '/') 
    if ((int)*(resolved + 1) == 0) rootd = 1; else rootd = 0;
  else rootd = 0;
  if ((int)wbuf[0] != 0) {
    size_t tmp_1;
    size_t tmp_2;
    tmp_1 = strlen((char const *)resolved);
    tmp_2 = strlen((char const *)(wbuf));
    ;
    if (((tmp_1 + tmp_2) + (size_t)rootd) + (size_t)1 > (size_t)(2 + 2)) {
      __retres = (char *)0;
      goto return_label;
    }
    if (rootd == 0) strcat(resolved,"/");
    strcat(resolved,(char const *)(wbuf));
  }
  __retres = (char *)0;
  return_label: return __retres;
}

int main(void)
{
  int __retres;
  char pathname[2 + 2];
  char resolved[2 + 2];
  Frama_C_make_unknown(pathname,(size_t)((2 + 2) - 1));
  pathname[(2 + 2) - 1] = (char)0;
  Frama_C_make_unknown(resolved,(size_t)((2 + 2) - 1));
  resolved[(2 + 2) - 1] = (char)0;
  fb_realpath((char const *)(pathname),resolved);
  __retres = 0;
  return __retres;
}

uid_t geteuid(void);

int seteuid(uid_t euid);

int enable_signaling(void);

int delay_signaling(void);

uid_t geteuid(void)
{
  uid_t __retres;
  short tmp;
  tmp = Frama_C_short_interval((short)(-32767 - 1),(short)32767);
  __retres = (uid_t)tmp;
  return __retres;
}

int seteuid(uid_t euid)
{
  int __retres;
  int tmp;
  tmp = Frama_C_interval(-2147483647 - 1,2147483647);
  if (tmp == 0) {
    __retres = 0;
    goto return_label;
  }
  __retres = -1;
  return_label: return __retres;
}

int enable_signaling(void)
{
  int __retres;
  __retres = 0;
  return __retres;
}

int delay_signaling(void)
{
  int __retres;
  __retres = 0;
  return __retres;
}

int readlink(char const *path, char *buf, int bufsiz)
{
  int __retres;
  int n = Frama_C_interval(-2147483647 - 1,2147483647);
  if (n < bufsiz) 
    if (n >= 0) {
      __retres = n;
      goto return_label;
    }
  __retres = -1;
  return_label: return __retres;
}

char *getcwd(char *buf, size_t size)
{
  char *__retres;
  int tmp;
  tmp = Frama_C_interval(-2147483647 - 1,2147483647);
  if (tmp == 0) {
    __retres = (char *)0;
    goto return_label;
  }
  *(buf + (size - (size_t)1)) = (char)0;
  __retres = buf;
  return_label: return __retres;
}

char *strrand(char *s)
{
  char *__retres;
  int i;
  i = 0;
  while ((int)*(s + i) != 0) {
    int tmp;
    tmp = Frama_C_interval(-2147483647 - 1,2147483647);
    if (tmp == 1) {
      __retres = s + i;
      goto return_label;
    }
    i ++;
  }
  __retres = (char *)0;
  return_label: return __retres;
}

int istrrand(char *s)
{
  int __retres;
  int i;
  i = 0;
  while ((int)*(s + i) != 0) {
    int tmp;
    tmp = Frama_C_interval(-2147483647 - 1,2147483647);
    if (tmp == 1) {
      __retres = i;
      goto return_label;
    }
    i ++;
  }
  __retres = -1;
  return_label: return __retres;
}

int istrchr(char const *s, int c)
{
  int __retres;
  int i;
  int tmp;
  i = 0;
  while ((int)*(s + i) != 0) {
    if ((int)*(s + i) == c) {
      __retres = i;
      goto return_label;
    }
    i ++;
  }
  if (c == 0) tmp = i; else tmp = -1;
  __retres = tmp;
  return_label: return __retres;
}

int istrrchr(char const *s, int c)
{
  int __retres;
  int i;
  int ret = -1;
  i = 0;
  while ((int)*(s + i) != 0) {
    if ((int)*(s + i) == c) ret = i;
    i ++;
  }
  if (c == 0) {
    __retres = i;
    goto return_label;
  }
  __retres = ret;
  return_label: return __retres;
}

int istrncmp(char const *s1, int start, char const *s2, size_t n)
{
  int __retres;
  int i;
  int end = (int)((size_t)start + (n - (size_t)1));
  i = start;
  while (i < end) {
    if ((int)*(s1 + i) == 0) {
      __retres = 0;
      goto return_label;
    }
    if ((int)*(s1 + i) - (int)*(s2 + i) != 0) {
      __retres = (int)*(s1 + i) - (int)*(s2 + i);
      goto return_label;
    }
    i ++;
  }
  __FC_assert((i == end) != 0,"fc_stubs.c",69,"i == end");
  __retres = (int)*(s1 + end) - (int)*(s2 + end);
  return_label: return __retres;
}

int istrstr(char const *haystack, char const *needle)
{
  int __retres;
  int len;
  int i;
  int j;
  len = 0;
  while ((int)*(needle + len) != 0) len ++;
  i = 0;
  while ((int)*(haystack + i) != 0) {
    j = 0;
    while (j < len - 1) {
      if ((int)*(haystack + (i + j)) == 0) break;
      if ((int)*(haystack + (i + j)) != (int)*(needle + j)) break;
      j ++;
    }
    if (j == len - 1) 
      if ((int)*(haystack + ((i + len) - 1)) == (int)*(needle + (len - 1))) {
        __retres = i;
        goto return_label;
      }
    i ++;
  }
  __retres = -1;
  return_label: return __retres;
}


