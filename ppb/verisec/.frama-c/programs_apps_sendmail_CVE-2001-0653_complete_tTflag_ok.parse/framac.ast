/* Generated by Frama-C */
#include "ctype.h"
#include "errno.h"
#include "getopt.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
#include "sys/types.h"
#include "unistd.h"
unsigned char tTdvect[100];

void tTflag(char *s) __attribute__((__FC_OLDSTYLEPROTO__));

void tTsetup(u_char *vect, int size, char *defflags) __attribute__((__FC_OLDSTYLEPROTO__));

static u_char *tTvect;
static int tTsize;
static char *DefFlags;
void tTsetup(u_char *vect, int size, char *defflags) __attribute__((__FC_OLDSTYLEPROTO__));
void tTsetup(u_char *vect, int size, char *defflags)
{
  tTvect = vect;
  tTsize = size;
  DefFlags = defflags;
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1(char const * restrict format, unsigned int param0);

void tTflag(char *s) __attribute__((__FC_OLDSTYLEPROTO__));
void tTflag(char *s)
{
  unsigned int first;
  unsigned int last;
  register unsigned int i;
  if ((int)*s == '\000') s = DefFlags;
  while (1) {
    char *tmp_7;
    i = (unsigned int)0;
    while (1) {
      int tmp_0;
      char *tmp;
      tmp_0 = isascii((int)*s);
      if (tmp_0) {
        int tmp_1;
        tmp_1 = isdigit((int)*s);
        if (! tmp_1) break;
      }
      else break;
      tmp = s;
      s ++;
      i = i * (unsigned int)10 + (unsigned int)((int)*tmp - '0');
    }
    first = i;
    if ((int)*s == '-') {
      i = (unsigned int)0;
      while (1) {
        int tmp_2;
        s ++;
        ;
        tmp_2 = isascii((int)*s);
        if (tmp_2) {
          int tmp_3;
          tmp_3 = isdigit((int)*s);
          if (! tmp_3) break;
        }
        else break;
        i = i * (unsigned int)10 + (unsigned int)((int)*s - '0');
      }
    }
    last = i;
    i = (unsigned int)1;
    if ((int)*s == '.') {
      i = (unsigned int)0;
      while (1) {
        int tmp_4;
        s ++;
        ;
        tmp_4 = isascii((int)*s);
        if (tmp_4) {
          int tmp_5;
          tmp_5 = isdigit((int)*s);
          if (! tmp_5) break;
        }
        else break;
        i = i * (unsigned int)10 + (unsigned int)((int)*s - '0');
      }
    }
    if (first >= (unsigned int)tTsize) first = (unsigned int)(tTsize - 1);
    if (last >= (unsigned int)tTsize) last = (unsigned int)(tTsize - 1);
    while (first <= last) {
      unsigned int tmp_6;
      printf("index = %u\n",first); /* printf_va_1 */
      tmp_6 = first;
      first ++;
      *(tTvect + tmp_6) = (u_char)i;
    }
    tmp_7 = s;
    s ++;
    ;
    if ((int)*tmp_7 == '\000') goto return_label;
  }
  return_label: return;
}

unsigned char tTdvect[100];
int main(int argc, char **argv, char **envp)
{
  int __retres;
  int j;
  tTsetup(tTdvect,100,(char *)"0-99.1");
  while (1) {
    j = getopt(argc,(char * const *)argv,
               "B:b:C:cd:e:F:f:Gh:IiL:M:mN:nO:o:p:q:R:r:sTtUV:vX:");
    if (! (j != -1)) break;
    switch (j) {
      int tmp;
      case 'd': tmp = strcmp((char const *)optarg,"ANSI");
      if (tmp == 0) break;
      tTflag(optarg);
      setbuf(__fc_stdout,(char *)0);
      break;
      case 'G': break;
      case 'L': break;
      case 'U': break;
    }
  }
  __retres = 0;
  return __retres;
}


