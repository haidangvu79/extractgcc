/* Generated by Frama-C */
#include "__fc_builtin.h"
#include "assert.h"
#include "ctype.h"
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
#include "string.h"
#include "strings.h"
struct entities_s {
   char *name ;
   int value ;
};
struct entities_s entities[3] =
  {{.name = (char *)"AElig", .value = 198},
   {.name = (char *)"Aacute", .value = 193},
   {.name = (char *)"Acirc", .value = 194}};
static int gdTcl_UtfToUniChar(char *str, int *chPtr)
{
  int __retres;
  int byte;
  byte = (int)((unsigned char)*(str + 0));
  if (byte == '&') {
    int i;
    int n = 0;
    byte = (int)*((unsigned char *)(str + 1));
    if (byte == '#') {
      byte = (int)*((unsigned char *)(str + 2));
      if (byte == 'x') goto _LOR;
      else 
        if (byte == 'X') {
          _LOR:
          {
            i = 3;
            while (i < 8) {
              byte = (int)*((unsigned char *)(str + i));
              if (byte >= 'A') {
                if (byte <= 'F') byte = (byte - 'A') + 10; else goto _LAND_0;
              }
              else {
                _LAND_0: ;
                if (byte >= 'a') {
                  if (byte <= 'f') byte = (byte - 'a') + 10; else goto _LAND;
                }
                else {
                  _LAND: ;
                  if (byte >= '0') 
                    if (byte <= '9') byte -= '0'; else break;
                  else break;
                }
              }
              n = n * 16 + byte;
              i ++;
            }
          }
        }
        else {
          i = 2;
          while (i < 8) {
            byte = (int)((unsigned char)*(str + i));
            if (byte >= '0') 
              if (byte <= '9') n = n * 10 + (byte - '0'); else break;
            else break;
            i ++;
          }
        }
      if (byte == ';') {
        i ++;
        __retres = i;
        goto return_label;
      }
    }
  }
  byte = (int)((unsigned char)*(str + 0));
  if (byte < 0xC0) {
    __retres = 1;
    goto return_label;
  }
  else 
    if (byte < 0xE0) {
      if (((int)*(str + 1) & 0xC0) == 0x80) {
        __retres = 2;
        goto return_label;
      }
      __retres = 1;
      goto return_label;
    }
    else 
      if (byte < 0xF0) {
        if (((int)*(str + 1) & 0xC0) == 0x80) 
          if (((int)*(str + 2) & 0xC0) == 0x80) {
            __retres = 3;
            goto return_label;
          }
        __retres = 1;
        goto return_label;
      }
  __retres = 1;
  return_label: return __retres;
}

void gdImageStringFTEx(char *string)
{
  int next;
  int encoding;
  int i;
  int ch;
  int len;
  encoding = Frama_C_interval(-2147483647 - 1,2147483647);
  if (encoding > 2) goto return_label;
  else 
    if (encoding < 0) goto return_label;
  next = 0;
  i = 0;
  while ((int)*(string + next) != 0) {
    ch = (int)*(string + next);
    if (ch == '\r') {
      next ++;
      goto __Cont;
    }
    if (ch == '\n') {
      next ++;
      goto __Cont;
    }
    switch (encoding) {
      case 0: {
                len = gdTcl_UtfToUniChar(string + next,& ch);
                next += len;
              }
      break;
      case 1:
      {
        unsigned char c;
        c = (unsigned char)*(string + next);
        if (0xA1 <= (int)c) 
          if ((int)c <= 0xFE) next ++;
        next ++;
      }
      break;
      case 2:
      {
        ch = (int)*(string + next) & 0xFF;
        next ++;
        if (ch >= 161) 
          if ((int)*(string + next) != 0) next ++;
      }
      break;
    }
    __Cont: i ++;
  }
  return_label: return;
}

int main(void)
{
  int __retres;
  char in[2 + 1];
  Frama_C_make_unknown(in,(size_t)((2 + 1) - 1));
  in[(2 + 1) - 1] = (char)0;
  gdImageStringFTEx(in);
  __retres = 0;
  return __retres;
}


