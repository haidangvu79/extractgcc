/* Generated by Frama-C */
#include "__fc_builtin.h"
#include "assert.h"
#include "ctype.h"
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
#include "string.h"
#include "strings.h"
char *strrand(char *s);

int istrrand(char *s);

int istrchr(char const *s, int c);

int istrrchr(char const *s, int c);

int istrncmp(char const *s1, int start, char const *s2, size_t n);

int istrstr(char const *haystack, char const *needle);

int fetchsms(char *pdu, int sim)
{
  int __retres;
  char answer[(2 + 2 * 2) + 2];
  int position;
  int beginning;
  int end;
  int foo;
  int err;
  Frama_C_make_unknown(answer,(size_t)(((2 + 2 * 2) + 2) - 1));
  answer[((2 + 2 * 2) + 2) - 1] = (char)0;
  position = istrstr((char const *)(answer),"+C");
  if (position == -1) {
    __retres = 0;
    goto return_label;
  }
  beginning = (position + 2) + 1;
  strcpy(pdu,(char const *)(& answer[beginning]));
  __retres = sim;
  return_label: return __retres;
}

int main(void)
{
  int __retres;
  char pdu[(2 + 2 * 2) + 2];
  int sim = 0;
  fetchsms(pdu,sim);
  __retres = 0;
  return __retres;
}

char *strrand(char *s)
{
  char *__retres;
  int i;
  i = 0;
  while ((int)*(s + i) != 0) {
    int tmp;
    tmp = Frama_C_interval(-2147483647 - 1,2147483647);
    if (tmp == 1) {
      __retres = s + i;
      goto return_label;
    }
    i ++;
  }
  __retres = (char *)0;
  return_label: return __retres;
}

int istrrand(char *s)
{
  int __retres;
  int i;
  i = 0;
  while ((int)*(s + i) != 0) {
    int tmp;
    tmp = Frama_C_interval(-2147483647 - 1,2147483647);
    if (tmp == 1) {
      __retres = i;
      goto return_label;
    }
    i ++;
  }
  __retres = -1;
  return_label: return __retres;
}

int istrchr(char const *s, int c)
{
  int __retres;
  int i;
  int tmp;
  i = 0;
  while ((int)*(s + i) != 0) {
    if ((int)*(s + i) == c) {
      __retres = i;
      goto return_label;
    }
    i ++;
  }
  if (c == 0) tmp = i; else tmp = -1;
  __retres = tmp;
  return_label: return __retres;
}

int istrrchr(char const *s, int c)
{
  int __retres;
  int i;
  int ret = -1;
  i = 0;
  while ((int)*(s + i) != 0) {
    if ((int)*(s + i) == c) ret = i;
    i ++;
  }
  if (c == 0) {
    __retres = i;
    goto return_label;
  }
  __retres = ret;
  return_label: return __retres;
}

int istrncmp(char const *s1, int start, char const *s2, size_t n)
{
  int __retres;
  int i;
  int end = (int)((size_t)start + (n - (size_t)1));
  i = start;
  while (i < end) {
    if ((int)*(s1 + i) == 0) {
      __retres = 0;
      goto return_label;
    }
    if ((int)*(s1 + i) - (int)*(s2 + i) != 0) {
      __retres = (int)*(s1 + i) - (int)*(s2 + i);
      goto return_label;
    }
    i ++;
  }
  __FC_assert((i == end) != 0,"fc_stubs.c",69,"i == end");
  __retres = (int)*(s1 + end) - (int)*(s2 + end);
  return_label: return __retres;
}

int istrstr(char const *haystack, char const *needle)
{
  int __retres;
  int len;
  int i;
  int j;
  len = 0;
  while ((int)*(needle + len) != 0) len ++;
  i = 0;
  while ((int)*(haystack + i) != 0) {
    j = 0;
    while (j < len - 1) {
      if ((int)*(haystack + (i + j)) == 0) break;
      if ((int)*(haystack + (i + j)) != (int)*(needle + j)) break;
      j ++;
    }
    if (j == len - 1) 
      if ((int)*(haystack + ((i + len) - 1)) == (int)*(needle + (len - 1))) {
        __retres = i;
        goto return_label;
      }
    i ++;
  }
  __retres = -1;
  return_label: return __retres;
}


