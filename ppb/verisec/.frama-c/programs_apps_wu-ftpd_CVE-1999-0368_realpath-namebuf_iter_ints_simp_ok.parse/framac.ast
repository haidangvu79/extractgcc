/* Generated by Frama-C */
#include "__fc_builtin.h"
#include "assert.h"
#include "ctype.h"
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
#include "string.h"
#include "strings.h"
char *strrand(char *s);

int istrrand(char *s);

int istrchr(char const *s, int c);

int istrrchr(char const *s, int c);

int istrncmp(char const *s1, int start, char const *s2, size_t n);

int istrstr(char const *haystack, char const *needle);

uid_t geteuid(void);

int seteuid(uid_t euid);

int enable_signaling(void);

int delay_signaling(void);

int readlink(char const *path, char *buf, int bufsiz);

char *getcwd(char *buf, size_t size);

char *realpath(char const *pathname, char *result, char *chroot_path)
{
  char *__retres;
  char curpath[2 + 3];
  char workpath[2 + 3];
  char linkpath[2 + 3];
  char namebuf[2 + 3];
  int len;
  int where;
  int ptr;
  int last;
  if (result == (char *)0) {
    __retres = (char *)0;
    goto return_label;
  }
  if (pathname == (char const *)0) {
    *result = (char)0;
    __retres = (char *)0;
    goto return_label;
  }
  strcpy(curpath,pathname);
  if ((int)*(pathname + 0) != '/') {
    uid_t userid;
    char *tmp_0;
    tmp_0 = getcwd(workpath,(size_t)(2 + 3));
    if (! tmp_0) {
      char *tmp;
      userid = geteuid();
      delay_signaling();
      seteuid((uid_t)0);
      tmp = getcwd(workpath,(size_t)(2 + 3));
      if (! tmp) {
        strcpy(result,".");
        seteuid(userid);
        enable_signaling();
        __retres = (char *)0;
        goto return_label;
      }
      seteuid(userid);
      enable_signaling();
    }
  }
  else workpath[0] = (char)0;
  where = 0;
  while ((int)curpath[where] != 0) {
    int tmp_1;
    size_t tmp_3;
    tmp_1 = strcmp((char const *)(& curpath[where]),".");
    if (! tmp_1) {
      where ++;
      continue;
    }
    strcpy(namebuf,(char const *)(workpath));
    last = 0;
    while ((int)namebuf[last] != 0) {
      goto __Cont;
      __Cont: last ++;
    }
    if (last == 0) goto _LOR;
    else {
      last --;
      ;
      if ((int)namebuf[last] != '/') {
        size_t tmp_2;
        _LOR: tmp_2 = strlen((char const *)(namebuf));
        strncat(namebuf,"/",((size_t)(2 + 3) - tmp_2) - (size_t)1);
      }
    }
    tmp_3 = strlen((char const *)(namebuf));
    ;
    strncat(namebuf,(char const *)(& curpath[where]),
            ((size_t)(2 + 3) - tmp_3) - (size_t)1);
  }
  __retres = result;
  return_label: return __retres;
}

int main(void)
{
  int __retres;
  char pathname[2 + 3];
  char result[2 + 3];
  char chroot_path[2 + 3];
  Frama_C_make_unknown(pathname,(size_t)((2 + 3) - 1));
  pathname[(2 + 3) - 1] = (char)0;
  Frama_C_make_unknown(result,(size_t)((2 + 3) - 1));
  result[(2 + 3) - 1] = (char)0;
  Frama_C_make_unknown(chroot_path,(size_t)((2 + 3) - 1));
  chroot_path[(2 + 3) - 1] = (char)0;
  realpath((char const *)(pathname),result,chroot_path);
  __retres = 0;
  return __retres;
}

uid_t geteuid(void)
{
  uid_t __retres;
  short tmp;
  tmp = Frama_C_short_interval((short)(-32767 - 1),(short)32767);
  __retres = (uid_t)tmp;
  return __retres;
}

int seteuid(uid_t euid)
{
  int __retres;
  int tmp;
  tmp = Frama_C_interval(-2147483647 - 1,2147483647);
  if (tmp == 0) {
    __retres = 0;
    goto return_label;
  }
  __retres = -1;
  return_label: return __retres;
}

int enable_signaling(void)
{
  int __retres;
  __retres = 0;
  return __retres;
}

int delay_signaling(void)
{
  int __retres;
  __retres = 0;
  return __retres;
}

int readlink(char const *path, char *buf, int bufsiz)
{
  int __retres;
  int n = Frama_C_interval(-2147483647 - 1,2147483647);
  if (n < bufsiz) 
    if (n >= 0) {
      __retres = n;
      goto return_label;
    }
  __retres = -1;
  return_label: return __retres;
}

char *getcwd(char *buf, size_t size)
{
  char *__retres;
  int tmp;
  tmp = Frama_C_interval(-2147483647 - 1,2147483647);
  if (tmp == 0) {
    __retres = (char *)0;
    goto return_label;
  }
  *(buf + (size - (size_t)1)) = (char)0;
  __retres = buf;
  return_label: return __retres;
}

char *strrand(char *s)
{
  char *__retres;
  int i;
  i = 0;
  while ((int)*(s + i) != 0) {
    int tmp;
    tmp = Frama_C_interval(-2147483647 - 1,2147483647);
    if (tmp == 1) {
      __retres = s + i;
      goto return_label;
    }
    i ++;
  }
  __retres = (char *)0;
  return_label: return __retres;
}

int istrrand(char *s)
{
  int __retres;
  int i;
  i = 0;
  while ((int)*(s + i) != 0) {
    int tmp;
    tmp = Frama_C_interval(-2147483647 - 1,2147483647);
    if (tmp == 1) {
      __retres = i;
      goto return_label;
    }
    i ++;
  }
  __retres = -1;
  return_label: return __retres;
}

int istrchr(char const *s, int c)
{
  int __retres;
  int i;
  int tmp;
  i = 0;
  while ((int)*(s + i) != 0) {
    if ((int)*(s + i) == c) {
      __retres = i;
      goto return_label;
    }
    i ++;
  }
  if (c == 0) tmp = i; else tmp = -1;
  __retres = tmp;
  return_label: return __retres;
}

int istrrchr(char const *s, int c)
{
  int __retres;
  int i;
  int ret = -1;
  i = 0;
  while ((int)*(s + i) != 0) {
    if ((int)*(s + i) == c) ret = i;
    i ++;
  }
  if (c == 0) {
    __retres = i;
    goto return_label;
  }
  __retres = ret;
  return_label: return __retres;
}

int istrncmp(char const *s1, int start, char const *s2, size_t n)
{
  int __retres;
  int i;
  int end = (int)((size_t)start + (n - (size_t)1));
  i = start;
  while (i < end) {
    if ((int)*(s1 + i) == 0) {
      __retres = 0;
      goto return_label;
    }
    if ((int)*(s1 + i) - (int)*(s2 + i) != 0) {
      __retres = (int)*(s1 + i) - (int)*(s2 + i);
      goto return_label;
    }
    i ++;
  }
  __FC_assert((i == end) != 0,"fc_stubs.c",69,"i == end");
  __retres = (int)*(s1 + end) - (int)*(s2 + end);
  return_label: return __retres;
}

int istrstr(char const *haystack, char const *needle)
{
  int __retres;
  int len;
  int i;
  int j;
  len = 0;
  while ((int)*(needle + len) != 0) len ++;
  i = 0;
  while ((int)*(haystack + i) != 0) {
    j = 0;
    while (j < len - 1) {
      if ((int)*(haystack + (i + j)) == 0) break;
      if ((int)*(haystack + (i + j)) != (int)*(needle + j)) break;
      j ++;
    }
    if (j == len - 1) 
      if ((int)*(haystack + ((i + len) - 1)) == (int)*(needle + (len - 1))) {
        __retres = i;
        goto return_label;
      }
    i ++;
  }
  __retres = -1;
  return_label: return __retres;
}


