/* Generated by Frama-C */
#include "__fc_builtin.h"
#include "assert.h"
#include "ctype.h"
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
#include "string.h"
#include "strings.h"
int main(void)
{
  int __retres;
  char fbuf[2 + 1];
  char *fbufp;
  int c1;
  int c2;
  int c3;
  Frama_C_make_unknown(fbuf,(size_t)2);
  fbufp = fbuf;
  while (1) {
    unsigned char tmp_4;
    tmp_4 = Frama_C_unsigned_char_interval((unsigned char)0,
                                           (unsigned char)255U);
    c1 = (int)tmp_4;
    if (! (c1 != -1)) break;
    {
      unsigned char tmp;
      unsigned char tmp_0;
      char *tmp_1;
      char *tmp_2;
      char *tmp_3;
      tmp = Frama_C_unsigned_char_interval((unsigned char)0,
                                           (unsigned char)255U);
      c2 = (int)tmp;
      if (c2 == -1) break;
      tmp_0 = Frama_C_unsigned_char_interval((unsigned char)0,
                                             (unsigned char)255U);
      c3 = (int)tmp_0;
      if (c3 == -1) break;
      if (c1 == '=') continue;
      else 
        if (c2 == '=') continue;
      *fbufp = (char)c1;
      tmp_1 = fbufp;
      fbufp ++;
      ;
      if ((int)*tmp_1 == '\n') goto _LOR;
      else 
        if (fbufp >= & fbuf[2]) {
          _LOR:
          {
            if (fbufp <= fbuf) fbufp = fbuf;
            else {
              fbufp --;
              ;
              if ((int)*fbufp != '\r') fbufp ++;
            }
            *fbufp = (char)0;
            fbufp = fbuf;
          }
        }
      *fbufp = (char)c2;
      tmp_2 = fbufp;
      fbufp ++;
      ;
      if ((int)*tmp_2 == '\n') goto _LOR_0;
      else 
        if (fbufp >= & fbuf[2]) {
          _LOR_0:
          {
            if (fbufp <= fbuf) fbufp = fbuf;
            else {
              fbufp --;
              ;
              if ((int)*fbufp != '\r') fbufp ++;
            }
            *fbufp = (char)0;
            fbufp = fbuf;
          }
        }
      if (c3 == '=') continue;
      *fbufp = (char)c3;
      tmp_3 = fbufp;
      fbufp ++;
      ;
      if ((int)*tmp_3 == '\n') goto _LOR_1;
      else 
        if (fbufp >= & fbuf[2]) {
          _LOR_1:
          {
            if (fbufp <= fbuf) fbufp = fbuf;
            else {
              fbufp --;
              ;
              if ((int)*fbufp != '\r') fbufp ++;
            }
            *fbufp = (char)0;
            fbufp = fbuf;
          }
        }
    }
  }
  if (fbufp > fbuf) *fbufp = (char)0;
  __retres = 0;
  return __retres;
}


