/* Generated by Frama-C */
#include "ctype.h"
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
enum bool {
    false = 0,
    true = 1
};
/* #pragma ccuredvararg("scanf",printf(1)) */
int ColonOkInAddr;
char *MustQuoteChars;
static char crackaddr_canary[11];
static char crackaddr_buf[31];
static char crackaddr_test_buf[10];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_2(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_3(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_4(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_5(char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_6(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_7(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_8(char const * restrict format);

char *crackaddr(char *addr)
{
  char *__retres;
  register char *p;
  register char c;
  int cmtlev;
  int realcmtlev;
  int anglelev;
  int realanglelev;
  int copylev;
  int bracklev;
  enum bool qmode;
  enum bool realqmode;
  enum bool skipping;
  register char *bp;
  char *obp;
  char *buflim;
  char *bufhead;
  char *addrhead;
  char *tmp_46;
  enum bool putgmac = false;
  enum bool quoteit = false;
  enum bool gotangle = false;
  enum bool gotcolon = false;
  memset((void *)(crackaddr_canary),'A',(size_t)(10 + 1));
  strcpy(crackaddr_test_buf,"GOOD");
  printf("Inside crackaddr!\n"); /* printf_va_1 */
  while (1) {
    if ((int)*addr != '\000') {
      int tmp;
      tmp = isascii((int)*addr);
      if (tmp) {
        int tmp_0;
        tmp_0 = isspace((int)*addr);
        if (! tmp_0) break;
      }
      else break;
    }
    else break;
    addr ++;
  }
  bufhead = crackaddr_buf;
  bp = bufhead;
  obp = bp;
  buflim = & crackaddr_buf[sizeof(crackaddr_buf) - (unsigned long)7];
  addrhead = addr;
  p = addrhead;
  realcmtlev = 0;
  cmtlev = realcmtlev;
  realanglelev = cmtlev;
  anglelev = realanglelev;
  copylev = anglelev;
  bracklev = 0;
  realqmode = false;
  qmode = realqmode;
  printf("qmode = %d\n",(int)qmode); /* printf_va_2 */
  while (1) {
    char *tmp_40;
    tmp_40 = p;
    p ++;
    c = *tmp_40;
    if (! ((int)c != '\000')) break;
    {
      char *tmp_24;
      printf("c = %c\n",(int)c); /* printf_va_3 */
      skipping = (enum bool)(bp >= buflim);
      if (copylev > 0) 
        if (! skipping) {
          char *tmp_1;
          tmp_1 = bp;
          bp ++;
          *tmp_1 = c;
        }
      if ((int)c == '\\') {
        char *tmp_2;
        if (cmtlev <= 0) 
          if (! qmode) quoteit = true;
        tmp_2 = p;
        p ++;
        c = *tmp_2;
        if ((int)c == '\000') {
          p --;
          goto putg;
        }
        if (copylev > 0) 
          if (! skipping) {
            char *tmp_3;
            tmp_3 = bp;
            bp ++;
            *tmp_3 = c;
          }
        goto putg;
      }
      if ((int)c == '\"') 
        if (cmtlev <= 0) {
          printf("quoted string...\n"); /* printf_va_4 */
          qmode = (enum bool)(! qmode);
          if (copylev > 0) 
            if (! skipping) realqmode = (enum bool)(! realqmode);
          continue;
        }
      if (qmode) goto putg;
      if ((int)c == '(') {
        printf("left ( seen....\n"); /* printf_va_5 */
        cmtlev ++;
        if (! skipping) {
          int tmp_6;
          buflim --;
          realcmtlev ++;
          tmp_6 = copylev;
          copylev ++;
          ;
          if (tmp_6 <= 0) {
            char *tmp_5;
            if (bp != bufhead) {
              char *tmp_4;
              tmp_4 = bp;
              bp ++;
              *tmp_4 = (char)' ';
            }
            tmp_5 = bp;
            bp ++;
            *tmp_5 = c;
          }
        }
      }
      if (cmtlev > 0) {
        if ((int)c == ')') {
          cmtlev --;
          copylev --;
          if (! skipping) {
            realcmtlev --;
            buflim ++;
          }
        }
        continue;
      }
      else 
        if ((int)c == ')') 
          if (copylev > 0) 
            if (! skipping) bp --;
      if ((int)c == '[') bracklev ++;
      else 
        if ((int)c == ']') bracklev --;
      if ((int)c == ':') 
        if (anglelev <= 0) 
          if (bracklev <= 0) 
            if (! gotcolon) 
              if (! ColonOkInAddr) {
                register char *q;
                if ((int)*p == ':') goto _LOR;
                else 
                  if ((int)*p == '.') {
                    _LOR:
                    {
                      if (cmtlev <= 0) 
                        if (! qmode) quoteit = true;
                      if (copylev > 0) 
                        if (! skipping) {
                          char *tmp_7;
                          char *tmp_8;
                          tmp_7 = bp;
                          bp ++;
                          *tmp_7 = c;
                          tmp_8 = bp;
                          bp ++;
                          *tmp_8 = *p;
                        }
                      p ++;
                      goto putg;
                    }
                  }
                gotcolon = true;
                bp = bufhead;
                if (quoteit) {
                  char *tmp_9;
                  tmp_9 = bp;
                  bp ++;
                  *tmp_9 = (char)'\"';
                  p --;
                  while (1) {
                    int tmp_10;
                    p --;
                    ;
                    tmp_10 = isascii((int)*p);
                    if (tmp_10) {
                      int tmp_11;
                      tmp_11 = isspace((int)*p);
                      if (! tmp_11) break;
                    }
                    else break;
                    continue;
                  }
                  p ++;
                }
                q = addrhead;
                while (q < p) {
                  char *tmp_12;
                  tmp_12 = q;
                  q ++;
                  c = *tmp_12;
                  if (bp < buflim) {
                    char *tmp_14;
                    if (quoteit) 
                      if ((int)c == '\"') {
                        char *tmp_13;
                        tmp_13 = bp;
                        bp ++;
                        *tmp_13 = (char)'\\';
                      }
                    tmp_14 = bp;
                    bp ++;
                    *tmp_14 = c;
                  }
                }
                if (quoteit) {
                  char *tmp_18;
                  if (bp == bufhead + 1) bp --;
                  else {
                    char *tmp_15;
                    tmp_15 = bp;
                    bp ++;
                    *tmp_15 = (char)'\"';
                  }
                  while (1) {
                    char *tmp_17;
                    tmp_17 = p;
                    p ++;
                    c = *tmp_17;
                    if (! ((int)c != ':')) break;
                    if (bp < buflim) {
                      char *tmp_16;
                      tmp_16 = bp;
                      bp ++;
                      *tmp_16 = c;
                    }
                  }
                  tmp_18 = bp;
                  bp ++;
                  *tmp_18 = c;
                }
                while (1) {
                  int tmp_21;
                  tmp_21 = isascii((int)*p);
                  if (tmp_21) {
                    int tmp_22;
                    tmp_22 = isspace((int)*p);
                    if (tmp_22) {
                      if (! (bp < buflim)) break;
                    }
                    else break;
                  }
                  else break;
                  {
                    char *tmp_19;
                    char *tmp_20;
                    tmp_19 = bp;
                    bp ++;
                    tmp_20 = p;
                    p ++;
                    *tmp_19 = *tmp_20;
                  }
                }
                copylev = 0;
                quoteit = false;
                putgmac = quoteit;
                bufhead = bp;
                addrhead = p;
                continue;
              }
      if ((int)c == ';') 
        if (copylev <= 0) 
          if (! ColonOkInAddr) 
            if (bp < buflim) {
              char *tmp_23;
              tmp_23 = bp;
              bp ++;
              *tmp_23 = c;
            }
      tmp_24 = strchr((char const *)MustQuoteChars,(int)c);
      if (tmp_24 != (char *)0) 
        if (cmtlev <= 0) 
          if (! qmode) quoteit = true;
      if ((int)c == '<') {
        register char *q_0;
        if (gotangle) quoteit = true;
        gotangle = true;
        anglelev = 1;
        if (! skipping) realanglelev = 1;
        bp = bufhead;
        if (quoteit) {
          char *tmp_25;
          tmp_25 = bp;
          bp ++;
          *tmp_25 = (char)'\"';
          p --;
          while (1) {
            int tmp_26;
            p --;
            ;
            tmp_26 = isascii((int)*p);
            if (tmp_26) {
              int tmp_27;
              tmp_27 = isspace((int)*p);
              if (! tmp_27) break;
            }
            else break;
            continue;
          }
          p ++;
        }
        q_0 = addrhead;
        while (q_0 < p) {
          char *tmp_28;
          tmp_28 = q_0;
          q_0 ++;
          c = *tmp_28;
          if (bp < buflim) {
            char *tmp_30;
            if (quoteit) 
              if ((int)c == '\"') {
                char *tmp_29;
                tmp_29 = bp;
                bp ++;
                *tmp_29 = (char)'\\';
              }
            tmp_30 = bp;
            bp ++;
            *tmp_30 = c;
          }
        }
        if (quoteit) {
          char *tmp_34;
          if (bp == & crackaddr_buf[1]) bp --;
          else {
            char *tmp_31;
            tmp_31 = bp;
            bp ++;
            *tmp_31 = (char)'\"';
          }
          while (1) {
            char *tmp_33;
            tmp_33 = p;
            p ++;
            c = *tmp_33;
            if (! ((int)c != '<')) break;
            if (bp < buflim) {
              char *tmp_32;
              tmp_32 = bp;
              bp ++;
              *tmp_32 = c;
            }
          }
          tmp_34 = bp;
          bp ++;
          *tmp_34 = c;
        }
        copylev = 0;
        quoteit = false;
        putgmac = quoteit;
        continue;
      }
      if ((int)c == '>') {
        int tmp_36;
        if (anglelev > 0) {
          anglelev --;
          if (! skipping) {
            realanglelev --;
            buflim ++;
          }
        }
        else 
          if (! skipping) {
            if (copylev > 0) bp --;
            quoteit = true;
            continue;
          }
        tmp_36 = copylev;
        copylev ++;
        ;
        if (tmp_36 <= 0) {
          char *tmp_35;
          tmp_35 = bp;
          bp ++;
          *tmp_35 = c;
        }
        continue;
      }
      putg: ;
      if (copylev <= 0) 
        if (! putgmac) {
          char *tmp_38;
          char *tmp_39;
          if (bp > bufhead) 
            if ((int)*(bp + -1) == ')') {
              char *tmp_37;
              tmp_37 = bp;
              bp ++;
              *tmp_37 = (char)' ';
            }
          tmp_38 = bp;
          bp ++;
          *tmp_38 = (char)((unsigned char)0201);
          tmp_39 = bp;
          bp ++;
          *tmp_39 = (char)'g';
          putgmac = true;
        }
      printf("Buf = %s\n",crackaddr_buf); /* printf_va_6 */
    }
  }
  if (realqmode) {
    char *tmp_41;
    tmp_41 = bp;
    bp ++;
    *tmp_41 = (char)'\"';
  }
  while (1) {
    int tmp_43;
    char *tmp_42;
    tmp_43 = realcmtlev;
    realcmtlev --;
    ;
    if (! (tmp_43 > 0)) break;
    tmp_42 = bp;
    bp ++;
    *tmp_42 = (char)')';
  }
  while (1) {
    int tmp_45;
    char *tmp_44;
    tmp_45 = realanglelev;
    realanglelev --;
    ;
    if (! (tmp_45 > 0)) break;
    tmp_44 = bp;
    bp ++;
    *tmp_44 = (char)'>';
  }
  tmp_46 = bp;
  bp ++;
  *tmp_46 = (char)'\000';
  printf("canary:\n"); /* printf_va_7 */
  printf("buf:\n"); /* printf_va_8 */
  __retres = crackaddr_buf;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_9(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdin->__fc_FILE_data, *(param0 + (0 ..));
    assigns \result
      \from (indirect: __fc_stdin->__fc_FILE_id),
            (indirect: __fc_stdin->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdin->__fc_FILE_data
      \from (indirect: __fc_stdin->__fc_FILE_id), __fc_stdin->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *(param0 + (0 ..))
      \from (indirect: __fc_stdin->__fc_FILE_id), __fc_stdin->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
 */
int scanf_va_1(char const * restrict format, char *param0);

int main(void)
{
  int __retres;
  char address[100];
  char *res_addr;
  MustQuoteChars = (char *)"@,;:\\()[].\'";
  printf("Enter email address:\n"); /* printf_va_9 */
  scanf("%99s",address); /* scanf_va_1 */
  res_addr = crackaddr(address);
  __retres = 0;
  return __retres;
}


