/* Generated by Frama-C */
#include "__fc_builtin.h"
#include "assert.h"
#include "ctype.h"
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
#include "string.h"
#include "strings.h"
int ap_isspace(char c);

int ap_tolower(char c);

char *ap_cpystrn(char *dst, char const *src, size_t dst_size);

char *get_tag(char *tag, int tagbuf_len)
{
  char *__retres;
  char *tag_val;
  char c;
  char term;
  char *t;
  t = tag;
  tagbuf_len --;
  while (1) {
    int tmp;
    c = Frama_C_char_interval((char)(-127 - 1),(char)127);
    tmp = ap_isspace(c);
    if (! tmp) break;
  }
  if ((int)c != '\"') 
    if ((int)c != '\'') {
      __retres = (char *)0;
      goto return_label;
    }
  term = c;
  while (1) {
    c = Frama_C_char_interval((char)(-127 - 1),(char)127);
    if (t == tag + tagbuf_len) {
      *t = (char)0;
      __retres = (char *)0;
      goto return_label;
    }
    if ((int)c == '\\') {
      *t = c;
      t ++;
      c = Frama_C_char_interval((char)(-127 - 1),(char)127);
      if ((int)c == (int)term) {
        t --;
        *t = c;
      }
    }
    else 
      if ((int)c == (int)term) break;
    *t = c;
    t ++;
  }
  *t = (char)0;
  __retres = tag;
  return_label: return __retres;
}

int main(void)
{
  int __retres;
  char tag[2 + 2];
  get_tag(tag,2 + 2);
  __retres = 0;
  return __retres;
}

int ap_isspace(char c)
{
  int __retres;
  if ((int)c == '\t') {
    __retres = 1;
    goto return_label;
  }
  else 
    if ((int)c == '\n') {
      __retres = 1;
      goto return_label;
    }
    else 
      if ((int)c == '\v') {
        __retres = 1;
        goto return_label;
      }
      else 
        if ((int)c == '\f') {
          __retres = 1;
          goto return_label;
        }
        else 
          if ((int)c == '\r') {
            __retres = 1;
            goto return_label;
          }
          else 
            if ((int)c == ' ') {
              __retres = 1;
              goto return_label;
            }
  __retres = 0;
  return_label: return __retres;
}

int ap_tolower(char c)
{
  int __retres;
  __retres = (int)c;
  return __retres;
}

char *ap_cpystrn(char *dst, char const *src, size_t dst_size)
{
  char *__retres;
  int i;
  if (dst_size == (size_t)0) {
    __retres = dst;
    goto return_label;
  }
  i = 0;
  while ((size_t)i < dst_size - (size_t)1) {
    *(dst + i) = *(src + i);
    if ((int)*(src + i) == 0) {
      __retres = dst + i;
      goto return_label;
    }
    i ++;
  }
  *(dst + i) = (char)0;
  __retres = dst + i;
  return_label: return __retres;
}


