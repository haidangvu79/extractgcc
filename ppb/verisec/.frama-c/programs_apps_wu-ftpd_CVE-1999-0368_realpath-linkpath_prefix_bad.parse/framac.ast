/* Generated by Frama-C */
#include "__fc_builtin.h"
#include "assert.h"
#include "ctype.h"
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
#include "string.h"
#include "strings.h"
int istrchr(char const *s, int c);

uid_t geteuid(void);

int seteuid(uid_t euid);

int enable_signaling(void);

int delay_signaling(void);

int readlink(char const *path, char *buf, int bufsiz);

char *getcwd(char *buf, size_t size);

char *realpath(char const *pathname, char *result, char *chroot_path)
{
  char *__retres;
  char curpath[2 + 3];
  char workpath[2 + 3];
  char linkpath[2 + 3];
  char namebuf[2 + 3];
  int len;
  int where;
  int ptr;
  int last;
  int tmp_5;
  if (result == (char *)0) {
    __retres = (char *)0;
    goto return_label;
  }
  if (pathname == (char const *)0) {
    *result = (char)0;
    __retres = (char *)0;
    goto return_label;
  }
  strcpy(curpath,pathname);
  if ((int)*pathname != '/') {
    uid_t userid;
    char *tmp_0;
    tmp_0 = getcwd(workpath,(size_t)(2 + 3));
    if (! tmp_0) {
      char *tmp;
      userid = geteuid();
      delay_signaling();
      seteuid((uid_t)0);
      tmp = getcwd(workpath,(size_t)(2 + 3));
      if (! tmp) {
        strcpy(result,".");
        seteuid(userid);
        enable_signaling();
        __retres = (char *)0;
        goto return_label;
      }
      seteuid(userid);
      enable_signaling();
    }
  }
  else workpath[0] = (char)0;
  where = 0;
  while ((int)curpath[where] != 0) {
    int tmp_1;
    int tmp_2;
    int tmp_3;
    tmp_1 = strcmp((char const *)(& curpath[where]),".");
    if (! tmp_1) {
      where ++;
      continue;
    }
    tmp_2 = strncmp((char const *)(& curpath[where]),"./",(size_t)2);
    if (! tmp_2) {
      where += 2;
      continue;
    }
    tmp_3 = strncmp((char const *)(& curpath[where]),"../",(size_t)3);
    if (! tmp_3) {
      where += 3;
      last = 0;
      ptr = last;
      while ((int)workpath[ptr] != 0) {
        if ((int)workpath[ptr] == '/') last = ptr;
        ptr ++;
      }
      workpath[last] = (char)0;
      continue;
    }
    ptr = istrchr((char const *)(& curpath[where]),'/');
    if ((int)curpath[ptr] == 0) {
      size_t tmp_4;
      tmp_4 = strlen((char const *)(& curpath[where]));
      ptr = (int)(((size_t)where + tmp_4) - (size_t)1);
    }
    else curpath[ptr] = (char)0;
    strcpy(namebuf,(char const *)(workpath));
    last = 0;
    while ((int)namebuf[last] != 0) {
      goto __Cont;
      __Cont: last ++;
    }
  }
  tmp_5 = Frama_C_interval(-2147483647 - 1,2147483647);
  if (tmp_5 == 1) {
    len = readlink((char const *)(namebuf),linkpath,2 + 3);
    if (len <= 0) {
      __retres = (char *)0;
      goto return_label;
    }
    linkpath[len] = (char)0;
    if ((int)linkpath[0] == '/') workpath[0] = (char)0;
    if ((int)curpath[where] != 0) {
      strcat(linkpath,"/");
      strcat(linkpath,(char const *)(& curpath[where]));
    }
    strcpy(curpath,(char const *)(linkpath));
  }
  __retres = result;
  return_label: return __retres;
}

int main(void)
{
  int __retres;
  char pathname[2 + 3];
  char result[2 + 3];
  char chroot_path[2 + 3];
  pathname[(2 + 3) - 1] = (char)0;
  result[(2 + 3) - 1] = (char)0;
  chroot_path[(2 + 3) - 1] = (char)0;
  realpath((char const *)(pathname),result,chroot_path);
  __retres = 0;
  return __retres;
}


