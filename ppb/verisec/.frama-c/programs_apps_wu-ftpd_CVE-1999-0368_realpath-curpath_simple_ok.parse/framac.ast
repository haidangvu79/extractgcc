/* Generated by Frama-C */
#include "__fc_builtin.h"
#include "assert.h"
#include "ctype.h"
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
#include "string.h"
#include "strings.h"
uid_t geteuid(void);

int seteuid(uid_t euid);

int enable_signaling(void);

int delay_signaling(void);

int readlink(char const *path, char *buf, int bufsiz);

char *getcwd(char *buf, size_t size);

char *realpath(char const *pathname, char *result, char *chroot_path)
{
  char *__retres;
  char curpath[2 + 3];
  if (result == (char *)0) {
    __retres = (char *)0;
    goto return_label;
  }
  if (pathname == (char const *)0) {
    *result = (char)0;
    __retres = (char *)0;
    goto return_label;
  }
  strncpy(curpath,pathname,(size_t)(2 + 3));
  __retres = result;
  return_label: return __retres;
}

int main(void)
{
  int __retres;
  char pathname[(2 + 3) + 1];
  char result[2 + 3];
  char chroot_path[2 + 3];
  Frama_C_make_unknown(pathname,(size_t)(((2 + 3) + 1) - 1));
  pathname[((2 + 3) + 1) - 1] = (char)0;
  Frama_C_make_unknown(result,(size_t)((2 + 3) - 1));
  result[(2 + 3) - 1] = (char)0;
  Frama_C_make_unknown(chroot_path,(size_t)((2 + 3) - 1));
  chroot_path[(2 + 3) - 1] = (char)0;
  realpath((char const *)(pathname),result,chroot_path);
  __retres = 0;
  return __retres;
}

uid_t geteuid(void)
{
  uid_t __retres;
  short tmp;
  tmp = Frama_C_short_interval((short)(-32767 - 1),(short)32767);
  __retres = (uid_t)tmp;
  return __retres;
}

int seteuid(uid_t euid)
{
  int __retres;
  int tmp;
  tmp = Frama_C_interval(-2147483647 - 1,2147483647);
  if (tmp == 0) {
    __retres = 0;
    goto return_label;
  }
  __retres = -1;
  return_label: return __retres;
}

int enable_signaling(void)
{
  int __retres;
  __retres = 0;
  return __retres;
}

int delay_signaling(void)
{
  int __retres;
  __retres = 0;
  return __retres;
}

int readlink(char const *path, char *buf, int bufsiz)
{
  int __retres;
  int n = Frama_C_interval(-2147483647 - 1,2147483647);
  if (n < bufsiz) 
    if (n >= 0) {
      __retres = n;
      goto return_label;
    }
  __retres = -1;
  return_label: return __retres;
}

char *getcwd(char *buf, size_t size)
{
  char *__retres;
  int tmp;
  tmp = Frama_C_interval(-2147483647 - 1,2147483647);
  if (tmp == 0) {
    __retres = (char *)0;
    goto return_label;
  }
  *(buf + (size - (size_t)1)) = (char)0;
  __retres = buf;
  return_label: return __retres;
}


