/* Generated by Frama-C */
#include "errno.h"
#include "inttypes.h"
#include "netdb.h"
#include "netinet/in.h"
#include "signal.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
#include "sys/socket.h"
#include "sys/uio.h"
uint32_t volatile _rand;
uint32_t nonzero_uint32_t(void)
{
  uint32_t __retres;
  uint32_t r = _rand;
  if (! r) {
    __retres = 1U;
    goto return_label;
  }
  else {
    __retres = r;
    goto return_label;
  }
  return_label: return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
 */
int fprintf_va_1(FILE * restrict stream, char const * restrict format);

static void validate_addr_form(char *v)
{
  size_t tmp;
  size_t tmp_0;
  tmp = strspn((char const *)v,
               "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-0123456789.");
  tmp_0 = strlen((char const *)v);
  if (tmp < tmp_0) {
    fprintf(__fc_stderr,"hostname contains invalid characters"); /* fprintf_va_1 */
    exit(1);
  }
  return;
}

static int my_strcmp(char const *s1, char const *s2)
{
  int __retres;
  size_t i;
  i = (size_t)0;
  while ((int)*(s1 + i) == (int)*(s2 + i)) {
    if ((int)*(s1 + i) == 0) {
      __retres = 0;
      goto return_label;
    }
    i ++;
  }
  __retres = (int)*((unsigned char *)s1 + i) - (int)*((unsigned char *)s2 + i);
  return_label: return __retres;
}

static in_addr_t my_inet_addr(char const *cp)
{
  in_addr_t __retres;
  int tmp_0;
  tmp_0 = my_strcmp(cp,"127.0.0.1");
  if (tmp_0 == 0) {
    __retres = (in_addr_t)0;
    goto return_label;
  }
  else {
    in_addr_t tmp;
    tmp = nonzero_uint32_t();
    __retres = tmp;
    goto return_label;
  }
  return_label: return __retres;
}

static struct hostent my_gethostbyaddr_res;
static struct hostent *my_gethostbyaddr(void const *addr, socklen_t len,
                                        int type)
{
  struct hostent *__retres;
  if ((in_addr_t *)addr == (in_addr_t *)0) my_gethostbyaddr_res.h_name = (char *)"www.example.com";
  else my_gethostbyaddr_res.h_name = (char *)"hypermegagigaterasupercalifragilisticexpialidocious2.example.com";
  __retres = & my_gethostbyaddr_res;
  return __retres;
}

void host_lookup(char *user_supplied_addr)
{
  struct hostent *hp;
  in_addr_t addr;
  char hostname[64];
  validate_addr_form(user_supplied_addr);
  addr = my_inet_addr((char const *)user_supplied_addr);
  hp = my_gethostbyaddr((void const *)(& addr),
                        (socklen_t)sizeof(struct in_addr),2);
  strcpy(hostname,(char const *)hp->h_name);
  return;
}

int main(void)
{
  int __retres;
  char *very_large_but_valid_hostname = (char *)"127.0.0.1";
  host_lookup(very_large_but_valid_hostname);
  char *overly_large_hostname = (char *)"127.0.0.2";
  host_lookup(overly_large_hostname);
  __retres = 0;
  return __retres;
}


