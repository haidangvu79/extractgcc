/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1(char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_2(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_3(char const * restrict format, int param0, int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_4(char const * restrict format, int param0, int param1);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_5(char const * restrict format, char *param0);

int main(void)
{
  int __retres;
  char freddy[7];
  size_t tmp_0;
  int InChar;
  char ShowChar;
  FILE *f = fopen("fred.txt","w");
  fwrite((void const *)"hello\nhello\n",(size_t)1,(size_t)12,f);
  fclose(f);
  f = fopen("fred.txt","r");
  tmp_0 = fread((void *)(freddy),(size_t)1,(size_t)6,f);
  if (tmp_0 != (size_t)6) printf("couldn\'t read fred.txt\n"); /* printf_va_1 */
  freddy[6] = (char)'\000';
  fclose(f);
  printf("%s",freddy); /* printf_va_2 */
  f = fopen("fred.txt","r");
  while (1) {
    InChar = fgetc(f);
    if (! (InChar != -1)) break;
    ShowChar = (char)InChar;
    if ((int)ShowChar < ' ') ShowChar = (char)'.';
    printf("ch: %d \'%c\'\n",InChar,(int)ShowChar); /* printf_va_3 */
  }
  fclose(f);
  f = fopen("fred.txt","r");
  while (1) {
    InChar = getc(f);
    if (! (InChar != -1)) break;
    ShowChar = (char)InChar;
    if ((int)ShowChar < ' ') ShowChar = (char)'.';
    printf("ch: %d \'%c\'\n",InChar,(int)ShowChar); /* printf_va_4 */
  }
  fclose(f);
  f = fopen("fred.txt","r");
  while (1) {
    char *tmp_1;
    tmp_1 = fgets(freddy,(int)sizeof(freddy),f);
    if (! (tmp_1 != (char *)0)) break;
    printf("x: %s",freddy); /* printf_va_5 */
  }
  fclose(f);
  __retres = 0;
  return __retres;
}


