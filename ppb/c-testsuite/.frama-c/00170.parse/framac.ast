/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
enum fred {
    a = 0,
    b = 1,
    c = 2,
    d = 3,
    e = 54,
    f = 73,
    g = 74,
    h = 75
};
enum efoo;
enum efoo;
enum efoo {
    ONE = 0,
    TWO = 1
};
struct S2 {
   enum efoo (*f2)(void) ;
};
enum Epositive {
    epos_one = 0,
    epos_two = 1
};
enum efoo it_real_fn(void);

void should_compile(struct S2 *s)
{
  s->f2 = & it_real_fn;
  return;
}

enum efoo it_real_fn(void)
{
  enum efoo __retres;
  __retres = TWO;
  return __retres;
}

static unsigned int deref_uintptr(unsigned int *p)
{
  unsigned int __retres;
  __retres = *p;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param7),
            (indirect: param6), (indirect: param5), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param7, param6, param5, param4, param3, param2, param1, param0;
 */
int printf_va_1(char const * restrict format, int param0, int param1,
                int param2, int param3, int param4, int param5, int param6,
                int param7);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_2(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_3(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_4(char const * restrict format, unsigned int param0);

int main(void)
{
  int __retres;
  enum fred frod;
  unsigned int tmp;
  enum Epositive epos = epos_two;
  printf("%d %d %d %d %d %d %d %d\n",a,b,c,d,e,f,g,h); /* printf_va_1 */
  frod = (enum fred)12;
  printf("%d\n",(int)frod); /* printf_va_2 */
  frod = e;
  printf("%d\n",(int)frod); /* printf_va_3 */
  tmp = deref_uintptr((unsigned int *)(& epos));
  printf("enum to int: %u\n",tmp); /* printf_va_4 */
  __retres = 0;
  return __retres;
}


