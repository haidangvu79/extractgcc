/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
#include "stdlib.h"
int A[4];
int B[4];
int C[4];
void Hanoi(int n, int *source, int *dest, int *spare);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_2(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_3(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_4(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_5(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_6(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_7(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_8(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_9(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_10(char const * restrict format);

void PrintAll(void)
{
  int i;
  printf("A: "); /* printf_va_1 */
  i = 0;
  while (i < 4) {
    printf(" %d ",A[i]); /* printf_va_2 */
    i ++;
  }
  printf("\n"); /* printf_va_3 */
  printf("B: "); /* printf_va_4 */
  i = 0;
  while (i < 4) {
    printf(" %d ",B[i]); /* printf_va_5 */
    i ++;
  }
  printf("\n"); /* printf_va_6 */
  printf("C: "); /* printf_va_7 */
  i = 0;
  while (i < 4) {
    printf(" %d ",C[i]); /* printf_va_8 */
    i ++;
  }
  printf("\n"); /* printf_va_9 */
  printf("------------------------------------------\n"); /* printf_va_10 */
  return;
}

int Move(int *source, int *dest)
{
  int __retres;
  int i = 0;
  int j = 0;
  while (1) {
    if (i < 4) {
      if (! (*(source + i) == 0)) break;
    }
    else break;
    i ++;
  }
  while (1) {
    if (j < 4) {
      if (! (*(dest + j) == 0)) break;
    }
    else break;
    j ++;
  }
  /*@ assert j > 0; */ ;
  /*@ assert i < 4; */ ;
  *(dest + (j - 1)) = *(source + i);
  *(source + i) = 0;
  PrintAll();
  __retres = *(dest + (j - 1));
  return __retres;
}

/*@ assigns *(source + (0 .. 4 - 1)), *(dest + (0 .. 4 - 1)),
            *(spare + (0 .. 4 - 1));
    assigns *(source + (0 .. 4 - 1))
      \from *(source + (0 .. 4 - 1)), *(dest + (0 .. 4 - 1)),
            *(spare + (0 .. 4 - 1)), (indirect: n);
    assigns *(dest + (0 .. 4 - 1))
      \from *(source + (0 .. 4 - 1)), *(dest + (0 .. 4 - 1)),
            *(spare + (0 .. 4 - 1)), (indirect: n);
    assigns *(spare + (0 .. 4 - 1))
      \from *(source + (0 .. 4 - 1)), *(dest + (0 .. 4 - 1)),
            *(spare + (0 .. 4 - 1)), (indirect: n);
 */
void Hanoi(int n, int *source, int *dest, int *spare)
{
  int i;
  if (n == 1) {
    Move(source,dest);
    goto return_label;
  }
  Hanoi(n - 1,source,spare,dest);
  Move(source,dest);
  Hanoi(n - 1,spare,dest,source);
  return_label: return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_11(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_12(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_13(char const * restrict format);

int main(void)
{
  int __retres;
  int i;
  i = 0;
  while (i < 4) {
    A[i] = i + 1;
    i ++;
  }
  i = 0;
  while (i < 4) {
    B[i] = 0;
    i ++;
  }
  i = 0;
  while (i < 4) {
    C[i] = 0;
    i ++;
  }
  printf("Solution of Tower of Hanoi Problem with %d Disks\n\n",4); /* printf_va_11 */
  printf("Starting state:\n"); /* printf_va_12 */
  PrintAll();
  printf("\n\nSubsequent states:\n\n"); /* printf_va_13 */
  Hanoi(4,A,B,C);
  __retres = 0;
  return __retres;
}


