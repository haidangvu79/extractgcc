/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stdio.h"
#include "stdlib.h"
void topline(int d, char *p)
{
  char *tmp;
  char *tmp_2;
  tmp = p;
  p ++;
  *tmp = (char)' ';
  switch (d) {
    char *tmp_0;
    char *tmp_1;
    case 0: case 2: case 3: case 5: case 7: case 8: case 9:
    { /* sequence */
      tmp_0 = p;
      p ++;
      *tmp_0 = (char)'_';
    }
    break;
    default: { /* sequence */
               tmp_1 = p;
               p ++;
               *tmp_1 = (char)' ';
             }
  }
  tmp_2 = p;
  p ++;
  *tmp_2 = (char)' ';
  return;
}

void midline(int d, char *p)
{
  switch (d) {
    char *tmp;
    char *tmp_0;
    case 0: case 4: case 5: case 6: case 8: case 9:
    { /* sequence */
      tmp = p;
      p ++;
      *tmp = (char)'|';
    }
    break;
    default: { /* sequence */
               tmp_0 = p;
               p ++;
               *tmp_0 = (char)' ';
             }
  }
  switch (d) {
    char *tmp_1;
    char *tmp_2;
    case 2: case 3: case 4: case 5: case 6: case 8: case 9:
    { /* sequence */
      tmp_1 = p;
      p ++;
      *tmp_1 = (char)'_';
    }
    break;
    default: { /* sequence */
               tmp_2 = p;
               p ++;
               *tmp_2 = (char)' ';
             }
  }
  switch (d) {
    char *tmp_3;
    char *tmp_4;
    case 0: case 1: case 2: case 3: case 4: case 7: case 8: case 9:
    { /* sequence */
      tmp_3 = p;
      p ++;
      *tmp_3 = (char)'|';
    }
    break;
    default: { /* sequence */
               tmp_4 = p;
               p ++;
               *tmp_4 = (char)' ';
             }
  }
  return;
}

void botline(int d, char *p)
{
  switch (d) {
    char *tmp;
    char *tmp_0;
    case 0: case 2: case 6: case 8:
    { /* sequence */
      tmp = p;
      p ++;
      *tmp = (char)'|';
    }
    break;
    default: { /* sequence */
               tmp_0 = p;
               p ++;
               *tmp_0 = (char)' ';
             }
  }
  switch (d) {
    char *tmp_1;
    char *tmp_2;
    case 0: case 2: case 3: case 5: case 6: case 8:
    { /* sequence */
      tmp_1 = p;
      p ++;
      *tmp_1 = (char)'_';
    }
    break;
    default: { /* sequence */
               tmp_2 = p;
               p ++;
               *tmp_2 = (char)' ';
             }
  }
  switch (d) {
    char *tmp_3;
    char *tmp_4;
    case 0: case 1: case 3: case 4: case 5: case 6: case 7: case 8: case 9:
    { /* sequence */
      tmp_3 = p;
      p ++;
      *tmp_3 = (char)'|';
    }
    break;
    default: { /* sequence */
               tmp_4 = p;
               p ++;
               *tmp_4 = (char)' ';
             }
  }
  return;
}

static int print_led_d[32];
void print_led(unsigned long x, char *buf)
{
  int n;
  char *tmp_1;
  char *tmp_3;
  char *tmp_5;
  int i = 0;
  if (x == (unsigned long)0L) n = 1; else n = 0;
  while (x) {
    int tmp;
    tmp = n;
    n ++;
    print_led_d[tmp] = (int)(x % (unsigned long)10L);
    if (n >= 32) break;
    x /= (unsigned long)10L;
  }
  i = n - 1;
  while (i >= 0) {
    {
      char *tmp_0;
      topline(print_led_d[i],buf);
      buf += 3;
      tmp_0 = buf;
      buf ++;
      *tmp_0 = (char)' ';
    }
    i --;
  }
  tmp_1 = buf;
  buf ++;
  *tmp_1 = (char)'\n';
  i = n - 1;
  while (i >= 0) {
    {
      char *tmp_2;
      midline(print_led_d[i],buf);
      buf += 3;
      tmp_2 = buf;
      buf ++;
      *tmp_2 = (char)' ';
    }
    i --;
  }
  tmp_3 = buf;
  buf ++;
  *tmp_3 = (char)'\n';
  i = n - 1;
  while (i >= 0) {
    {
      char *tmp_4;
      botline(print_led_d[i],buf);
      buf += 3;
      tmp_4 = buf;
      buf ++;
      *tmp_4 = (char)' ';
    }
    i --;
  }
  tmp_5 = buf;
  buf ++;
  *tmp_5 = (char)'\n';
  *buf = (char)'\000';
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_1(char const * restrict format, char *param0);

int main(void)
{
  int __retres;
  char buf[5 * 32];
  print_led((unsigned long)1234567,buf);
  printf("%s\n",buf); /* printf_va_1 */
  __retres = 0;
  return __retres;
}


