/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
int array[16];
void swap(int a, int b)
{
  int tmp = array[a];
  array[a] = array[b];
  array[b] = tmp;
  return;
}

int partition(int left, int right)
{
  int i;
  int pivotIndex = left;
  int pivotValue = array[pivotIndex];
  int index = left;
  swap(pivotIndex,right);
  i = left;
  while (i < right) {
    if (array[i] < pivotValue) {
      swap(i,index);
      index ++;
    }
    i ++;
  }
  swap(right,index);
  return index;
}

/*@ assigns array[0 .. 15];
    assigns array[0 .. 15]
      \from array[0 .. 15], (indirect: left), (indirect: right);
 */
void quicksort(int left, int right)
{
  if (left >= right) goto return_label;
  int index = partition(left,right);
  quicksort(left,index - 1);
  quicksort(index + 1,right);
  return_label: return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_2(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_3(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_4(char const * restrict format);

int main(void)
{
  int __retres;
  int i;
  array[0] = 62;
  array[1] = 83;
  array[2] = 4;
  array[3] = 89;
  array[4] = 36;
  array[5] = 21;
  array[6] = 74;
  array[7] = 37;
  array[8] = 65;
  array[9] = 33;
  array[10] = 96;
  array[11] = 38;
  array[12] = 53;
  array[13] = 16;
  array[14] = 74;
  array[15] = 55;
  i = 0;
  while (i < 16) {
    printf("%d ",array[i]); /* printf_va_1 */
    i ++;
  }
  printf("\n"); /* printf_va_2 */
  quicksort(0,15);
  i = 0;
  while (i < 16) {
    printf("%d ",array[i]); /* printf_va_3 */
    i ++;
  }
  printf("\n"); /* printf_va_4 */
  __retres = 0;
  return __retres;
}


