/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1(char const * restrict format);

int fred(void)
{
  int __retres;
  printf("fred\n"); /* printf_va_1 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_2(char const * restrict format);

int joe(void)
{
  int __retres;
  printf("joe\n"); /* printf_va_2 */
  __retres = 1;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_3(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_4(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_5(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_6(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_7(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_8(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_9(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_10(char const * restrict format, int param0);

int main(void)
{
  int __retres;
  int tmp_1;
  int tmp;
  int tmp_4;
  int tmp_2;
  int tmp_7;
  int tmp_5;
  int tmp_10;
  int tmp_8;
  int tmp_13;
  int tmp_11;
  int tmp_16;
  int tmp_14;
  int tmp_19;
  int tmp_17;
  int tmp_22;
  int tmp_20;
  tmp = fred();
  if (tmp) {
    int tmp_0;
    tmp_0 = joe();
    if (tmp_0) tmp_1 = 1; else tmp_1 = 0;
  }
  else tmp_1 = 0;
  printf("%d\n",tmp_1); /* printf_va_3 */
  tmp_2 = fred();
  if (tmp_2) tmp_4 = 1;
  else {
    int tmp_3;
    tmp_3 = joe();
    if (tmp_3) tmp_4 = 1; else tmp_4 = 0;
  }
  printf("%d\n",tmp_4); /* printf_va_4 */
  tmp_5 = joe();
  if (tmp_5) {
    int tmp_6;
    tmp_6 = fred();
    if (tmp_6) tmp_7 = 1; else tmp_7 = 0;
  }
  else tmp_7 = 0;
  printf("%d\n",tmp_7); /* printf_va_5 */
  tmp_8 = joe();
  if (tmp_8) tmp_10 = 1;
  else {
    int tmp_9;
    tmp_9 = fred();
    if (tmp_9) tmp_10 = 1; else tmp_10 = 0;
  }
  printf("%d\n",tmp_10); /* printf_va_6 */
  tmp_11 = fred();
  if (tmp_11) {
    int tmp_12;
    tmp_12 = joe();
    if (1 + tmp_12) tmp_13 = 1; else tmp_13 = 0;
  }
  else tmp_13 = 0;
  printf("%d\n",tmp_13); /* printf_va_7 */
  tmp_14 = fred();
  if (tmp_14) tmp_16 = 1;
  else {
    int tmp_15;
    tmp_15 = joe();
    if (0 + tmp_15) tmp_16 = 1; else tmp_16 = 0;
  }
  printf("%d\n",tmp_16); /* printf_va_8 */
  tmp_17 = joe();
  if (tmp_17) {
    int tmp_18;
    tmp_18 = fred();
    if (0 + tmp_18) tmp_19 = 1; else tmp_19 = 0;
  }
  else tmp_19 = 0;
  printf("%d\n",tmp_19); /* printf_va_9 */
  tmp_20 = joe();
  if (tmp_20) tmp_22 = 1;
  else {
    int tmp_21;
    tmp_21 = fred();
    if (1 + tmp_21) tmp_22 = 1; else tmp_22 = 0;
  }
  printf("%d\n",tmp_22); /* printf_va_10 */
  __retres = 0;
  return __retres;
}


