/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdint.h"
#include "stdio.h"
#include "string.h"
#include "strings.h"
char const *t =
  "Dual-tone multi-frequency signaling(DTMF) is a telecommunication signalingsystem using the voice-frequency bandInvalid WAV input\000Read error\000Cannot read dtmf.bin\000rb\000" + 111;
/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param0 + (0 ..));
 */
int fprintf_va_1(FILE * restrict stream, char const * restrict format,
                 char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param0 + (0 ..));
 */
int fprintf_va_2(FILE * restrict stream, char const * restrict format,
                 char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param0 + (0 ..));
 */
int fprintf_va_3(FILE * restrict stream, char const * restrict format,
                 char *param0);

int main(int m, char **f)
{
  int __retres;
  double aa;
  double c;
  double tmp;
  double g;
  double b;
  double x;
  char k[':' + 's'];
  FILE *h;
  int tmp_3;
  size_t tmp_0;
  uint32_t o[2];
  uint32_t z;
  uint32_t n;
  uint16_t e;
  uint16_t v;
  int16_t r;
  m --;
  if (m) tmp = (double)1; else tmp = 0.994;
  double d[8] = {[6] = tmp, 1e-4};
  double i = (double)0;
  double l['0'] = {(double)0};
  double e2 = (double)0;
  h = fopen(t + ')',t + '2');
  if (! h) {
    memcpy:
    fprintf(__fc_stderr,"%s\n",(char *)((t + 'A') - '$')); /* fprintf_va_1 */
    __retres = 1;
    goto return_label;
  }
  tmp_0 = fread((void *)(& k['U']),(size_t)',',(size_t)1,h);
  if (tmp_0) {
    size_t tmp_1;
    tmp_1 = fread((void *)(& l[16]),(size_t)('C' + '='),(size_t)1,h);
    if (tmp_1) {
      size_t tmp_2;
      tmp_2 = fread((void *)(k),(size_t)'Q',(size_t)1,h);
      if (tmp_2) tmp_3 = 0; else tmp_3 = 1;
    }
    else tmp_3 = 1;
  }
  else tmp_3 = 1;
  uint32_t p = (uint32_t)tmp_3;
  uint32_t w = (uint32_t)0;
  fclose(h);
  if (p) goto memcpy;
  if (m) h = __fc_stdout; else h = __fc_stdin;
  setvbuf(h,(char *)0,0,(size_t)65536);
  if (m) {
    size_t tmp_4;
    f ++;
    ;
    tmp_4 = strlen((char const *)*f);
    z = (uint32_t)((size_t)6400 * tmp_4);
    z = z;
    memcpy((void *)(& k['+'] + 'R'),(void const *)(& z),(size_t)4);
    z += (uint32_t)'$';
    memcpy((void *)(& k['Y']),(void const *)(& z),(size_t)4);
    fwrite((void const *)(& k['U']),(size_t)',',(size_t)1,h);
    while (*(*f)) {
      char *tmp_6;
      char *tmp_5;
      tmp_5 = *f;
      (*f) ++;
      ;
      tmp_6 = strchr((char const *)(k),(int)*tmp_5);
      char *c_0 = tmp_6;
      memset((void *)(l),0,(size_t)('F' + ':'));
      if (c_0) {
        w = (uint32_t)(c_0 - k);
        double *n_0 = & l[(w % (unsigned int)4) * (unsigned int)2];
        *n_0 = *(n_0 + 16);
        n_0 = & l[8] + ((w / (uint32_t)4) % (unsigned int)4) * (unsigned int)2;
        *n_0 = *(n_0 + 16);
      }
      w = (uint32_t)3200;
      while (w) {
        {
          int tmp_7;
          x = (double)0;
          z = (uint32_t)2;
          b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                           & l[z] + 0)) - *(& l[z] + 1) * d[6];
          *(& l[z] + 1) = *(& l[z] + 0);
          *(& l[z] + 0) = b * d[6];
          x += (b * e2) * 49e2;
          z = (uint32_t)10;
          b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                           & l[z] + 0)) - *(& l[z] + 1) * d[6];
          *(& l[z] + 1) = *(& l[z] + 0);
          *(& l[z] + 0) = b * d[6];
          x += (b * e2) * 49e2;
          z = (uint32_t)6;
          b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                           & l[z] + 0)) - *(& l[z] + 1) * d[6];
          *(& l[z] + 1) = *(& l[z] + 0);
          *(& l[z] + 0) = b * d[6];
          x += (b * e2) * 49e2;
          z = (uint32_t)12;
          b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                           & l[z] + 0)) - *(& l[z] + 1) * d[6];
          *(& l[z] + 1) = *(& l[z] + 0);
          *(& l[z] + 0) = b * d[6];
          x += (b * e2) * 49e2;
          z = (uint32_t)4;
          b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                           & l[z] + 0)) - *(& l[z] + 1) * d[6];
          *(& l[z] + 1) = *(& l[z] + 0);
          *(& l[z] + 0) = b * d[6];
          x += (b * e2) * 49e2;
          z = (uint32_t)8;
          b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                           & l[z] + 0)) - *(& l[z] + 1) * d[6];
          *(& l[z] + 1) = *(& l[z] + 0);
          *(& l[z] + 0) = b * d[6];
          x += (b * e2) * 49e2;
          z = (uint32_t)14;
          b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                           & l[z] + 0)) - *(& l[z] + 1) * d[6];
          *(& l[z] + 1) = *(& l[z] + 0);
          *(& l[z] + 0) = b * d[6];
          x += (b * e2) * 49e2;
          z = (uint32_t)0;
          b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                           & l[z] + 0)) - *(& l[z] + 1) * d[6];
          *(& l[z] + 1) = *(& l[z] + 0);
          *(& l[z] + 0) = b * d[6];
          x += (b * e2) * 49e2;
          r = (int16_t)x;
          fwrite((void const *)(& r),(size_t)2,(size_t)1,h);
          if (w > (uint32_t)1300) tmp_7 = 1; else tmp_7 = -1;
          e2 += (double)tmp_7 * 3e-2;
          if (e2 > (double)1) e2 = (double)1;
          else {
            double tmp_8;
            if (e2 > (double)0) tmp_8 = e2; else tmp_8 = (double)0;
            e2 = tmp_8;
          }
        }
        w --;
      }
    }
  }
  else {
    size_t tmp_9;
    int tmp_10;
    int tmp_17;
    tmp_9 = fread((void *)(& k['+'] + 'V'),(size_t)',',(size_t)1,h);
    if (! tmp_9) {
      fread: fprintf(__fc_stderr,"%s\n",(char *)(t + 18)); /* fprintf_va_2 */
      __retres = 1;
      goto return_label;
    }
    tmp_10 = memcmp((void const *)(& k['+'] + '^'),(void const *)(& k[']']),
                    (size_t)14);
    if (tmp_10) {
      int_16t: fprintf(__fc_stderr,"%s\n",(char *)t); /* fprintf_va_3 */
      __retres = 1;
      goto return_label;
    }
    memcpy((void *)(& n),(void const *)(& k['+'] + 'n'),(size_t)4);
    c = 16e3 / (double)n;
    n = (uint32_t)c;
    if ((double)n != c) n ++;
    c /= (double)n;
    memcpy((void *)(& v),(void const *)(& k[43] + 'x'),(size_t)2);
    v = (uint16_t)((int)v / 8);
    memcpy((void *)(& e),(void const *)(& k['+'] + 'v'),(size_t)2);
    if (! e) goto int_16t;
    else 
      if (! v) goto int_16t;
      else 
        if ((int)v > 4) goto int_16t;
    e = (uint16_t)((int)e - (int)v);
    while (1) {
      size_t tmp_16;
      tmp_16 = fread((void *)(& k['Q']),(size_t)v,(size_t)1,h);
      if (! tmp_16) break;
      z = (uint32_t)e;
      z = z;
      while (1) {
        uint32_t tmp_11;
        tmp_11 = z;
        z --;
        ;
        if (tmp_11) {
          int tmp_12;
          tmp_12 = getc(h);
          if (! (tmp_12 >= 0)) break;
        }
        else break;
      }
      if ((int)v > 1) {
        memcpy((void *)(& r),(void const *)(& k[v] + 'O'),(size_t)2);
        g = ((double)r / 512.0) / (double)'@';
      }
      else g = (double)((unsigned char)k['Q']) / 128.0 - (double)1;
      p = n;
      while (p) {
        {
          double tmp_13;
          double tmp_14;
          double tmp_15;
          aa = ((e2 - g) * (double)p) / (double)n + g;
          b = (double)0 - i;
          if (b < (double)0) b = (double)1 + b; else b = (double)1 - b;
          if (b > (double)0) tmp_13 = (b * c) * aa; else tmp_13 = (double)0;
          d[0 + 2] += tmp_13;
          b = (double)1 - i;
          if (b < (double)0) b = (double)1 + b; else b = (double)1 - b;
          if (b > (double)0) tmp_14 = (b * c) * aa; else tmp_14 = (double)0;
          d[1 + 2] += tmp_14;
          b = (double)2 - i;
          if (b < (double)0) b = (double)1 + b; else b = (double)1 - b;
          if (b > (double)0) tmp_15 = (b * c) * aa; else tmp_15 = (double)0;
          d[2 + 2] += tmp_15;
          i += c;
          if (i >= (double)1) {
            memset((void *)(d),0,(size_t)16);
            memset((void *)(o),0,(size_t)8);
            x = (double)0;
            z = (uint32_t)2;
            b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                             & l[z] + 0)) - *(& l[z] + 1) * d[6];
            *(& l[z] + 1) = *(& l[z] + 0);
            *(& l[z] + 0) = b * d[6];
            b = *(& l[z] + 0) - (d[6] * *(& l[z] + 17)) * *(& l[z] + 1);
            aa = (d[6] * *(& l[z] + 1)) * *(& l[z] + 16);
            aa = b * b + aa * aa;
            x += aa;
            if (aa >= d[z / (uint32_t)8]) {
              o[z / (uint32_t)8] = z / (uint32_t)2;
              d[z / (uint32_t)8] = aa;
            }
            z = (uint32_t)10;
            b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                             & l[z] + 0)) - *(& l[z] + 1) * d[6];
            *(& l[z] + 1) = *(& l[z] + 0);
            *(& l[z] + 0) = b * d[6];
            b = *(& l[z] + 0) - (d[6] * *(& l[z] + 17)) * *(& l[z] + 1);
            aa = (d[6] * *(& l[z] + 1)) * *(& l[z] + 16);
            aa = b * b + aa * aa;
            x += aa;
            if (aa >= d[z / (uint32_t)8]) {
              o[z / (uint32_t)8] = z / (uint32_t)2;
              d[z / (uint32_t)8] = aa;
            }
            z = (uint32_t)6;
            b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                             & l[z] + 0)) - *(& l[z] + 1) * d[6];
            *(& l[z] + 1) = *(& l[z] + 0);
            *(& l[z] + 0) = b * d[6];
            b = *(& l[z] + 0) - (d[6] * *(& l[z] + 17)) * *(& l[z] + 1);
            aa = (d[6] * *(& l[z] + 1)) * *(& l[z] + 16);
            aa = b * b + aa * aa;
            x += aa;
            if (aa >= d[z / (uint32_t)8]) {
              o[z / (uint32_t)8] = z / (uint32_t)2;
              d[z / (uint32_t)8] = aa;
            }
            z = (uint32_t)12;
            b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                             & l[z] + 0)) - *(& l[z] + 1) * d[6];
            *(& l[z] + 1) = *(& l[z] + 0);
            *(& l[z] + 0) = b * d[6];
            b = *(& l[z] + 0) - (d[6] * *(& l[z] + 17)) * *(& l[z] + 1);
            aa = (d[6] * *(& l[z] + 1)) * *(& l[z] + 16);
            aa = b * b + aa * aa;
            x += aa;
            if (aa >= d[z / (uint32_t)8]) {
              o[z / (uint32_t)8] = z / (uint32_t)2;
              d[z / (uint32_t)8] = aa;
            }
            z = (uint32_t)4;
            b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                             & l[z] + 0)) - *(& l[z] + 1) * d[6];
            *(& l[z] + 1) = *(& l[z] + 0);
            *(& l[z] + 0) = b * d[6];
            b = *(& l[z] + 0) - (d[6] * *(& l[z] + 17)) * *(& l[z] + 1);
            aa = (d[6] * *(& l[z] + 1)) * *(& l[z] + 16);
            aa = b * b + aa * aa;
            x += aa;
            if (aa >= d[z / (uint32_t)8]) {
              o[z / (uint32_t)8] = z / (uint32_t)2;
              d[z / (uint32_t)8] = aa;
            }
            z = (uint32_t)8;
            b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                             & l[z] + 0)) - *(& l[z] + 1) * d[6];
            *(& l[z] + 1) = *(& l[z] + 0);
            *(& l[z] + 0) = b * d[6];
            b = *(& l[z] + 0) - (d[6] * *(& l[z] + 17)) * *(& l[z] + 1);
            aa = (d[6] * *(& l[z] + 1)) * *(& l[z] + 16);
            aa = b * b + aa * aa;
            x += aa;
            if (aa >= d[z / (uint32_t)8]) {
              o[z / (uint32_t)8] = z / (uint32_t)2;
              d[z / (uint32_t)8] = aa;
            }
            z = (uint32_t)14;
            b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                             & l[z] + 0)) - *(& l[z] + 1) * d[6];
            *(& l[z] + 1) = *(& l[z] + 0);
            *(& l[z] + 0) = b * d[6];
            b = *(& l[z] + 0) - (d[6] * *(& l[z] + 17)) * *(& l[z] + 1);
            aa = (d[6] * *(& l[z] + 1)) * *(& l[z] + 16);
            aa = b * b + aa * aa;
            x += aa;
            if (aa >= d[z / (uint32_t)8]) {
              o[z / (uint32_t)8] = z / (uint32_t)2;
              d[z / (uint32_t)8] = aa;
            }
            z = (uint32_t)0;
            b = (((double)1 - d[6]) * d[2] + ((double)2 * *(& l[z] + 17)) * *(
                                             & l[z] + 0)) - *(& l[z] + 1) * d[6];
            *(& l[z] + 1) = *(& l[z] + 0);
            *(& l[z] + 0) = b * d[6];
            b = *(& l[z] + 0) - (d[6] * *(& l[z] + 17)) * *(& l[z] + 1);
            aa = (d[6] * *(& l[z] + 1)) * *(& l[z] + 16);
            aa = b * b + aa * aa;
            x += aa;
            if (aa >= d[z / (uint32_t)8]) {
              o[z / (uint32_t)8] = z / (uint32_t)2;
              d[z / (uint32_t)8] = aa;
            }
            if (w) r = (int16_t)(x > d[7] * 0.45);
            else r = (int16_t)(x > d[7] * 0.6);
            if (r) {
              if (! w) memset((void *)(& l[32]),0,(size_t)128);
              if (x > d[7]) d[7] = x;
              l[((uint32_t)16 + o[1] * (uint32_t)4) + o[0]] += (double)1;
            }
            else 
              if (w) {
                b = (double)(-1);
                char j = (char)0;
                x = (double)0;
                z = (uint32_t)2;
                z = z;
                if (*(& l[z] + 32) > b) {
                  b = *(& l[z] + 32);
                  j = k[z];
                }
                if (*(& l[z] + 33) > b) {
                  b = *(& l[z] + 33);
                  j = k[z + (uint32_t)1];
                }
                z = (uint32_t)10;
                z = z;
                if (*(& l[z] + 32) > b) {
                  b = *(& l[z] + 32);
                  j = k[z];
                }
                if (*(& l[z] + 33) > b) {
                  b = *(& l[z] + 33);
                  j = k[z + (uint32_t)1];
                }
                z = (uint32_t)6;
                z = z;
                if (*(& l[z] + 32) > b) {
                  b = *(& l[z] + 32);
                  j = k[z];
                }
                if (*(& l[z] + 33) > b) {
                  b = *(& l[z] + 33);
                  j = k[z + (uint32_t)1];
                }
                z = (uint32_t)12;
                z = z;
                if (*(& l[z] + 32) > b) {
                  b = *(& l[z] + 32);
                  j = k[z];
                }
                if (*(& l[z] + 33) > b) {
                  b = *(& l[z] + 33);
                  j = k[z + (uint32_t)1];
                }
                z = (uint32_t)4;
                z = z;
                if (*(& l[z] + 32) > b) {
                  b = *(& l[z] + 32);
                  j = k[z];
                }
                if (*(& l[z] + 33) > b) {
                  b = *(& l[z] + 33);
                  j = k[z + (uint32_t)1];
                }
                z = (uint32_t)8;
                z = z;
                if (*(& l[z] + 32) > b) {
                  b = *(& l[z] + 32);
                  j = k[z];
                }
                if (*(& l[z] + 33) > b) {
                  b = *(& l[z] + 33);
                  j = k[z + (uint32_t)1];
                }
                z = (uint32_t)14;
                z = z;
                if (*(& l[z] + 32) > b) {
                  b = *(& l[z] + 32);
                  j = k[z];
                }
                if (*(& l[z] + 33) > b) {
                  b = *(& l[z] + 33);
                  j = k[z + (uint32_t)1];
                }
                z = (uint32_t)0;
                z = z;
                if (*(& l[z] + 32) > b) {
                  b = *(& l[z] + 32);
                  j = k[z];
                }
                if (*(& l[z] + 33) > b) {
                  b = *(& l[z] + 33);
                  j = k[z + (uint32_t)1];
                }
                putchar((int)j);
              }
            w = (uint32_t)r;
            memmove((void *)(& d[2]),(void const *)(& d[3]),(size_t)24);
            i -= (double)1;
          }
        }
        p --;
      }
      e2 = g;
    }
    tmp_17 = ferror(h);
    if (tmp_17) goto fread;
    if (w) {
      b = (double)(-1);
      char j_0 = (char)0;
      x = (double)0;
      z = (uint32_t)2;
      z = z;
      if (*(& l[z] + 32) > b) {
        b = *(& l[z] + 32);
        j_0 = k[z];
      }
      if (*(& l[z] + 33) > b) {
        b = *(& l[z] + 33);
        j_0 = k[z + (uint32_t)1];
      }
      z = (uint32_t)10;
      z = z;
      if (*(& l[z] + 32) > b) {
        b = *(& l[z] + 32);
        j_0 = k[z];
      }
      if (*(& l[z] + 33) > b) {
        b = *(& l[z] + 33);
        j_0 = k[z + (uint32_t)1];
      }
      z = (uint32_t)6;
      z = z;
      if (*(& l[z] + 32) > b) {
        b = *(& l[z] + 32);
        j_0 = k[z];
      }
      if (*(& l[z] + 33) > b) {
        b = *(& l[z] + 33);
        j_0 = k[z + (uint32_t)1];
      }
      z = (uint32_t)12;
      z = z;
      if (*(& l[z] + 32) > b) {
        b = *(& l[z] + 32);
        j_0 = k[z];
      }
      if (*(& l[z] + 33) > b) {
        b = *(& l[z] + 33);
        j_0 = k[z + (uint32_t)1];
      }
      z = (uint32_t)4;
      z = z;
      if (*(& l[z] + 32) > b) {
        b = *(& l[z] + 32);
        j_0 = k[z];
      }
      if (*(& l[z] + 33) > b) {
        b = *(& l[z] + 33);
        j_0 = k[z + (uint32_t)1];
      }
      z = (uint32_t)8;
      z = z;
      if (*(& l[z] + 32) > b) {
        b = *(& l[z] + 32);
        j_0 = k[z];
      }
      if (*(& l[z] + 33) > b) {
        b = *(& l[z] + 33);
        j_0 = k[z + (uint32_t)1];
      }
      z = (uint32_t)14;
      z = z;
      if (*(& l[z] + 32) > b) {
        b = *(& l[z] + 32);
        j_0 = k[z];
      }
      if (*(& l[z] + 33) > b) {
        b = *(& l[z] + 33);
        j_0 = k[z + (uint32_t)1];
      }
      z = (uint32_t)0;
      z = z;
      if (*(& l[z] + 32) > b) {
        b = *(& l[z] + 32);
        j_0 = k[z];
      }
      if (*(& l[z] + 33) > b) {
        b = *(& l[z] + 33);
        j_0 = k[z + (uint32_t)1];
      }
      putchar((int)j_0);
    }
    puts("0123456789" + 10);
  }
  __retres = 0;
  return_label: return __retres;
}


