/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdint.h"
#include "stdio.h"
int main(void)
{
  int __retres;
  int64_t e;
  int64_t k;
  int64_t n;
  uint32_t h[20] = {(uint32_t)0};
  uint32_t i = (uint32_t)0;
  uint32_t x = ~ i / (uint32_t)15;
  uint32_t f = x * x - x;
  uint32_t a = f ^ x;
  uint32_t b = f ^ x * (uint32_t)9;
  uint32_t c = ~ a;
  uint32_t d = ~ b;
  int64_t z = (int64_t)0;
  int64_t g = (int64_t)0;
  int64_t l = (int64_t)566548;
  int64_t p = (int64_t)585873;
  int64_t o = (int64_t)882346;
  int64_t m = (int64_t)64336;
  while (1) {
    i = (uint32_t)0;
    h[i] += a;
    a = h[i];
    h[1] += b;
    b = h[1];
    h[2] += c;
    c = h[2];
    h[3] += d;
    d = h[3];
    if (! f) break;
    n = (int64_t)64;
    while (1) {
      int64_t tmp_2;
      int64_t tmp_1;
      if (n == (int64_t)8) {
        h[5] = (uint32_t)g;
        h[4] = (uint32_t)(g >> 32);
        f = (uint32_t)(z >= (int64_t)0);
        tmp_2 = (int64_t)f;
      }
      else tmp_2 = n;
      if (! tmp_2) break;
      n --;
      if (z < (int64_t)0) tmp_1 = (int64_t)0;
      else {
        int64_t tmp_0;
        int tmp;
        tmp = getchar();
        z = (int64_t)tmp;
        if (z >= (int64_t)0) {
          g += (int64_t)8;
          tmp_0 = z;
        }
        else tmp_0 = (int64_t)128;
        tmp_1 = tmp_0;
      }
      x = (uint32_t)((tmp_1 << 24) | (long)(x >> 8));
      h[(int64_t)4 + n / (int64_t)4] = x;
    }
    e = (int64_t)0;
    k = ~ e << 40;
    while (1) {
      unsigned int tmp_5;
      uint32_t tmp_6;
      x = i / (uint32_t)16;
      if (! (x < (uint32_t)4)) break;
      n = (((e * m + k * p) >> 21) + e * l) + k * o;
      k = ((((k * m - e * p) >> 21) + k * l) - e * o) >> 20;
      e = n >> 20;
      n = (int64_t)((((((i | (unsigned int)12) * (unsigned int)152) % (unsigned int)543) % (unsigned int)82) % (unsigned int)4 + 
                     ((i % (unsigned int)4) * (unsigned int)43) / (unsigned int)8) + (unsigned int)4);
      if (x > (uint32_t)2) tmp_5 = ~ d | b;
      else {
        unsigned int tmp_4;
        if (x > (uint32_t)1) tmp_4 = b ^ d;
        else {
          unsigned int tmp_3;
          if (x) tmp_3 = (b ^ c) & d; else tmp_3 = (c ^ d) & ~ b;
          tmp_4 = tmp_3;
        }
        tmp_5 = tmp_4;
      }
      tmp_6 = i;
      i ++;
      x = (uint32_t)((long)((a + (tmp_5 ^ c)) + h[(unsigned int)19 - 
                                                  (((x * (uint32_t)7) / (uint32_t)2 & (unsigned int)5) - 
                                                   ~ (x * (uint32_t)5 & (unsigned int)6) * tmp_6) % (unsigned int)16]) + (
                     (e >> 40) ^ (e >> 8)));
      a = d;
      d = c;
      c = b;
      b += (x << n) | (x >> ((int64_t)32 - n));
    }
  }
  while (i < (uint32_t)33) {
    uint32_t tmp_9;
    uint32_t tmp_7;
    a = (h[i / (uint32_t)8] >> ((i % (unsigned int)8) * (unsigned int)4 ^ (unsigned int)4)) & (unsigned int)15;
    tmp_7 = i;
    i ++;
    ;
    if (tmp_7 < (uint32_t)32) {
      int tmp_8;
      if (a > (uint32_t)9) tmp_8 = 'a' - 10; else tmp_8 = '0';
      a += (uint32_t)tmp_8;
      tmp_9 = a;
    }
    else tmp_9 = (uint32_t)'\n';
    putchar((int)tmp_9);
  }
  __retres = 0;
  return __retres;
}


