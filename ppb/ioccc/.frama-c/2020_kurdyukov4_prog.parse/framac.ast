/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
int main(int c, char **V)
{
  int __retres;
  int k;
  int l;
  int p;
  int i;
  int x;
  int y;
  int n;
  int q;
  uint64_t s;
  uint64_t z;
  uint32_t *h;
  uint32_t a;
  uint32_t t[512];
  uint64_t S = (uint64_t)5;
  while (1) {
    int tmp_14;
    tmp_14 = c;
    c ++;
    ;
    if (! (tmp_14 == 5)) break;
    {
      uint8_t *m;
      void *F;
      int tmp;
      x = atoi((char const *)*(V + 2));
      y = atoi((char const *)*(V + 3));
      tmp = atoi((char const *)*(V + 4));
      s = (uint64_t)tmp;
      if (x >> 20) break;
      else 
        if ((y - 1) >> 7) break;
        else {
          q = 1;
          ;
          F = (void *)fopen((char const *)*(V + q),"rb");
          if (F) {
            int tmp_0;
            tmp_0 = fseek((FILE *)F,(long)0,2);
            if (tmp_0) break;
            else {
              long tmp_1;
              tmp_1 = ftell((FILE *)F);
              n = (int)tmp_1;
              ;
              if (y > n) break;
              else {
                int tmp_2;
                tmp_2 = fseek((FILE *)F,(long)0,0);
                if (tmp_2) break;
                else {
                  m = (uint8_t *)malloc((size_t)(n + y));
                  if (m) {
                    size_t tmp_3;
                    tmp_3 = fread((void *)m,(size_t)1,(size_t)n,(FILE *)F);
                    ;
                    if (tmp_3 - (size_t)n) break;
                    else 
                      if (n >> 29) break;
                  }
                  else break;
                }
              }
            }
          }
          else break;
        }
      fclose((FILE *)F);
      while (S * (uint64_t)5 > S) S *= (uint64_t)5;
      l = 0;
      k = l;
      i = k;
      while (i < n) {
        int tmp_6;
        tmp_6 = i;
        i ++;
        a = (uint32_t)*(m + tmp_6);
        if ((uint32_t)'_' - a) {
          if (a == (uint32_t)'<') {
            a = (uint32_t)' ';
            while (1) 
              if (i < n) {
                int tmp_4;
                tmp_4 = i;
                i ++;
                ;
                if (! ((int)*(m + tmp_4) - '>')) break;
              }
              else break;
          }
          if (a - (uint32_t)' ') {
            if (a - (uint32_t)'\n') {
              if (a - (uint32_t)'\r') {
                if (a - (uint32_t)'\t') goto _LOR; else goto _LAND_1;
              }
              else goto _LAND_1;
            }
            else goto _LAND_1;
          }
          else {
            _LAND_1: { /* sequence */
                       a = (uint32_t)' ';
                       ;
                     }
            if ((uint32_t)k - a) {
              int tmp_5;
              _LOR:
              { /* sequence */
                tmp_5 = l;
                l ++;
                k = (int)a;
                *(m + tmp_5) = (uint8_t)k;
              }
            }
          }
        }
      }
      n = l;
      memcpy((void *)(m + l),(void const *)m,(size_t)y);
      while (l * 3 > q) q += q;
      h = (uint32_t *)malloc((size_t)(4 * q));
      if (h) {
        int tmp_7;
        tmp_7 = q;
        q --;
        ;
        ;
        memset((void *)h,-1,(size_t)(4 * tmp_7));
        k = 0;
        while (k < l) {
          int tmp_8;
          i = 0;
          a = (uint32_t)i;
          while (i < y) {
            int tmp_9;
            tmp_9 = i;
            i ++;
            a = (a ^ (unsigned int)*(m + (k + tmp_9))) * (unsigned int)79764919;
          }
          while (1) {
            i = (int)*(h + (a & (unsigned int)q));
            if (! (i ^ -1)) break;
            a ++;
          }
          tmp_8 = k;
          k ++;
          *(h + (a & (unsigned int)q)) = (uint32_t)tmp_8;
        }
        s *= S;
        a = (uint32_t)(s >> 31);
        z = (uint64_t)a;
        p = (int)(z * (uint64_t)n >> 32);
        while (1) {
          int tmp_13;
          tmp_13 = x;
          x --;
          ;
          if (! tmp_13) break;
          n = 0;
          memset((void *)(t),n,(size_t)(8 << 8));
          i = 0;
          a = (uint32_t)i;
          while (i < y) {
            int tmp_10;
            tmp_10 = i;
            i ++;
            a = (a ^ (unsigned int)*(m + (p + tmp_10))) * (unsigned int)79764919;
          }
          while (1) {
            int tmp_12;
            i = (int)*(h + (a & (unsigned int)q));
            if (! (i ^ -1)) break;
            tmp_12 = memcmp((void const *)(m + p),(void const *)(m + i),
                            (size_t)y);
            if (! tmp_12) {
              int tmp_11;
              k = (int)*(m + (i + y)) * 2;
              tmp_11 = k;
              k ++;
              (t[tmp_11]) ++;
              n ++;
              t[k] = (uint32_t)i;
            }
            a ++;
          }
          s *= S;
          a = (uint32_t)(s >> 31);
          z = (uint64_t)a;
          n = (int)(z * (uint64_t)n >> 32);
          k = -1;
          while (n >= 0) {
            k ++;
            n = (int)((uint32_t)n - t[k * 2]);
          }
          putchar(k);
          p = (int)(t[(k + k) + 1] + (uint32_t)1);
          if (p - l) p = p; else p = 0;
        }
        putchar('\n');
        c = 0;
      }
    }
  }
  __retres = ! (! c);
  return __retres;
}


