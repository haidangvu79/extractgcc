/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stdio.h"
#include "stdlib.h"
union A {
   union A *(*t)(union A *x) ;
   union A *(*l)(union A *x, union A *y) ;
   union A *a ;
   long long p ;
};
typedef union A A;
void X(char *f, int r)
{
  fputs((char const *)f,__fc_stderr);
  exit(r);
  return;
}

A *R(A *x)
{
  ((x + (5 - 1))->p) ++;
  return x;
}

A *Ch(A *x);

A *Y(A *x);

A *fA(A *x);

A *fD(A *x, A *y);

A *fT(A *x, A *y);

A *fW(A *x, A *y);

A *fCh(A *x, A *y);

A *rA2(A *x, A *y);

A *fA2(A *x, A *y);

A *rY2(A *x, A *y);

A *Y2(A *x, A *y);

A *rS2(A *x, A *y);

A *fS22(A *x, A *y);

A *rD(A *x, A *y);

A *rE(A *x, A *y);

A *rT(A *x, A *y);

A *rC(A *x, A *y);

/*@ assigns \nothing; */
void D(A *f)
{
  if (f) {
    ((f + (5 - 1))->p) --;
    if (! (f + (5 - 1))->p) {
      if ((f + 0)->l != & fW) 
        if ((f + 0)->l != & fCh) D((f + 1)->a);
      if ((f + 0)->l != & fT) D((f + 2)->a);
      if ((f + 0)->l != & rE) 
        if ((f + 0)->l != & rT) 
          if ((f + 0)->l != & rC) D((f + 3)->a);
      free((void *)f);
    }
  }
  return;
}

int ch = -1;
int c;
FILE *p;
A T[256][2];

void U(void)
{
  while (1) {
    if (c == -1) goto return_label;
    if (T[c][0].t) goto return_label;
    if (! T[c][1].p) X((char *)"syntax error\n",1);
    if (T[c][1].p == (long long)4) {
      c = getc(p);
      while (1) {
        if (c != '\n') {
          if (! (c != -1)) break;
        }
        else break;
        c = getc(p);
      }
    }
    c = getc(p);
  }
  return_label: return;
}

/*@ assigns \result;
    assigns \result \from \nothing; */
A *I(void)
{
  A *tmp;
  if (c == -1) X((char *)"syntax error\n",1);
  A *f = T[c];
  if ((f + 0)->t != & Ch) {
    c = getc(p);
    U();
  }
  tmp = (*((f + 0)->t))(f + 1);
  return tmp;
}

A *C(A *x)
{
  A *tmp_0;
  A *r = malloc(sizeof(A [5]));
  if (! r) X((char *)"memory error\n",-2);
  *(r + 0) = *x;
  {
    int i = 1;
    while (i < 5) {
      A __constr_expr_0 = {.t = (union A *(*)(union A *x))0};
      *(r + i) = __constr_expr_0;
      i ++;
    }
  }
  tmp_0 = R(r);
  return tmp_0;
}

int main(int x, char const **y)
{
  int __retres;
  if (x != 2) X((char *)"fail\n",-1);
  p = fopen(*(y + 1),"rb");
  if (! p) X((char *)"fail\n",-1);
  c = getc(p);
  U();
  while (c != -1) {
    A *f = I();
    while ((f + 3)->a) 
      if ((f + 0)->l == & rT) {
        A *tmp_0;
        tmp_0 = R((f + 1)->a);
        f = (*(((f + 1)->a + 0)->l))(tmp_0,f);
      }
      else 
        if ((f + 0)->l == & rC) {
          T[96][0].t = & Y;
          A *r = R((f + 1)->a);
          D(f);
          f = r;
        }
        else {
          A *tmp_2;
          long tmp_3;
          A *tmp_4;
          A __constr_expr_1 = {.l = & fT};
          tmp_2 = C(& __constr_expr_1);
          A *r_0 = tmp_2;
          (r_0 + 1)->a = f;
          tmp_3 = ftell(p);
          (r_0 + 2)->p = (long long)(tmp_3 + (long)(c == -1));
          ;
          tmp_4 = R(f);
          f = (*((f + 0)->l))(tmp_4,r_0);
        }
    D(f);
  }
  __retres = 0;
  return __retres;
}

A *Ch(A *x)
{
  A *r = C(x);
  c = getc(p);
  if (c == -1) X((char *)"syntax error\n",1);
  (r + 1)->p = (long long)c;
  c = getc(p);
  U();
  return r;
}

A *NL(A *x)
{
  A *r = C(x);
  (r + 1)->p = (long long)'\n';
  return r;
}

A *rT(A *x, A *y)
{
  A *r = R((x + 2)->a);
  D(y);
  D(x);
  return r;
}

A *fD0(A *x, A *y)
{
  A *tmp;
  A __constr_expr_2 = {.l = & fD};
  tmp = C(& __constr_expr_2);
  A *r = tmp;
  (r + 1)->a = y;
  D(x);
  return r;
}

A *fA1(A *x, A *y)
{
  A *__retres;
  A *tmp_0;
  if ((y + 3)->a) {
    A *tmp;
    if ((y + 0)->l == & rT) goto _LOR;
    else 
      if ((y + 0)->l == & rC) {
        _LOR: {
                D(x);
                __retres = y;
                goto return_label;
              }
      }
    A __constr_expr_3 = {.l = & fA2};
    tmp = C(& __constr_expr_3);
    A *r = tmp;
    (r + 1)->a = x;
    (r + 3)->a = y;
    __retres = r;
    goto return_label;
  }
  tmp_0 = (*((x + 0)->l))(x,y);
  __retres = tmp_0;
  return_label: return __retres;
}

A *fA2(A *x, A *y)
{
  A *tmp_2;
  union A *tmp_1;
  A *a = R((x + 1)->a);
  A *b = R((x + 3)->a);
  D(x);
  tmp_1 = (*((b + 0)->l))(b,y);
  ;
  tmp_2 = fA1(a,tmp_1);
  return tmp_2;
}

A *rA1(A *x, A *y)
{
  A *__retres;
  A *tmp_2;
  if ((y + 3)->a) {
    A *tmp;
    if ((y + 0)->l == & rT) goto _LOR;
    else 
      if ((y + 0)->l == & rC) {
        _LOR: {
                __retres = y;
                goto return_label;
              }
      }
    A __constr_expr_4 = {.l = & rA2};
    tmp = C(& __constr_expr_4);
    A *r = tmp;
    (r + 1)->a = x;
    (r + 3)->a = y;
    __retres = r;
    goto return_label;
  }
  if ((y + 0)->l == & fD0) {
    A *tmp_0;
    A __constr_expr_5 = {.l = & fD};
    tmp_0 = C(& __constr_expr_5);
    A *r_0 = tmp_0;
    (r_0 + 1)->a = R((x + 2)->a);
    D(y);
    D(x);
    __retres = r_0;
    goto return_label;
  }
  A *r_1 = fA((x + 2)->a);
  D(x);
  tmp_2 = fA1(y,r_1);
  __retres = tmp_2;
  return_label: return __retres;
}

A *rA2(A *x, A *y)
{
  A *tmp_2;
  union A *tmp_1;
  A *f = R((x + 1)->a);
  A *a = R((x + 3)->a);
  D(x);
  tmp_1 = (*((a + 0)->l))(a,y);
  ;
  tmp_2 = rA1(f,tmp_1);
  return tmp_2;
}

A *fA(A *x)
{
  A *__retres;
  A *tmp_0;
  A *tmp;
  R(x);
  if ((x + 0)->t != & fA) {
    __retres = x;
    goto return_label;
  }
  tmp = fA((x + 1)->a);
  ;
  tmp_0 = rA1(x,tmp);
  __retres = tmp_0;
  return_label: return __retres;
}

A *fD1(A *x, A *y)
{
  A *__retres;
  A *tmp_0;
  if ((x + 3)->a) {
    A *tmp;
    if ((x + 0)->l == & rT) goto _LOR;
    else 
      if ((x + 0)->l == & rC) {
        _LOR: {
                D(y);
                __retres = x;
                goto return_label;
              }
      }
    A __constr_expr_6 = {.l = & rD};
    tmp = C(& __constr_expr_6);
    A *r = tmp;
    (r + 1)->a = y;
    (r + 3)->a = x;
    __retres = r;
    goto return_label;
  }
  tmp_0 = (*((x + 0)->l))(x,y);
  __retres = tmp_0;
  return_label: return __retres;
}

A *rD(A *x, A *y)
{
  A *tmp_2;
  union A *tmp_1;
  A *a = R((x + 3)->a);
  A *b = R((x + 1)->a);
  D(x);
  ;
  tmp_1 = (*((a + 0)->l))(a,y);
  tmp_2 = fD1(tmp_1,b);
  return tmp_2;
}

A *fD(A *x, A *y)
{
  A *tmp_0;
  A *a = fA((x + 1)->a);
  D(x);
  tmp_0 = fD1(a,y);
  return tmp_0;
}

A *Yt(A *x)
{
  A *tmp;
  A __constr_expr_7 = {.t = & fA};
  tmp = C(& __constr_expr_7);
  A *r = tmp;
  (r + 1)->a = I();
  (r + 2)->a = I();
  return r;
}

A *YE(A *x)
{
  A *tmp;
  A *tmp_0;
  tmp = I();
  D(tmp);
  tmp_0 = I();
  return tmp_0;
}

A *Y1(A *x, A *y)
{
  A *__retres;
  A *tmp_0;
  if ((y + 3)->a) {
    A *tmp;
    if ((y + 0)->l == & rT) goto _LOR;
    else 
      if ((y + 0)->l == & rC) {
        _LOR: {
                D(x);
                __retres = y;
                goto return_label;
              }
      }
    A __constr_expr_8 = {.l = & Y2};
    tmp = C(& __constr_expr_8);
    A *r = tmp;
    (r + 1)->a = x;
    (r + 3)->a = y;
    __retres = r;
    goto return_label;
  }
  tmp_0 = (*((x + 0)->l))(x,y);
  __retres = tmp_0;
  return_label: return __retres;
}

A *Y2(A *x, A *y)
{
  A *tmp_2;
  union A *tmp_1;
  A *a = R((x + 1)->a);
  A *b = R((x + 3)->a);
  D(x);
  tmp_1 = (*((b + 0)->l))(b,y);
  ;
  tmp_2 = Y1(a,tmp_1);
  return tmp_2;
}

A *rY1(A *x)
{
  A *__retres;
  A *tmp_3;
  if ((x + 3)->a) {
    A *tmp_0;
    if ((x + 0)->l == & rT) {
      __retres = x;
      goto return_label;
    }
    if ((x + 0)->l == & rC) {
      A *tmp;
      tmp = I();
      D(tmp);
      __retres = x;
      goto return_label;
    }
    A __constr_expr_9 = {.l = & rY2};
    tmp_0 = C(& __constr_expr_9);
    A *r = tmp_0;
    (r + 3)->a = x;
    __retres = r;
    goto return_label;
  }
  if ((x + 0)->l != & fD0) {
    A *tmp_2;
    A *tmp_1;
    tmp_1 = I();
    ;
    tmp_2 = Y1(x,tmp_1);
    __retres = tmp_2;
    goto return_label;
  }
  D(x);
  T[96][0].t = & Yt;
  A __constr_expr_10 = {.l = & fD};
  tmp_3 = C(& __constr_expr_10);
  A *r_0 = tmp_3;
  (r_0 + 1)->a = I();
  T[96][0].t = & Y;
  __retres = r_0;
  return_label: return __retres;
}

A *rY2(A *x, A *y)
{
  A *tmp_1;
  union A *tmp_0;
  A *a = R((x + 3)->a);
  D(x);
  tmp_0 = (*((a + 0)->l))(a,y);
  tmp_1 = rY1(tmp_0);
  return tmp_1;
}

A *Y(A *x)
{
  A *tmp_0;
  A *tmp;
  tmp = I();
  tmp_0 = rY1(tmp);
  return tmp_0;
}

A *fK1(A *x, A *y)
{
  A *r = R((x + 1)->a);
  D(y);
  D(x);
  return r;
}

A *fK0(A *x, A *y)
{
  A *tmp;
  A __constr_expr_11 = {.l = & fK1};
  tmp = C(& __constr_expr_11);
  A *r = tmp;
  (r + 1)->a = y;
  D(x);
  return r;
}

A *fS21(A *x, A *y)
{
  A *__retres;
  A *tmp_0;
  if ((y + 3)->a) {
    A *tmp;
    if ((y + 0)->l == & rT) goto _LOR;
    else 
      if ((y + 0)->l == & rC) {
        _LOR: {
                D(x);
                __retres = y;
                goto return_label;
              }
      }
    A __constr_expr_12 = {.l = & fS22};
    tmp = C(& __constr_expr_12);
    A *r = tmp;
    (r + 1)->a = x;
    (r + 3)->a = y;
    __retres = r;
    goto return_label;
  }
  tmp_0 = (*((x + 0)->l))(x,y);
  __retres = tmp_0;
  return_label: return __retres;
}

A *fS22(A *x, A *y)
{
  A *tmp_2;
  union A *tmp_1;
  A *a = R((x + 1)->a);
  A *b = R((x + 3)->a);
  D(x);
  tmp_1 = (*((b + 0)->l))(b,y);
  ;
  tmp_2 = fS21(a,tmp_1);
  return tmp_2;
}

A *rS1(A *x, A *y, A *z)
{
  A *__retres;
  A *tmp_3;
  union A *tmp_2;
  if ((y + 3)->a) {
    A *tmp;
    if ((y + 0)->l == & rT) goto _LOR;
    else 
      if ((y + 0)->l == & rC) {
        _LOR: {
                D(z);
                D(x);
                __retres = y;
                goto return_label;
              }
      }
    A __constr_expr_13 = {.l = & rS2};
    tmp = C(& __constr_expr_13);
    A *r = tmp;
    (r + 1)->a = x;
    (r + 2)->a = z;
    (r + 3)->a = y;
    __retres = r;
    goto return_label;
  }
  if ((y + 0)->l == & fD0) {
    A *tmp_0;
    A __constr_expr_14 = {.l = & fD};
    tmp_0 = C(& __constr_expr_14);
    A *r_0 = tmp_0;
    A __constr_expr_15 = {.t = & fA};
    (r_0 + 1)->a = C(& __constr_expr_15);
    ((r_0 + 1)->a + 1)->a = R((x + 2)->a);
    ((r_0 + 1)->a + 2)->a = z;
    D(x);
    __retres = r_0;
    goto return_label;
  }
  A *r_1 = R((x + 2)->a);
  D(x);
  tmp_2 = (*((r_1 + 0)->l))(r_1,z);
  ;
  tmp_3 = fS21(y,tmp_2);
  __retres = tmp_3;
  return_label: return __retres;
}

A *rS2(A *x, A *y)
{
  A *tmp_3;
  union A *tmp_2;
  A *a = R((x + 3)->a);
  A *b = R((x + 2)->a);
  A *f = R((x + 1)->a);
  D(x);
  ;
  tmp_2 = (*((a + 0)->l))(a,y);
  ;
  tmp_3 = rS1(f,tmp_2,b);
  return tmp_3;
}

A *fS2(A *x, A *y)
{
  A *tmp_1;
  union A *tmp_0;
  A *a = R((x + 1)->a);
  R(y);
  ;
  tmp_0 = (*((a + 0)->l))(a,y);
  ;
  tmp_1 = rS1(x,tmp_0,y);
  return tmp_1;
}

A *fS1(A *x, A *y)
{
  A *tmp;
  A __constr_expr_16 = {.l = & fS2};
  tmp = C(& __constr_expr_16);
  A *r = tmp;
  (r + 1)->a = R((x + 1)->a);
  (r + 2)->a = y;
  D(x);
  return r;
}

A *fS0(A *x, A *y)
{
  A *tmp;
  A __constr_expr_17 = {.l = & fS1};
  tmp = C(& __constr_expr_17);
  A *r = tmp;
  (r + 1)->a = y;
  D(x);
  return r;
}

A *fI(A *x, A *y)
{
  D(x);
  return y;
}

A *fV(A *x, A *y)
{
  D(y);
  return x;
}

A *fW(A *x, A *y)
{
  putc((int)(x + 1)->p,__fc_stdout);
  D(x);
  return y;
}

A *fR(A *x, A *y)
{
  A *tmp_0;
  A *(*tmp)(A *x, A *y);
  A *tmp_1;
  ch = getc(__fc_stdin);
  if (ch != -1) tmp = & fI; else tmp = & fV;
  A __constr_expr_18 = {.l = tmp};
  tmp_0 = C(& __constr_expr_18);
  A *r = tmp_0;
  D(x);
  tmp_1 = (*((y + 0)->l))(y,r);
  return tmp_1;
}

A *fCh(A *x, A *y)
{
  A *tmp_0;
  A *(*tmp)(A *x, A *y);
  A *tmp_1;
  if ((long long)ch == (x + 1)->p) tmp = & fI; else tmp = & fV;
  A __constr_expr_19 = {.l = tmp};
  tmp_0 = C(& __constr_expr_19);
  A *r = tmp_0;
  D(x);
  tmp_1 = (*((y + 0)->l))(y,r);
  return tmp_1;
}

A *fP(A *x, A *y)
{
  A *tmp_0;
  A *(*tmp)(A *x, A *y);
  A *tmp_1;
  if (ch != -1) tmp = & fW; else tmp = & fV;
  A __constr_expr_20 = {.l = tmp};
  tmp_0 = C(& __constr_expr_20);
  A *r = tmp_0;
  if (ch != -1) (r + 1)->p = (long long)ch;
  D(x);
  tmp_1 = (*((y + 0)->l))(y,r);
  return tmp_1;
}

A *rE(A *x, A *y)
{
  A *__retres;
  A *tmp_1;
  if ((y + 3)->a == y) {
    A *tmp;
    tmp = (*((y + 0)->l))(y,x);
    __retres = tmp;
    goto return_label;
  }
  A *r = R((x + 1)->a);
  D(x);
  tmp_1 = (*((r + 0)->l))(r,y);
  __retres = tmp_1;
  return_label: return __retres;
}

A *fE(A *x, A *y)
{
  A *tmp;
  A __constr_expr_21 = {.l = & rE};
  tmp = C(& __constr_expr_21);
  A *r = tmp;
  (r + 1)->a = y;
  (r + 3)->a = r;
  D(x);
  return r;
}

A *fT(A *x, A *y)
{
  A *tmp;
  int tmp_0;
  A __constr_expr_22 = {.l = & rT};
  tmp = C(& __constr_expr_22);
  A *r = tmp;
  (r + 1)->a = R((x + 1)->a);
  (r + 2)->a = y;
  (r + 3)->a = r;
  tmp_0 = fseek(p,(long)((x + 2)->p - (long long)1),0);
  if (tmp_0) X((char *)"fail\n",-1);
  c = getc(p);
  U();
  D(x);
  return r;
}

A *rC(A *x, A *y)
{
  return y;
}

A *fC(A *x, A *y)
{
  A *tmp;
  A __constr_expr_23 = {.l = & rC};
  tmp = C(& __constr_expr_23);
  A *r = tmp;
  (r + 1)->a = y;
  (r + 3)->a = r;
  T[96][0].t = & YE;
  D(x);
  return r;
}

A T[256][2] =
  {[9] = {[1] = {.p = (long long)2}},
   {[1] = {.p = (long long)3}},
   {[1] = {.p = (long long)5}},
   {[1] = {.p = (long long)7}},
   {[1] = {.p = (long long)6}},
   [32] = {[1] = {.p = (long long)1}},
   [35] = {[1] = {.p = (long long)4}},
   [46] = {{.t = & Ch}, {.l = & fW}},
   [63] = {{.t = & Ch}, {.l = & fCh}},
   {{.t = & C}, {.l = & fR}},
   [96] = {{.t = & Y}},
   [99] = {{.t = & C}, {.l = & fE}},
   {{.t = & C}, {.l = & fD0}},
   {{.t = & C}, {.l = & fC}},
   [105] = {{.t = & C}, {.l = & fI}},
   [107] = {{.t = & C}, {.l = & fK0}},
   [114] = {{.t = & NL}, {.l = & fW}},
   {{.t = & C}, {.l = & fS0}},
   [118] = {{.t = & C}, {.l = & fV}},
   [124] = {{.t = & C}, {.l = & fP}}};

